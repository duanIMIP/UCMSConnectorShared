<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STG.Common.Interfaces</name>
    </assembly>
    <members>
        <member name="T:STG.Common.Interfaces.Activities.IActivityDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.IActivityDefinition.ActivityTypeIdentifier">
            <summary>
            activity identifier
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.IActivityDefinition.ActivityImplementationName">
            <summary>
            fully qualified name of the activity implementation
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.IActivityDefinition.ExecutionType">
            <summary>
            type of the activity
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.IActivityDefinition.MustDispose">
            <summary>
            notifies that the activity implementation must be disposed after processing
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Activities.NamespaceDoc">
            <summary>
            The STG.Common.ActivityManagerInterfaces namespace contains interfaces for implementing activities.     
            if an activity is implemented based on the provided interfaces, the activity configuration management must be handled by activity itself.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Activities.ISTGActivity">
            <summary>
            Defines Activity
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Activities.ISTGActivity.Initialize(System.IO.Stream)">
            <summary>
            Initialize the process timer with provided stream configuration(s)
            Will be called once after creation
            </summary>
            <param name="configuration">Stream with configuration data</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.ISTGActivity.Name">
            <summary>
            The Activity name
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.ISTGActivity.ActivityInfo">
            <summary>
            Provides access to Activity instance data and functionality
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Activities.ISTGActivityNotification">
            <summary>
            Activity interface that defines communication between platform and activity
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Activities.ISTGActivityNotification.SetPlatformHeartbeatDelegate(STG.Common.Interfaces.PlatformHeartbeatDelegate)">
            <summary>
            Sets a heartbeat callback function that the activity can use to report that it is running
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Activities.ISTGActivityNotification.Terminate">
            <summary>
            Method called by platform when host is shutting down so that activity can gracefully terminate processing
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Activities.ITypedActivityConfiguration`1">
            <summary>
            Interface defines activity with complex configuration
            </summary>
            <typeparam name="TActivityConfig"></typeparam>
        </member>
        <member name="P:STG.Common.Interfaces.Activities.ITypedActivityConfiguration`1.ActivityConfiguration">
            <summary>
            Activity configuration
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.ReportPublishProgress">
            <summary>
            delegate for reporting publish progress from the storage to the business logic
            </summary>
            <param name="progress"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.ReportPublishProgressStep">
            <summary>
            delegate for reporting publish step progress from the storage to the business logic
            </summary>
            <param name="progress"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.DocumentTypeConversionDelegate">
            <summary>
            delegate for callback call required to perform a conversion from design time to runtime document type
            </summary>
            <param name="designDocumentType"></param>
            <param name="runtimeProcessId"></param>
            <returns>modified document or media stream</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.DocumentCopyDelegate">
            <summary>
            delegate for callback call required to perform a server side document / media manipulation (e.g. when copying document)
            </summary>
            <param name="options"></param>
            <returns>modified document or media stream</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.PromoteParentDelegate">
            <summary>
            delegate that enables child removal on server side
            </summary>
            <param name="serializedObject"></param>
            <param name="childDocumentsToRemove"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.PlatformHeartbeatDelegate">
            <summary>
            Delegate that enables activities to report heartbeat to platform
            </summary>
            <param name="workItem">work item activity is working on</param>
            <param name="message">custom message sent from activity</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.DelegateType">
            <summary>
            type of the object been manipulated by the server
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="F:STG.Common.Interfaces.DelegateType.Document">
            <summary>
            document
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.DelegateType.Table">
            <summary>
            table list
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.CopyManipulationOptions">
            <summary>
            options object holding manipulation meta-data
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.ObjectType">
            <summary>
            describes object to be manipulated
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.SerializedObject">
            <summary>
            serialized stream of the object to be manipulated
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.SourceIdentifier">
            <summary>
            identifier of the manipulated object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.Modifications">
            <summary>
            list linking original and modified object identifiers
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.NewWorkItem">
            <summary>
            work item where to assign the modified object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopyManipulationOptions.ChildIdentifiers">
            <summary>
            list that keeps link between original and modified object and their parent
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.CopiedDocumentIdentifiers">
            <summary>
            helper class for linking original and copied object and its parent
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.CopiedDocumentIdentifiers.sourceGUID">
            <summary>
            source (original) object ID
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopiedDocumentIdentifiers.copiedGUID">
            <summary>
            copied object ID
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopiedDocumentIdentifiers.copiedParentGuid">
            <summary>
            ID of the copied parent object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.CopiedDocumentIdentifiers.documentName">
            <summary>
            Document Name
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IActivityInstanceStorage">
            <summary>
            Activity instances storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.CheckProcessesForUseActivityType(System.Int32)">
            <summary>
            Check all processes if they use the provided activity type
            </summary>
            <param name="typeId">The type id of the checked activity type</param>
            <returns>true if used in a process</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.LoadActivityInstanceConfiguration(System.Int32)">
            <summary>
            Loads activity instance configuration
            </summary>
            <param name="activityId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.SaveActivityInstanceConfiguration(STG.Common.DTO.DtoActivityConfiguration)">
            <summary>
            Saves activity instance configuration
            </summary>
            <param name="configuration"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.LoadAllActivityInstancesForProcess(System.Int32)">
            <summary>
            Load all activity instance configurations for a specified process
            </summary>
            <param name="processId">Process id to load instance configuration</param>
            <returns>The list with the instance configurations</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.LoadActivityInstancesForProcess(System.Int32)">
            <summary>
            Load all activity instances for a specified process
            </summary>
            <param name="processId">Process id to load instance configuration</param>
            <returns>The list with the instance configurations</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.LoadActivityInstanceConfiguration(System.Int32,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="activityTypeId"></param>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.GetActivitiesConfigurationVariables(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Method gets all activity configuration variables
            </summary>
            <param name="activityIds"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityInstanceStorage.UpgradeActivityInstance(System.Int32,System.Int32)">
            <summary>
            Upgrades the activity instance to the version of the activity type with specified ID
            </summary>
            <param name="activityInstanceId">Specified activity instance ID to upgrade</param>
            <param name="newActivityTypeId">Specified activity type ID to upgrade to</param>
            <returns>Upgraded activity with updated configuration</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IActivityStorage">
            <summary>
            Activity storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadAllActivities">
            <summary>
            loads all Activities
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivity(System.Int32)">
            <summary>
            loads Activity with specified ID
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivitiesOfExecutionType(STG.Common.DTO.DtoActivityExecutionType)">
            <summary>
            Loads all activities of the specified execution type
            </summary>
            <param name="executionType">Execution type of selected activities</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivityIcon(System.Int32)">
            <summary>
            loads a single Activity
            </summary>
            <param name="activityId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivityIconType(System.Int32)">
            <summary>
            loads a single Activity icon type
            </summary>
            <param name="activityId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.DeleteActivity(System.Int32)">
            <summary>
            Deletes the activity with specified ID
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.CreateActivity(STG.Common.DTO.DtoDesignerActivity)">
            <summary>
            creates the new activity based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.CreateActivityPackageAndRegisterActivities(STG.Common.DTO.DtoActivityPackageMetaData,System.String)">
            <summary>
            Create a db entry for the activity package
            </summary>
            <param name="metaData"></param>
            <param name="pathToPackageFile"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.AppendChildPackage(STG.Common.DTO.DtoActivityPackageMetaData,System.String)">
            <summary>
            Create a db entry for the child package for the activity (help or configuration files)
            </summary>
            <param name="metaData"></param>
            <param name="pathToPackageFile"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivityPackage(System.Int32)">
            <summary>
            Load activitypackage for specified activity type
            </summary>
            <param name="activityTypeId">Specified activity type id for the package to load</param>
            <returns>Stream with the binary data of the activity package</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.UpdateActivity(STG.Common.DTO.DtoDesignerActivity)">
            <summary>
            updates the activity based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadAllTags">
            <summary>
            Load all tags
            </summary>
            <returns>List with all tags</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.GetActivityPackagesForProcess(System.Int32)">
            <summary>
            Loads all activity packages for the process
            </summary>
            <param name="processId">Process identifier</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.LoadActivityVersions(System.Int32)">
            <summary>
            Loads all versions of the Activity type with specified ID
            </summary>
            <param name="activityTypeId">Specified activity type ID for the versions to load</param>
            <returns>List of all activity type versions</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IActivityStorage.GetChildPackages(System.Int32)">
            <summary>
            Loads all child packages (help, configuration) )for the package ID
            </summary>
            <param name="packageId">package identifier</param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IDesignerStorage">
            <summary>
            Designer storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDesignerStorage.PersistProcessDiagram(STG.Common.DTO.DtoDiagramData)">
            <summary>
            saves the provided diagram data to database
            </summary>
            <param name="data"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDesignerStorage.LoadDiagram(System.Int32)">
            <summary>
            loads the data required to display the diagram for the provided process ID
            </summary>
            <param name="processID">ID of the process</param>
            <returns>Diagram data representation</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDesignerStorage.ImportDiagram(STG.Common.DTO.DtoDiagramData,STG.Common.DTO.DtoProcessImportOptions,System.Collections.Generic.IDictionary{System.Int32,System.Func{System.IO.Stream}},System.Collections.Generic.IDictionary{System.Int32,System.Func{System.IO.Stream}})">
            <summary>
            Imports given diagram
            </summary>
            <param name="data"></param>
            <param name="importOptions"></param>
            <param name="configs"></param>
            <param name="variables"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IDocumentTypeStorage">
            <summary>
            Document Types storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.GetDocumentTypes">
            <summary>
            loads all document type definitions
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.GetDocumentTypesForProcess(System.Int32)">
            <summary>
            loads all document type definitions for the process
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.GetDocumentTypesNotAssignedForProcess(System.Int32)">
            <summary>
            loads all document type definitions for the process
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.AssignDocumentTypeToProcess(STG.Common.DTO.DtoDocumentTypeDefinition,System.Int32)">
            <summary>
            assign document type to process
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.RemoveDocumentTypesFromProcess(System.Int32,System.Int32)">
            <summary>
            remove document type from process
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.CreateDocumentTypeDefinition(System.String)">
            <summary>
            Creates a new document type definition
            </summary>
            <param name="documentTypeName"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.UpdateDocumentType(STG.Common.DTO.DtoDocumentTypeDefinition)">
            <summary>
            updates the document type
            </summary>
            <param name="documentType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.DeleteDocumentType(System.Int32)">
            <summary>
            Deletes document type definition
            </summary>
            <param name="docTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.GetProcessesUsingDocumentType(System.Collections.Generic.IList{STG.Common.DTO.DtoDocumentTypeDefinition})">
            <summary>
            
            </summary>
            <param name="documentTypes"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.OverrideDocumentType(STG.Common.DTO.DtoDocumentTypeDefinition)">
            <summary>
            Method overrides existing document type
            </summary>
            <param name="documentType">Document type to use for override</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.GetDocumentType(System.Int32)">
            <summary>
            Load document type with the provided ID
            </summary>
            <param name="docTypeID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IDocumentTypeStorage.UpdateProcessAssignedDocumentTypesProcessID(System.Int32,System.Int32)">
            <summary>
            Updates process assigned document types's process ID
            </summary>
            <param name="oldProcessID">Old process assigned document types's process ID</param>
            <param name="newProcessID">New process assigned document types's process ID</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IEnvironmentStorage">
            <summary>
            Environment storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.GetAllEnvironments">
            <summary>
            Get all registered environments
            </summary>
            <returns>List of all registered environments</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.GetEnvironment(System.Int32)">
            <summary>
            Gets environment by Id
            </summary>
            <param name="environmentId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.RegisterNewEnvironment(STG.Common.DTO.DtoEnvironment)">
            <summary>
            Register a new environment
            </summary>
            <param name="newEnvironment">The new environment to register</param>
            <returns>The updated Dto for the environment</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.EditEnvironment(STG.Common.DTO.DtoEnvironment)">
            <summary>
            Edit the provided environment
            </summary>
            <param name="environment">The environment to edit</param>
            <returns>The updated Dto for the environment</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.DeleteEnvironment(System.Int32)">
            <summary>
            delete an environment
            </summary>
            <param name="environmentId">The  environment to delete</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.GetAllEnvironmentProcessMappings">
            <summary>
            Returns a list of all environment-process mappings
            </summary>
            <returns>The list of all environment-process mapping</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IEnvironmentStorage.UpdateEnvironmentProcessesProcessID(System.Int32,System.Int32)">
            <summary>
            Updates environment process mapping's process ID
            </summary>
            <param name="oldProcessID">Old published processes's process ID</param>
            <param name="newProcessID">New published processes's process ID</param>
            <returns>Updated environment process mapping data</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IFileStorage">
            <summary>
            File storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IFileStorage.SaveFile(STG.Common.DTO.DtoStoredFile)">
            <summary>
            Method stores file in DB
            </summary>
            <param name="file"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IFileStorage.UpdateFile(STG.Common.DTO.DtoStoredFile)">
            <summary>
            Updates file in DB
            </summary>
            <param name="file"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IFileStorage.DeleteFile(STG.Common.DTO.DtoStoredFile)">
            <summary>
            Deletes file from DB
            </summary>
            <param name="file"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IFileStorage.GetFile(System.Guid)">
            <summary>
            Gets stored file from database
            </summary>
            <param name="fileId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IIndexFieldStorage">
            <summary>
            Index field storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IIndexFieldStorage.GetDocumentIndexFields(System.Int32)">
            <summary>
            loads all index fields definitions
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IIndexFieldStorage.GetIndexField(System.Int32,System.Int32)">
            <summary>
            loads a single index fields definition
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IIndexFieldStorage.CreateIndexFieldDefinition(System.Int32,System.String,STG.Common.DTO.DtoSTGDataType,System.Boolean)">
            <summary>
            Creates a new Index field definition
            </summary>
            <param name="docTypeId"></param>
            <param name="fieldName"></param>
            <param name="fieldType"></param>
            <param name="isIndexed"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IIndexFieldStorage.UpdateIndexFieldDefinition(System.Int32,STG.Common.DTO.DtoStorageDefinition)">
            <summary>
            updates a Index field definition
            </summary>
            <param name="docTypeId"></param>
            <param name="indexField"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IIndexFieldStorage.DeleteIndexField(System.Int32,System.Int32)">
            <summary>
            Deletes index field definition
            </summary>
            <param name="docTypeId"></param>
            <param name="indexFieldId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IMediaTypeStorage">
            <summary>
            Media Types storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IMediaTypeStorage.GetMediaTypes">
            <summary>
            loads all media type definitions
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IMediaTypeStorage.CreateMediaTypeDefinition(STG.Common.DTO.DtoMediaTypeDefinition)">
            <summary>
            Creates a new media type definition
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IMediaTypeStorage.UpdateMediaType(STG.Common.DTO.DtoMediaTypeDefinition)">
            <summary>
            updates the media type
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IMediaTypeStorage.DeleteMediaType(System.Int32)">
            <summary>
            Deletes media type definition
            </summary>
            <param name="mediaTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IPublishStorage">
            <summary>
            Publish storage interface
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.ISTGStorageBase">
            <summary>
            Base interface for storages
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGLoggerBase">
            <summary>
            Interface used with objects containing ISTGLogger
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.STGSystem.ISTGLoggerBase.Logger">
            <summary>
            Logger property
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.LoadPublishedProcessesForProcesses(System.Int32)">
            <summary>
            Loads all published processes data for provided process identifier
            </summary>
            <param name="processID">Published process ID</param>
            <returns>List of published processes data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.LoadPublishedProcessData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads published project data for provided identifier
            </summary>
            <param name="processID">Published process ID</param>
            <param name="majorVersion">Published process major version</param>
            <param name="minorVersion">Published process minor version</param>
            <returns>Published process data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.LoadPublishedProcessPackageStream(System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads published project package stream for provided identifier
            </summary>
            <param name="processID">Published process ID</param>
            <param name="majorVersion">Published process major version</param>
            <param name="minorVersion">Published process minor version</param>
            <returns>Published process package stream</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.UpdatePublishedProcessesProcessID(System.Int32,System.Int32)">
            <summary>
            Updates published process's process ID
            </summary>
            <param name="oldProcessID">Old published processes's process ID</param>
            <param name="newProcessID">New published processes's process ID</param>
            <returns>Updated published process data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.ValidatePublishJobData(STG.Common.DTO.DtoPublishInfo)">
            <summary>
            Validates publish job
            </summary>
            <param name="info"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.CreatePublishedProcess(System.IO.Stream,System.Int32)">
             <summary>
             Creates published process data
             </summary>
             <param name="processPackage"></param>
             <param name="processId"></param>
             <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IPublishStorage.CreatePublishMappings(STG.Common.DTO.DtoPublishInfo)">
            <summary>
            Creates publish mappings
            </summary>
            <param name="publishInfo"></param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IRoleInstancesStorage">
            <summary>
            Role instances storage
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.ICRUDStorage`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.ICRUDStorage`2.GetAll">
            <summary>
            Gets all available items
            </summary>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.ICRUDStorage`2.Create(`0)">
            <summary>
            Creates new item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.ICRUDStorage`2.Update(`0)">
            <summary>
            Updates item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.ICRUDStorage`2.Get(`1)">
            <summary>
            Loads item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.ICRUDStorage`2.Delete(`1)">
            <summary>
            Deletes item
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRoleInstancesStorage.GetAllForRole(System.Int32)">
            <summary>
            Gets role instances
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRoleInstancesStorage.GetAllForProcess(System.Int32)">
            <summary>
            Gets all role instances that a certain process has. The role instances are process or above but also the activity instance ones
            </summary>
            <param name="processId"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRoleInstancesStorage.CreateInstances(System.Collections.Generic.IList{STG.Common.DTO.Designer.DtoDesignerRoleInstance})">
            <summary>
            Creates role instances
            </summary>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRoleInstancesStorage.UpdateRoleInstancesProcessID(System.Int32,System.Int32)">
            <summary>
            Updates role instance's process ID
            </summary>
            <param name="oldProcessID">Old prole instance's process ID</param>
            <param name="newProcessID">New prole instance's process ID</param>
            <returns>Updated role instances data</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IRolesStorage">
            <summary>
            Roles storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.GetRoles(STG.Common.DTO.Designer.DtoDesignerRoleInstance)">
            <summary>
            Gets role based on filtering set in instance object
            </summary>
            <param name="roleInstance"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.GetClientRoles(System.Int32)">
            <summary>
            Retreives client roles
            </summary>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.SaveMappings(System.Int32,System.Int32,System.Collections.Generic.IList{STG.Common.DTO.Designer.DtoDesignerRoleMapping})">
            <summary>
            Saves role mappings
            </summary>
            <param name="roleId"></param>
            <param name="environmentId"></param>
            <param name="mappings"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.LoadMappings(System.Int32,System.Int32)">
            <summary>
            Loads role mappings
            </summary>
            <param name="roleId"></param>
            <param name="environmentId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.LoadMappings(System.Collections.Generic.IList{System.Int32},System.Int32)">
            <summary>
            Loads role mappings for a list of roles
            </summary>
            <param name="rolesId"></param>
            <param name="environmentId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.LoadProcessMappingsForEnvironment(System.Int32,System.Int32)">
            <summary>
            Loads all the configured mappings that exists for the provided process for the provided environment
            </summary>
            <param name="processId">Process</param>
            <param name="environmentId">environment</param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.LoadApplicationPermissions(System.Int32,System.Nullable{System.Guid})">
            <summary>
            Loads application permission
            </summary>
            <param name="roleId"></param>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.SaveApplicationPermissions(System.Int32,System.Guid,System.Collections.Generic.IList{STG.Common.DTO.DtoRoleApplicationPermission})">
            <summary>
            Saves application permission
            </summary>
            <param name="roleId"></param>
            <param name="applicationId"></param>
            <param name="permissions"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.CanProcessBePublished(System.Int32,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            This method checks if any of the provided claims are allowed to publish the Process to an environment 
            </summary>
            <param name="processID"></param>
            <param name="environmentID"></param>
            <param name="userClaims"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.LoadMappings(System.Int32)">
            <summary>
            Loads role mappings for all for the provided role ID
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.CreateDefaultSystemRole(STG.Common.DTO.Designer.DtoDesignerRole)">
            <summary>
            Creates new item and flags it as a system default role
            </summary>
            <param name="item"></param>
            <returns></returns>
            <IntroducedIn>1.4</IntroducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IRolesStorage.GetSystemRoles">
            <summary>
            Loads all roles defined as system default roles
            </summary>
            <returns></returns>
            <IntroducedIn>1.4</IntroducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.ISystemMonitorStorage">
            <summary>
            ISystem
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.GetServiceLocationHealth">
            <summary>
            Loads a list with the configured <c>DtoServiceLocationHealth</c> objects.
            </summary>
            <returns>IList with <c>DtoServiceLocationHealth</c> objects.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.GetServiceLocationHealth(System.String)">
            <summary>
            Loads the specified <c>DtoServiceLocationHealth</c> object.
            </summary>
            <param name="locationId">Specifies the desired <c>DtoServiceLocationHealth</c> object.</param>
            <returns>The specified <c>DtoServiceLocationHealth</c> object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.LockServiceLocationHealth(STG.Common.DTO.DtoServiceLocationHealth)">
            <summary>
            Locks the specified <c>DtoServiceLocationHealth</c> object for thread safe execution.
            </summary>
            <param name="healthItem">Specifies the desired <c>DtoServiceLocationHealth</c> object.</param>
            <returns>Successful lock on object created.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.UnLockServiceLocationHealth(STG.Common.DTO.DtoServiceLocationHealth)">
            <summary>
            Unlocks the specified <c>DtoServiceLocationHealth</c> object after execution.
            </summary>
            <param name="healthItem">Specifies the desired <c>DtoServiceLocationHealth</c> object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.GetServiceLocationHealthGroups">
            <summary>
            Loads a list with <c>DtoServiceLocationHealthGroup</c> objects.
            </summary>
            <returns>An IList object with <c>DtoServiceLocationHealthGroup</c> elements.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.GetPerformanceCounter">
            <summary>
            Loads a list with <c>DtoPerformanceCounter</c> objects.
            </summary>
            <returns>An IList object with <c>DtoPerformanceCounter</c> elements.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.LockPerformanceCounter(STG.Common.DTO.DtoPerformanceCounter)">
            <summary>
            Locks a <c>DtoPerformanceCounter</c> object for thread safe execution.
            </summary>
            <param name="performanceCounter">The <c>DtoPerformanceCounter</c> to lock.</param>
            <returns>Successful lock on object created.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.UnLockPerformanceCounter(STG.Common.DTO.DtoPerformanceCounter)">
            <summary>
            Unlocks the specified <c>DtoPerformanceCounter</c> object after execution.
            </summary>
            <param name="performanceCounter">The <c>DtoPerformanceCounter</c> object to unlock.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ISystemMonitorStorage.GetSystemInfo">
            <summary>
            returns the basic system statistical data
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.ITableColumnStorage">
            <summary>
            Table column storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableColumnStorage.GetTableColumns(System.Int32,System.Int32)">
            <summary>
            loads all table column definitions
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableColumnStorage.GetTableColumnDefinition(System.Int32,System.Int32,System.Int32)">
            <summary>
            loads a single  table column definition
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableColumnStorage.CreateTableColumnDefinition(System.Int32,System.Int32,System.String,STG.Common.DTO.DtoSTGDataType)">
            <summary>
            Creates a new table column definition
            </summary>
            <param name="docTypeId"></param>
            <param name="tableId"></param>
            <param name="columnName"></param>
            <param name="dataType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableColumnStorage.UpdateTableColumnDefinition(System.Int32,System.Int32,STG.Common.DTO.DtoStorageDefinition)">
            <summary>
            updates a Column
            </summary>
            <param name="docTypeId"></param>
            <param name="tableId"></param>
            <param name="columnDefinition"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableColumnStorage.DeleteTableColumnDefinition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes column
            </summary>
            <param name="docTypeId"></param>
            <param name="tableId"></param>
            <param name="columnId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.ITableStorage">
            <summary>
            Table storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableStorage.GetDocumentTables(System.Int32)">
            <summary>
            loads all table definitions
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableStorage.GetTableDefinition(System.Int32,System.Int32)">
            <summary>
            loads a single  table definition
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableStorage.CreateTableDefinition(System.Int32,System.String,System.String)">
            <summary>
            Creates a new table definition
            </summary>
            <param name="docTypeId"></param>
            <param name="tableName"></param>
            <param name="description"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableStorage.UpdateTableDefinition(System.Int32,STG.Common.DTO.DtoTableDefinition)">
            <summary>
            updates a table definition
            </summary>
            <param name="docTypeId"></param>
            <param name="tableDefinition"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.ITableStorage.DeleteTableDefinition(System.Int32,System.Int32)">
            <summary>
            Deletes table definition
            </summary>
            <param name="docTypeId"></param>
            <param name="tableId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IUpgradeStorage">
            <summary>
            Upgrade process interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUpgradeStorage.GetMapedActivityInstances(System.Int32,System.Int32)">
            <summary>
            Loads the runtime activity instances that have a valid runtime map for the provided runtime process ID on the provided runtime environment
            </summary>
            <param name="processID"></param>
            <param name="environmentID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUpgradeStorage.LoadVariablesInProcess(System.Int32,System.Int32)">
            <summary>
            loads variable values of all variables used in the provided process
            </summary>
            <param name="processID"></param>
            <param name="environmentID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUpgradeStorage.UpgradeProcessVariables(System.Int32,System.Int32)">
            <summary>
            upgrades process variables for the given process on a given environment
            </summary>
            <param name="processID"></param>
            <param name="environmentID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUpgradeStorage.PrepareVariablesForUpgrade(System.Int32,System.Int32)">
            <summary>
            This method prepares the variables configured in the designer for update in runtime environment
            </summary>
            <param name="processID"></param>
            <param name="environmentID"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IUserStorage">
            <summary>
            User storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUserStorage.GetUsers(System.Nullable{System.Int32})">
            <summary>
            Gets users from db
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUserStorage.GetUser(System.Int32)">
            <summary>
            Gets single user from db
            </summary>
            <param name="userId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUserStorage.CreateUser(STG.Common.DTO.DtoUser)">
            <summary>
            Creates user in runtime db
            </summary>
            <param name="user"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUserStorage.UpdateUser(STG.Common.DTO.DtoUser)">
            <summary>
            Updates user in runtime db
            </summary>
            <param name="user"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IUserStorage.DeleteUser(System.Int32)">
            <summary>
            Deletes user in runtime db
            </summary>        
            <param name="userId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IVariableStorage">
            <summary>
            Variable storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariables">
            <summary>
            
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.CreateVariable(STG.Common.DTO.DtoVariable)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.UpdateVariable(STG.Common.DTO.DtoVariable)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.DeleteVariable(System.Int32)">
            <summary>
            Deletes variable
            </summary>
            <param name="variableId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariableValues(STG.Common.DTO.DtoVariable)">
            <summary>
            
            </summary>
            <param name="variable"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariableValue(System.Int32)">
            <summary>
            
            </summary>
            <param name="variableValueId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariableValues(System.Int32)">
            <summary>
            
            </summary>
            <param name="variableId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.CheckExistingVariable(STG.Common.DTO.DtoVariableValue)">
            <summary>
            Method validates variable
            </summary>
            <param name="entryToCheck"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariableValues(STG.Common.DTO.DtoVariableValue)">
            <summary>
            
            </summary>
            <param name="variableValue"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.CreateVariableValue(STG.Common.DTO.DtoVariableValue)">
            <summary>
            
            </summary>
            <param name="variableValue"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.UpdateVariableValue(STG.Common.DTO.DtoVariableValue)">
            <summary>
            Updates underlying database entity from DTO
            </summary>
            <param name="variableValue"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetAllVariableValues(STG.Common.DTO.DtoVariableValue)">
            <summary>
            Loads variable values on all the levels for the variables that matches the criteria specified in selectLevel
            </summary>
            <param name="selectLevel">defines a level of variables to show</param>
            <returns>list of all variable values that matches the specified condition</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.DeleteVariableValue(System.Int32)">
            <summary>
            Deletes variable
            </summary>
            <param name="variableValueId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.GetVariables(System.String,STG.Common.DTO.Metadata.InputType)">
            <summary>
            Method finds variables based on name and type
            </summary>
            <param name="name">Name of the variable</param>
            <param name="type">Type of variable</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.ImportVariableValue(STG.Common.DTO.DtoVariableValue,STG.Common.DTO.DtoProcessImportOptions)">
            <summary>
            Method imports variable value into process
            </summary>
            <param name="dtoVariableValue"></param>
            <param name="importOptions"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IVariableStorage.UpdateVariableValuesProcessID(System.Int32,System.Int32)">
            <summary>
            Updates variable values's process ID
            </summary>
            <param name="oldProcessID">Old variable values's process ID</param>
            <param name="newProcessID">New variable values's process ID</param>
            <returns>Updated variable values data</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGColumnDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGColumnDefinition.ColumnType">
            <summary>
            Gets the data type of the column.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGColumnDefinition.Name">
            <summary>
            Gets the column name.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGFieldDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGFieldDefinition.SetDocumentTypeOwner(STG.Common.Interfaces.Document.ISTGDocumentType)">
            <summary>
            Method sets the document type owner
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGFieldDefinition.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGFieldDefinition.IsIndexed">
            <summary>
            Notifies if the index field should be indexed or not
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGFieldDefinition.DocumentTypeOwner">
            <summary>
            Gets the document type owning the field definition.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGFieldDefinition.FieldType">
            <summary>
            Gets a data type of a field.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTableDefinition">
            <summary>
            
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGTableDefinition.AppendColumnDefinition(System.String,STG.Common.DTO.DtoSTGDataType)">
            <summary>
            Adds a new column definition.
            </summary>
            <param name="columnName">Represents the name of the column.</param>
            <param name="columnDataType">Represents a data type of the column.</param>
            <returns>Returns the table definition object.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGTableDefinition.AppendColumnDefinition(STG.Common.Interfaces.Document.ISTGColumnDefinition)">
            <summary>
            Adds a new column definition.
            </summary>
            <param name="columnToAdd">Represents a column definition object to add.</param>
            <returns>Returns the table definition object.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGTableDefinition.SetDocumentTypeOwner(STG.Common.Interfaces.Document.ISTGDocumentType)">
            <summary>
            Method sets the document type owner
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTableDefinition.TableName">
             <summary>
            Gets the name of the table.
             </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTableDefinition.DocumentTypeOwner">
            <summary>
            Gets the document type owning this table definition.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTableDefinition.ColumnDefinitions">
            <summary>
            Gets a read-only collection of column definitions for the current table.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.Modification.IModificationSubject">
            <summary>
            modification subject interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.Modification.IModificationSubject.AddModificationListener(STG.Common.Interfaces.Document.Modification.IModificationListener)">
            <summary>
            adds the modification listener
            </summary>
            <param name="listener"></param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.Modification.IModificationSubject.RemoveModificationListener(STG.Common.Interfaces.Document.Modification.IModificationListener)">
            <summary>
            remove the modification listener
            </summary>
            <param name="listener"></param>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.ColumnName">
            <summary>
            Represents a name of the column.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.Row">
            <summary>
            Represents a table row the cell belongs to.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.CellType">
            <summary>
            Gets the data type of a cell.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.Type">
            <summary>
            Gets the data type of a cell.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.CapturedValue">
            <summary>
             Represents a value of the cell captured from a document.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.CellValue">
            <summary>
            Gets a value object of the current cell
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCell.Location">
            <summary>
            Gets the cell location on a document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGCustomValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCustomValue.Key">
            <summary>
            Gets the value of a custom value key.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCustomValue.Value">
            <summary>
            Gets or sets the value of the custom value.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGCustomValueHolder">
            <summary>
            Interface for extending object with custom values
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGCustomValueHolder.AddCustomValue(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new custom value to the CustomValue list.
            If a value with a name does not exists, it is created.
            If a value with the specified name exists, 
            it is replaced with the provided value if failIfExist is false or 
            it throws an exception if a failIfExist is true.
            </summary>
            <param name="name">Defines a name of a custom value.</param>
            <param name="value">Defines the value for a custom value.</param>
            <param name="failIfExist">If true, an exception occurs when adding a value with a name that already exists.</param>
            <returns>Returns the added custom value object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGCustomValueHolder.LoadCustomValue(System.String)">
            <summary>
            Loads a value of a custom value based on a provided name.
            </summary>
            <param name="name">Defines a name of a custom value to read.</param>
            <returns>Returns the value of a custom value.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGCustomValueHolder.RemoveCustomValue(System.String)">
            <summary>
            Removes a custom value with as specified name.
            </summary>
            <param name="name">Represents a name of a custom value to remove.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGCustomValueHolder.CustomValues">
            <summary>
            Gets a list of custom values stored with a current object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGDocument">
            <summary>
            STGDocument 
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.Modification.IStoreable">
            <summary>
            defines the Storable interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.Modification.IStoreable.GetStorageTag">
            <summary>
            returns the storage tag
            </summary>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.Initialize(System.String)">
            <summary>
            Constructs the document structure by adding the index fields and tables based on a definition provided in document type.
            </summary>
            <param name="docTypeName">Represents the document type name to be used for constructing document.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.LoadDocTypeByName(System.String)">
            <summary>
            Loads a document type definition for a provided document type name.
            </summary>
            <param name="docTypeName">Specifies the document type name.</param>
            <returns>Returns the document type.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MergeChildWorkItems">
            <summary>
            Merges the child work items with the work item of the current document.
            All the documents assigned to the child work item(s) are appended to the current document.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CreateWorkItemsForChildren(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Splits the current document by removing the child documents from the provided list 
            and assigning them to a new work items.
            </summary>
            <param name="childDocumentIds">List of child document IDs to remove.</param>
            <returns>Returns a list of newly-created work items that contain the splitted documents.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.AppendPage(STG.Common.Interfaces.Document.ISTGPage)">
            <summary>
            Appends a page as the last page of a current document.
            </summary>
            <param name="pageToAdd">Specifies a page to add.</param>
            <returns>Returns the appended page.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter pageToInsert cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified page is already assigned to a current document.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.InsertPage(STG.Common.Interfaces.Document.ISTGPage,System.Int32)">
            <summary>
            Inserts the provided page to a specified position in the document pages.
            </summary>
            <param name="pageToInsert">Specifies a page to insert.</param>
            <param name="position">Defines a position in the pages list where to insert a page.</param>
            <returns>Returns the inserted page object.</returns>
            <exception cref="T:System.ArgumentNullException">he value for parameter pageToInsert cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified page is already assigned to a current document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is in invalid range.</exception>        
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves the page with on the specified index to the specified location.
            </summary>
            <param name="oldIndex">Specifies the old location of the page inside the document.</param>
            <param name="newIndex">Specifies the new location of the page inside the document.</param>
            <returns>Moved page.</returns>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move a page not attached to a document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The value for newIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The value for oldIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.InvalidOperationException">The page should not have media attached that are attached to other pages already.</exception>
            <example>
            <code>
            STGDocument doc = STGDocument.Load(workItem);
            //creates 3 new pages
            doc.AppendPage(new STGPage());
            doc.AppendPage(new STGPage());
            doc.AppendPage(new STGPage());
            //Moves the last page to first position
            doc.MovePage(2, 0);
            </code>
            </example>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CopyPage(System.Int32,System.Boolean)">
            <summary>
            Copies the page on the specified index, and appends a copy as the last page of the current document.
            </summary>
            <param name="pageIndex">Specifies the index of the page to be copied.</param>
            <param name="copyMedia">Defines if the media should be copied as well. 
            The parameter is optional and the default is true.</param>
            <returns>Returns the copied page.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MovePageTo(STG.Common.Interfaces.Document.ISTGDocument,System.Int32,System.Int32)">
            <summary>
            Moves the page with specified index to a specified document on a specified index.
            </summary>
            <param name="destinationDocument">Specifies destination document.</param>
            <param name="sourceIndex">Defines page source index.</param>
            <param name="destinationIndex">Defines page destination index.</param>
            <returns>Returns the moved page.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.AppendMedia(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Adds a provided media to the current document.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.InsertChildDocument(STG.Common.Interfaces.Document.ISTGDocument,System.Int32)">
            <summary>
            Inserts a provided document on a child document on a provided position.
            </summary>
            <param name="documentToAdd">Specifies a child document to insert.</param>
            <param name="position">Defines the position where to insert a child document.</param>
            <returns>Returns the inserted child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified document is already a child of a current document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is in invalid range.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.AppendChild(STG.Common.Interfaces.Document.ISTGDocument)">
            <summary>
            Appends a provided document as a last child of the current document.
            </summary>
            <param name="documentToAdd">Specifies a child document to append.</param>
            <returns>Returns the appended child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified document is already a child of a current document.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CopyForProcess(System.String)">
            <summary>
            Copies the current document to the specified processID by creating a work item in progress for the external starter activity.
            </summary>
            <param name="processType">Process type identifier of the process where to copy the document.</param>
            <returns>Returns the work item of the copied document.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CopyChildDocument(System.Int32)">
            <summary>
            Copies of the child document from the specified index and appends its copy as the last child document.
            </summary>
            <param name="childDocumentIndex">Specifies the index of the child document to copy.</param>
            <returns>Returns the copied document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentToAdd cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position in invalid range.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CopyChildDocument(STG.Common.Interfaces.Document.ISTGDocument)">
            <summary>
            Copies of the provided child document and appends its copy as the last child document.
            </summary>
            <param name="childDocument">Specifies the child document to copy.</param>
            <returns>Returns the copied document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">Only owning child documents can be copied.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.CopyDocument">
            <summary>
            Copies of the current document and appends the copy as the last child document of owner document.
            </summary>
            <returns>Copied document</returns>
            <exception cref="T:System.InvalidOperationException">Only child documents can be copied</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MoveChildDocumentTo(STG.Common.Interfaces.Document.ISTGDocument,STG.Common.Interfaces.Document.ISTGDocument,System.Int32)">
            <summary>
            Moves the provided child document as the child of the destination document on the destination index.
            </summary>
            <param name="childToMove">Specifies the child document to be moved.</param>
            <param name="destinationDocument">Specifies the destination document where to move.</param>
            <param name="destinationIndex">Defines the index in destination document where to move.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter childToMove cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter destinationDocument cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The destination index is in invalid range.</exception>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move document in a destination in a child level.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MoveChildDocumentTo(System.Int32,STG.Common.Interfaces.Document.ISTGDocument,System.Int32)">
            <summary>
            Moves the child document from provided index as the child of the destination document on the destination index.
            </summary>
            <param name="childIndexToMove">Specifies the index of the child document to be moved.</param>
            <param name="destinationDocument">Specifies the destination document where to move.</param>
            <param name="destinationIndex">Defines the index in destination document where to move.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter destinationDocument cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">the destination index is in invalid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The child index is in invalid range.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MoveDocument(System.Int32)">
            <summary>
            Moves the current document to a destination index in the parent document child collection.
            </summary>
            <param name="destinationIndex">Specifies a destination index in a <see cref="P:STG.Common.Interfaces.Document.ISTGDocument.ChildDocuments"/> list of the <see cref="P:STG.Common.Interfaces.Document.ISTGDocument.ParentDocument"/> where to move.</param>
            <exception cref="T:System.InvalidOperationException">Documents can be moved only in parent document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination index is in invalid range or equals to source index.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.MoveChildDocument(System.Int32,System.Int32)">
            <summary>
            Moves the child document from source index to a destination index.
            </summary>
            <param name="sourceIndex">Specifies a index of a child document you want to move in a <see cref="P:STG.Common.Interfaces.Document.ISTGDocument.ChildDocuments"/> list.</param>
            <param name="destinationIndex">Specifies a destination index in a <see cref="P:STG.Common.Interfaces.Document.ISTGDocument.ChildDocuments"/> list where to move a child document.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The source index is in invalid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The destination index is in invalid range or equals to source index.</exception>
            <exception cref="T:System.InvalidOperationException">The MoveChild method can be executed only on documents that have child documents.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.DeleteChildDocument(STG.Common.Interfaces.Document.ISTGDocument)">
            <summary>
            Deletes the provided child document and all its references from the system.
            </summary>
            <param name="childDocumentToDelete">Specifies child document to delete.</param>
            <exception cref="T:System.ArgumentNullException">The value for parameter childDocumentToDelete cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The child document to delete must be a child of the current document.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.DeleteChildDocument(System.Int32)">
            <summary>
            Deletes the child document at provided index and all its references from the system.
            </summary>
            <param name="childDocumentIndex">Specifies the index of a child document to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The childDocumentIndex is in invalid range.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.DeleteDocument">
            <summary>
            Deletes the current document and all its references from the system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The root document cannot be deleted.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.DeletePage(System.Int32)">
            <summary>
            Deletes the page with the specified index in page collection.
            </summary>
            <param name="pageIndex">Specifies index of the page to delete.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.RemoveMedia(System.Guid)">
            <summary>
            Deletes the media with the specified identifier.
            </summary>
            <param name="mediaId">Specifies identifier of the media to delete.</param>
            <exception cref="T:System.ArgumentException">The current document does not contains the media with provided mediaId.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.RemoveMedia(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Deletes the media with the specified identifier.
            </summary>
            <param name="media">Specifies the media to delete.</param>
            <exception cref="T:System.ArgumentNullException">The provided media can't be null.</exception>
            <exception cref="T:System.ArgumentException">The current document does not contains the provided media.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.Save">
            <summary>
            Saves the full document structure.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocument.GetDocumentAudits">
            <summary>
            Gets audits for current document
            </summary>
            <returns>List of all audit data for the current document</returns>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.DocumentType">
            <summary>
            Gets the document type name of the current document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.Name">
            <summary>
            Represents the name of the document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.ID">
            <summary>
            Gets a document identifier.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.WorkItem">
            <summary>
            Gets a work item containing the document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.ParentDocument">
            <summary>
            Represents a parent owner of the current document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.IndexFields">
            <summary>
            Defines a read-only list of index fields.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.IsModified">
            <summary>
            Gets or sets a flag for marking a document as modified.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.Modifications">
            <summary>
            Gets a dictionary that contains as key all the unique modifications that happened to this object. The value is the ModificationSubject (object where the modification happened).
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.Tables">
            <summary>
            Gets a list of tables of a current document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.ChildDocuments">
            <summary>
            Gets a list of child documents owed by a current document object.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.Media">
             <summary>
            Gets a list of media owed by a current document.
             </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocument.Pages">
            <summary>
            Gets the pages of a current document.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGDocumentFactory">
            <summary>
            STG Document factory
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocumentFactory.Load(STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentLoadingConfiguration)">
            <summary>
            Loads the document with the specified loading configuration.
            </summary>
            <param name="workItem">Defines the work item.</param>
            <param name="docLoadingConfig">Defines the loading configuration (optional).</param>
            <returns>Returns the root document of the provided work item.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGDocumentType">
            <summary>
            STGDocument type interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocumentType.Save">
            <summary>
            Saves the document type.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocumentType.AppendFieldDefinition(STG.Common.Interfaces.Document.ISTGFieldDefinition)">
            <summary>
            Adds a provided field definition to a document type.
            </summary>
            <param name="fieldToAdd">Represents a field definition to add.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGDocumentType.AppendTableDefinition(STG.Common.Interfaces.Document.ISTGTableDefinition)">
            <summary>
            Adds a provided table definition to a document type.
            </summary>
            <param name="tableToAdd">Represents a table definition to add.</param>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocumentType.DocumentTypeID">
            <summary>
            Represents an unique identifier of the current document type.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocumentType.DocumentTypeName">
            <summary>
            Represents a name of the current document type.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocumentType.ProcessID">
            <summary>
            Gets the process ID of the current document type.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocumentType.FieldDefinitions">
            <summary>
            Gets a list of field definitions.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGDocumentType.TableDefinitions">
            <summary>
            Gets the table definitions of a current document type.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGExtendable">
            <summary>
            Interface for extendable objects
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGExtendable.GetExtensionData``1">
            <summary>
            Loads the custom extension object.
            </summary>
            <typeparam name="ExtensionType">Specifies the type of extension to load.</typeparam>
            <returns>Returns the extension object.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGExtendable.HasExtensionData``1">
            <summary>
            checks for existence of a specific extension
            </summary>
            <typeparam name="ExtensionType">Specifies the type of extension to load.</typeparam>
            <returns>Returns true if the extension object exists.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGExtendable.RemoveExtensionData``1">
            <summary>
            Removes an extension from this object
            </summary>
            <typeparam name="ExtensionType">Type of extension</typeparam>
            <returns>True if the extension was removed, false if it was not found</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGExtendable.AddExtensionData``1(``0)">
            <summary>
            Stores the provided extension object.
            </summary>
            <typeparam name="ExtensionType">Represents the type of extension.</typeparam>
            <param name="extension">Specifies the extension object.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGExtensionBase">
            <summary>
            STGExtension base interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGExtensionBase.UseFileStreamStorage">
            <summary>
            Use FileStream for extension storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGField">
            <summary>
            STGField interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.FieldName">
            <summary>
            Gets the name of this field.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.FieldType">
            <summary>
            Gets the data type of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.Type">
            <summary>
            Gets the data type of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.Location">
            <summary>
            Gets the field location on a document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.IsIndexed">
            <summary>
            Gets the IsIndexed Flag for this index field.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.Document">
            <summary>
            Represents a owner document of the index field.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.Confidence">
            <summary>
            Gets or set the field confidence.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.FieldValue">
            <summary>
            Gets a value object of the current field
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGField.CapturedValue">
            <summary>
             Gets or sets the value of the field captured from a document.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGMediaBuilder">
            <summary>
            STG Media builder
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.CreateMedia(System.String,System.String,STG.Common.DTO.DtoMediaType)">
            <summary>
            Builder method to create a new STGMedia. Call Finish() when you are done.
            </summary>
            <param name="name">Name of the STGMedia</param>
            <param name="extension">The extension of the media (only used if a filename is provided)</param>
            <param name="mediaType">The type of the media.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.WithStream(System.IO.Stream)">
            <summary>
            Set the stream to be used for this media.
            </summary>
            <param name="stream">The stream handle</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.UseCopyOfStream">
            <summary>
            This will copy the provided stream to memory.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.ReleaseStreamOwnership">
            <summary>
            Let the STGMediaFactory take over the ownership of the stream.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.WithFile(System.String)">
            <summary>
            Use a file to create the STGMedia.
            </summary>
            <param name="filename">The filename to use for the media.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.DeleteFileAfterUse">
            <summary>
            If this is called, the file will be deleted after it has been read.
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaBuilder.Finish">
            <summary>
            Create the STGMedia with the given configuration
            </summary>
            <returns></returns>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGMediaTypeService">
            <summary>
            Media type factory
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaTypeService.GetMediaType(System.String)">
            <summary>
            Gets the media type for provided name
            </summary>
            <param name="mediaTypeName">Name of the media type to get</param>
            <returns>Media type with provided name or null if none found</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaTypeService.LoadAvailableMediaTypes">
            <summary>
            Loads available media types
            </summary>
            <returns></returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMediaTypeService.LoadSystemMediaTypes">
            <summary>
            Loads system media types
            </summary>
            <returns></returns>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGRectangle">
            <summary>
            STG Rectangle interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRectangle.Left">
            <summary>
            Gets or sets the left position of this rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRectangle.Top">
            <summary>
            Gets or sets the top position of this rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRectangle.Width">
            <summary>
            Gets or sets width of the rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRectangle.Height">
            <summary>
            Gets or sets the hight of the rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation">
            <summary>
            Defines an Image based location of the page within the provided media. 
            e.g. Which frame in a multi-tif or PDF media provides the image for this page
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGPageLocation">
            <summary>
            STGPage location interface
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGLocation">
            <summary>
            STGLocation interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGLocation.MediaId">
            <summary>
            reference to the media identifier attached to the current location
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPageLocation.Media">
            <summary>
            Gets the media from the location
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation.MediaFrameIndex">
             <summary>
            Gets or sets the frame index of the page representation within the provided media.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation.XRes">
            <summary>
            X resolution of the page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation.YRes">
            <summary>
            Y resolution of the page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation.Width">
            <summary>
            Width of the page in pixels with the corresponding resolution.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedPageLocation.Height">
            <summary>
            Height of the page in pixels with the corresponding resolution.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGImageBasedLocation">
            <summary>
            Image based location interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGImageBasedLocation.AddNewRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle object with provided coordinates and adds it to location's coordinates.
            </summary>
            <param name="left">Left (x) coordinate of the rectangle.</param>
            <param name="top">Top (y) coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <returns>New rectangle</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGImageBasedLocation.DeleteRectangle(STG.Common.Interfaces.Document.ISTGRectangle)">
            <summary>
            Deletes a rectangle from the location's coordinates.
            </summary>
            <param name="rectangle">Rectangle to delete</param>
            <returns>True if it was deleted, false if not present in the collection</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedLocation.FirstCoordinate">
            <summary>
            Returns a first rectangle from the array
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedLocation.PageIndex">
             <summary>
            Gets or sets the 0-based page number of this location object.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedLocation.XRes">
            <summary>
            X resolution of the zone.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedLocation.YRes">
            <summary>
            Y resolution of the zone.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGImageBasedLocation.AllCoordinates">
            <summary>
            Defines a read-only list of all coordinates.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGMedia">
            <summary>
            STGMedia interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGMedia.Unload">
            <summary>
            Unload the media if it was already loaded.
            Clears the memory used by the stream and forces further calls to the media stream to go again to the server.
            </summary>
            <returns>True if the media was unloaded, or false if it was not loaded in the first place.</returns>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.Name">
            <summary>
            Defines the name of the media.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.OriginalFileName">
            <summary>
            Defines the original file name of the media.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.ID">
             <summary>
            Gets the unique identifier of this media object.
             </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.Extension">
            <summary>
            Gets the file extension of the media.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.MediaTypeID">
            <summary>
            Gets the unique identifier of the media type.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGMedia.MediaStream">
            <summary>
            Represents a stream containing the current media file.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGPage">
            <summary>
            STGPage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.Move(System.Int32)">
            <summary>
            Moves the current page to the specified location.
            </summary>
            <param name="newIndex">Specifies the new location of the page inside the document.</param>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move a page not attached to a document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The newIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.InvalidOperationException">The page should not have media attached that are attached to other pages already.</exception> 
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.Copy(System.Boolean)">
            <summary>
            Copies the current page and assigns a copy as the last page in the owner document.
            </summary>
            <param name="copyMedia">Defines if the media should be copied as well. 
            The parameter is optional and the default is true.</param>
            <returns>Returns the copied page.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.MoveTo(STG.Common.Interfaces.Document.ISTGDocument,System.Int32)">
            <summary>
            Moves the current page to destination document on the provided index.
            </summary>
            <param name="destinationDocument">Defines the destination document.</param>
            <param name="destinationPageIndex">Defines the destination document page index.</param>
            <returns>Returns the moved page.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.Delete(System.Boolean)">
            <summary>
            Deletes the current page and if specified the media attached to a page.
            </summary>
            <param name="deleteAttachedMedia">Specifies if the media attached to a page is to be deleted as well. 
            The parameter is optional and the default is false</param>
            <exception cref="T:System.InvalidOperationException">It is not allowed to delete a page not attached to a document.</exception> 
            <exception cref="T:System.InvalidOperationException">Deleting attached media shared between multiple pages is  not allowed.</exception>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.AppendMedia(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Adds a provided media to the current page.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.PromoteToDefaultMedia(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Makes the provided media as default media of this page
            </summary>
            <param name="newDefaultMedia">New default media of the current page</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.PromoteToDefaultMedia(System.Guid)">
            <summary>
            Makes the media with provided identifier as default media of this page
            </summary>
            <param name="newDefaultMediaIdentifier">The identifier of the new default media of the current page</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.PromoteToDefaultMedia(System.String)">
            <summary>
            Makes the media with provided name as the default media of this page.
            </summary>
            <param name="newDefaultMediaName">The name of the new default media of the current page</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.AppendMedia(STG.Common.Interfaces.Document.ISTGMedia,STG.Common.Interfaces.Document.ISTGPageLocation,System.Boolean)">
            <summary>
            Adds a provided media to the current page and sets it as the default page media.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
            <param name="pageLocation">The location of the current page on the assigned media</param>
            <param name="setAsDefault">If set to true, it will mark the current media as the default media of this page</param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.RemoveMedia(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Removes the provided media from current page
            </summary>
            <param name="mediaToRemove"></param>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.GetMediaLocation(STG.Common.Interfaces.Document.ISTGMedia)">
            <summary>
            Retrieves the page location for the provided media.
            </summary>
            <param name="media">Media to get the location for.</param>
            <returns>Page location for the provided media.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.GetMediaLocation(System.Guid)">
            <summary>
            Retrieves the page location for the provided media ID.
            </summary>
            <param name="mediaId">ID of the media to get the location for.</param>
            <returns>Page location for the media with the provided ID.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.GetMediaLocationByName(System.String)">
            <summary>
            Retrieves the page location for the media with the provided name.
            </summary>
            <param name="mediaName">Case insensitive name of the media to get the location for.</param>
            <returns>Page location for the media with the provided name or null if the media with the provided name does not exist.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGPage.AssignLocationToMedia(STG.Common.Interfaces.Document.ISTGPageLocation)">
            <summary>
            Assigns the provided location to the equivalent media on this page
            </summary>
            <param name="location">Location to assign</param>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.OwnerDocument">
            <summary>
            Represents a owner document of this page.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.PageNumber">
            <summary>
            Represents the page number.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.PageIndex">
            <summary>
            Represents the zero-based index of the current page in the owner document.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.IsVisibile">
            <summary>
            helper flag to enable hiding/skipping the pages in activities.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.PageFlags">
            <summary>
            Represents various flags on the page (e.g. Is empty page, contains image...)
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.IsFrontPage">
            <summary>
            Helper flag to enable separation between front and back page
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.ID">
            <summary>
            Represents an unique identifier of the current page.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.DefaultMedia">
            <summary>
            The media that is marked as the default media for the current page
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGPage.Media">
            <summary>
            Defines a list of all media assigned to a current page.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGRow">
            <summary>
            STGRow interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRow.ID">
            <summary>
            Represents an unique identifier of the current row.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRow.Cells">
            <summary>
            Gets all cells of this row.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGRow.Location">
            <summary>
            Gets the row location on the document.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTable">
            <summary>
            STGTable interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGTable.InsertNewRow(System.Int32)">
            <summary>
            Creates a new row in the table based on a table definition.
            </summary>
            <param name="rowIndex">Index to insert the new row at (or default -1) to append at the end</param>
            <returns>Created row.</returns>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGTable.DeleteRow(STG.Common.Interfaces.Document.ISTGRow)">
            <summary>
            Deletes a row from the table.
            </summary>
            <param name="row">Row to delete</param>
            <returns>True if it was deleted, false if not present in the collection</returns>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTable.TableName">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTable.Rows">
            <summary>
            Gets all rows of the table.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTable.IsValid">
             <summary>
            Gets or sets a flag that allows activities to mark the field as valid or invalid.
             </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTable.ColumnDefinition">
            <summary>
            Represents a list of all column definitions of the current table.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTable.Document">
            <summary>
            Specifies the owner document.
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGValue">
            <summary>
            STGValue item
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGValue.GetConvertedValue``1">
            <summary>
            Loads the value as a provided type.
            If the provided type does not match the data type provided in a field/column definition the method fails.
            </summary>
            <typeparam name="T">Defines the data type to return.</typeparam>
            <returns>Returns the value as specified data type.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0)">
            <summary>
            Sets the value of the field as specified data type.
            If type does not match the data type of the field the method fails.
            </summary>
            <typeparam name="T">Defines a field data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0,System.IFormatProvider)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formatter">Represents a formatter to apply on a text representation upon setting the value</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0,System.String)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formattedValue">Represents a formated textual representation for the provided typed value.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGValue.Text">
            <summary>
            Gets or sets the value as string.
            Setting the text property will drop the converted value.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGValue.IsConverted">
            <summary>
            Flag defining if the contains formated value
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTextBasedLocation">
            <summary>
            Represents a text-based location object.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTextBasedLocation.Length">
            <summary>
            Gets or sets the location length.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTextBasedLocation.Offset">
            <summary>
            Gets the location offset where object starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTextBasedLocation.Anchor">
            <summary>
            Gets the anchor on the document where the location starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTextBasedPageLocation">
            <summary>
            Text based page location interface
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTimeBasedLocation">
            <summary>
            Defines the time-based location object.
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTimeBasedLocation.StartTime">
            <summary>
            Gets or sets the timespan when the location starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Document.ISTGTimeBasedLocation.Duration">
            <summary>
            Gets the location duration.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Document.ISTGTimeBasedPageLocation">
            <summary>
            Time based page location 
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.Modification.IModificationListener">
            <summary>
            defines the modification listener for modification tracking
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Document.Modification.IModificationListener.NotifyModification(STG.Common.Interfaces.Document.Modification.IModificationSubject,System.String,System.Object)">
            <summary>
            notifies modification on object
            </summary>
            <param name="subject"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="T:STG.Common.Interfaces.Document.Modification.IModifieable">
            <summary>
            defines the interface for modification tracking
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.Modification.IModifieable.Modifications">
            <summary>
            collection of modifications
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Document.Modification.IModifieable.IsModified">
            <summary>
            flag defining if the object is modified
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Document.Modification.ModificationType">
            <summary>
            modification type enum
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.PropertyCreated">
            <summary>
            The property value is set for the first time
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.PropertyChanged">
            <summary>
            The property changed value
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.PropertyRemoved">
            <summary>
            The property value was removed
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.ItemAdded">
            <summary>
            Item was added to collection
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.ItemDeleted">
            <summary>
            Item was deleted from collection
            </summary>
        </member>
        <member name="F:STG.Common.Interfaces.Document.Modification.ModificationType.ItemMoved">
            <summary>
            Item was moved inside the collection
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.ICache">
            <summary>
            defines a basic cache interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.ICache.Name">
            <summary>
            name of the cache
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IClientStorage">
            <summary>
            Client organization storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IClientStorage.LoadAllClientOrganizations">
            <summary>
            loads all client organizations
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IClientStorage.LoadClientOrganization(System.Int32)">
            <summary>
            Loads client organization
            </summary>
            <param name="clientOrganizationID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IClientStorage.CreateClientOrganization(STG.Common.DTO.DtoClientOrganization)">
            <summary>
            creates the new client organizations based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IClientStorage.UpdateClientOrganization(STG.Common.DTO.DtoClientOrganization)">
            <summary>
            updates the client organizations based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IClientStorage.DeleteClientOrganization(System.Int32)">
            <summary>
            Deletes the client organizations with specified ID
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IProcessStorage">
            <summary>
            Process storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.LoadProcessesForProject(System.Int32)">
            <summary>
            loads all processes for provided project identifier
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.LoadProcess(System.Int32)">
            <summary>
            loads process for provided identifier
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.CreateProcess(STG.Common.DTO.DtoProcess)">
            <summary>
            creates the new process based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.DeleteProcess(System.Int32)">
            <summary>
            Deletes the process with specified ID
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.UpdateProcess(STG.Common.DTO.DtoProcess)">
            <summary>
            updates the process based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.LockProcess(System.Int32,System.String)">
            <summary>
            locks the process with the provided ID by provided user
            </summary>
            <param name="processID">ID of the process to unlock</param>
            <param name="user">user who locked the process</param>
            <returns>true if locked successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProcessStorage.UnlockProcess(System.Int32)">
            <summary>
            unlocks the process with the provided ID
            </summary>
            <param name="processID">ID of the process to unlock</param>
            <returns>true if locked successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Designtime.IProjectStorage">
            <summary>
            Project storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProjectStorage.LoadProjectsForClient(System.Int32)">
            <summary>
            loads all projects for provided client organization identifier
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProjectStorage.LoadProject(System.Int32)">
            <summary>
            loads projects for provided identifier
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProjectStorage.DeleteProject(System.Int32)">
            <summary>
            Deletes the project with specified ID
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProjectStorage.CreateProject(STG.Common.DTO.DtoProject)">
            <summary>
            creates the new project based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Designtime.IProjectStorage.UpdateProject(STG.Common.DTO.DtoProject)">
            <summary>
            updates the project based on the provided DTO
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.IDynamicDocumentMediaStorage">
            <summary>
            Dynamically loaded document media storage interface
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IDocumentMediaStorage">
            <summary>
            Document media storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.CopyMedia(System.Guid,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Copies the medias with provided identifiers, and assigns them to the document with the provided identifier
            </summary>
            <param name="destinationDocument">Specifies the ID of the destination document</param>
            <param name="mediaIdentifiersToCopy">Defines the media Identifiers to be copied</param>        
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.DownloadDocumentMedia(System.Guid,STG.Common.DTO.DtoMediaDataStream@,System.IO.Stream@)">
            <summary>
            Downloads the document media for the provided media identifier
            </summary>
            <param name="mediaID"></param>        
            <param name="mediaDTO"></param>
            <param name="mediaStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.DownloadDocumentMediaStream(System.Guid)">
            <summary>
            Downloads the document media as stream
            </summary>
            <param name="documentMediaId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.DownloadDocumentMediaStream(System.Guid,System.IO.Stream@)">
            <summary>
            Downloads the document media as stream
            </summary>
            <param name="documentMediaId"></param>        
            <param name="mediaStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.PersistDocumentMedia(STG.Common.DTO.DtoMediaDataStream,System.IO.Stream)">
            <summary>
            persists the  provided document media (inserts if new or updates if existing)
            </summary>
            <param name="mediaToSave"></param>
            <param name="mediaStream"></param>
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.PersistDocumentMedia(STG.Common.DTO.DtoMediaDataStream,System.IO.Stream,System.Guid)">
            <summary>
            persists the  provided document media (inserts if new or updates if existing)
            </summary>
            <param name="mediaToSave"></param>
            <param name="mediaStream"></param>
            <param name="transactionID"></param>
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.RemoveDocumentMedia(STG.Common.DTO.DtoMediaDataStream,System.Guid)">
            <summary>
            Removes the provided document media
            </summary>
            <param name="mediaToSave"></param>
            <param name="transactionID"></param>
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.GetMediaSize(System.Guid)">
            <summary>
            Reads the media size for the provided identifier.
            </summary>
            <param name="mediaId"></param>
            <returns>size of the stored media, -1 if unknown.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentMediaStorage.MediaCount">
            <summary>
            Gets number of medias in the storage
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.IDynamicDocumentMediaStorage.Initialize(STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Initializes dynamically loaded storage
            </summary>
            <param name="storageInfo"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.IDynamicDocumentStorage">
            <summary>
            
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IDocumentStorage">
            <summary>
            Interface for document storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.DownloadDocument(System.Guid,STG.Common.DTO.DtoDocumentData@,System.IO.Stream@)">
            <summary>
            downloads the document for the provided document identifier
            </summary>
            <param name="documentID"></param>
            <param name="documentDTO"></param>
            <param name="documentStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.DownloadDocumentStream(System.Guid)">
            <summary>
            reads a DB stream with serialized document 
            </summary>
            <param name="documentId"></param>
            <returns></returns>    
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.DownloadDocumentStream(System.Guid,System.IO.Stream@)">
            <summary>
            downloads the serialized document as stream
            </summary>
            <param name="documentId"></param>
            <param name="documentStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.LoadDocumentStreams(System.Guid,STG.Common.DTO.DtoDocumentLoadingConfiguration,System.Collections.Generic.IEnumerable{STG.Common.DTO.DocumentStreamData}@)">
            <summary>
            Loads all specified streams for the specified document
            </summary>
            <param name="rootDocument"></param>
            <param name="docLoadingConfig"></param>        
            <param name="documentStreams"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.PersistDocument(STG.Common.DTO.DtoDocumentData,System.IO.Stream)">
            <summary>
            persists the provided document (inserts if new or updates if existing)
            </summary>
            <param name="documentToSave"></param>
            <param name="documentStream"></param>        
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.PersistDocument(STG.Common.DTO.DtoDocumentData,System.IO.Stream,System.Guid)">
            <summary>
            persists the provided document (inserts if new or updates if existing)
            </summary>
            <param name="documentToSave"></param>
            <param name="documentStream"></param>
            <param name="transactionID"></param>        
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.RemoveDocument(STG.Common.DTO.DtoDocumentData,System.Guid)">
            <summary>
            Removes the provided document
            </summary>
            <param name="documentToSave"></param>
            <param name="transactionID"></param>        
            <returns>true if deletion was successful</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.CopyDocumentIntoProcess(System.String,System.String,System.Guid,STG.Common.Interfaces.DocumentCopyDelegate)">
            <summary>
            Copies the document with provided ID into a process with a specified type
            </summary>
            <param name="documentId"></param>
            <param name="processType"></param>
            <param name="transactionID"></param>
            <param name="manipulationDelegate"></param>        
            <returns>work item of the copied document</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.CopyDocument(System.Guid,System.IO.Stream@,System.Collections.Generic.IList{STG.Common.DTO.DtoMediaType},STG.Common.Interfaces.DocumentCopyDelegate)">
            <summary>
            Copies the document with provided identifier (and all its contents) in database 
            </summary>
            <param name="sourceDocumentID">ID of the document to be copied</param>        
            <param name="copiedDocumentStream">stream of the copied document object</param>
            <param name="availableMediaTypes"></param>
            <param name="manipulationDelegate"></param>
            <returns>IDisposable</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.SaveDocumentAudits(System.Collections.Generic.IList{STG.Common.DTO.DtoDocumentAudit})">
            <summary>
            Saves document modification's audit data
            </summary>
            <param name="documentAudits"></param>
            <returns>true if save was successful</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.GetDocumentAudits(System.Guid)">
            <summary>
            Get audits for the specified document
            </summary>
            <param name="documentID">Document ID for which to get the audits</param>
            <returns>List of document audits</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.LoadDocumentTree(System.Guid)">
            <summary>
            Loads the document tree structure with document indexes
            </summary>
            <param name="documentID">root document ID</param>
            <returns>DtoDocumentTreeItem with the tree structure</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.LoadFlatDocumentTree(System.Guid)">
            <summary>
            Loads the document tree data as a flat list
            </summary>
            <param name="workItemIdentifier">work item to load the structure for</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.DeleteDocumentsForWorkItems(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Removes documents related to work items
            </summary>
            <param name="workItemIds">Work item identifiers</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.CountWorkItemDocument(System.Guid)">
            <summary>
            Get the number of documents for the provided work item
            </summary>
            <param name="workItemIdentifier"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.CheckDocumentExists(System.Guid)">
            <summary>
            Checks if the document exists in the database
            </summary>
            <param name="documentID">The ID of the document to check</param>
            <returns>True if the document exists</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentStorage.DocumentCount">
            <summary>
            Gets number of documents in the storage
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IDocumentStorage.WorkItemStorage">
            <summary>
            Work item storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IDocumentStorage.DocumentIndexStorage">
            <summary>
            Dcoument index storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IDocumentStorage.ActivitySTGStorage">
            <summary>
            Activity storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IDocumentStorage.MediaTypeStorage">
            <summary>
            Media type storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IDocumentStorage.DocumentStorageIdentifier">
            <summary>
            Document storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.IDynamicDocumentStorage.Initialize(STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Initializes dynamically loaded storage
            </summary>
            <param name="storageInfo"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.IIOCContainerItem">
            <summary>
            Base interface for IOC Container item
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.ISTGLoginProvider">
            <summary>
            ILogin provider
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGLoginProvider.Login(System.String,System.String)">
            <summary>
            Login
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGLoginProvider.GetUserGroups(System.String,System.String)">
            <summary>
            Returns user groups
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:STG.Common.Interfaces.IOCContainer">
            <summary>
            Simple IOC container
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.IOCContainer.IsTypeRegistered``1">
            <summary>
            Checks if the type is registered with IOC container
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.IOCContainer.RegisterItem``1(``0)">
            <summary>
            Registers item in the IOC container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.IOCContainer.GetItem``1">
            <summary>
            Gets registered item from IOC container
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.IOCContainer.Instance">
            <summary>
            IOC Container instance
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.ISTGSystemStorage">
            <summary>
            System database storage
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGSystemStorage.EventLogStorage">
            <summary>
            Event log storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGSystemStorage.SystemResourcesStorage">
            <summary>
            Registered system resources storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.ITransactionHelper">
            <summary>
            Transaction helper interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.ITransactionHelper.CommitTransaction(System.Guid)">
            <summary>
            commits all the actions executed under provided transaction ID
            </summary>
            <param name="transactionID">transaction identifier</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.ITransactionHelper.RollBackTransaction(System.Guid)">
            <summary>
            discard all changes executed under provided transaction ID
            </summary>
            <param name="transactionID"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Launcher.IActivityLauncher">
            <summary>
            Activity launcher interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Launcher.IActivityLauncher.StartedHosts">
            <summary>
            Started hosts
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Launcher.IActivityLauncher.ServiceStartedAt">
            <summary>
            Service started
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Launcher.IHostLauncher">
            <summary>
            Host launcher interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Launcher.IHostLauncher.Status">
            <summary>
            Gets resource status
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Launcher.IHostLauncher.Ping">
            <summary>
            Gets resource ping
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Launcher.IHostLauncher.HostName">
            <summary>
            Host name
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IActivityStorage">
            <summary>
            Activity storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadRegisteredActivities">
            <summary>
            Loads all the activities registered with the system
            </summary>
            <returns>A list of all registered activities</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityInstance(System.Int32)">
            <summary>
            loads the activity instance info based on provided activity instance ID
            </summary>
            <param name="activityInstanceid"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityInstances">
            <summary>
            loads all the registered activity instances
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadProcessActivities(System.Int32)">
            <summary>
            loads all activity instances for the process with the provided process ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityConfiguration(System.Int32)">
            <summary>
            loads the activity instance configuration for the activity instance ID
            </summary>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.IsNewerVariablesVersionAvailable(System.Int32,System.Int32)">
            <summary>
            Method checks for newer version of activity variables
            </summary>
            <param name="activityInstanceId">Activity identifier</param>
            <param name="version">Variables version</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadProcessConfiguration(System.Int32)">
            <summary>
            loads the process configuration for the provided activity instance Identifier
            </summary>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityPackage(System.Int32)">
            <summary>
            Load activitypackage for specified activity type
            </summary>
            <param name="activityTypeId">Specified activity type id for the package to load</param>
            <returns>Stream with the binary data of the activity package</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityIcon(System.Int32)">
            <summary>
            Loads the activity icon 
            </summary>
            <param name="activityID">Activity Type ID</param>
            <returns>Activity Icon stream</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityInstanceStatistics(System.Int32)">
            <summary>
            Loads the statistics for the provided activity instance ID
            </summary>
            <param name="activityInstanceID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.FindActivityType(System.String,System.String)">
            <summary>
            Loads all registered activities with specified name and specified version
            </summary>
            <param name="activityName"></param>
            <param name="activityVersion"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityInstanceSLA(System.Int32)">
            <summary>
            Loads the SLA for the provided activity instance ID
            </summary>
            <param name="activityInstanceID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.DeleteActivityType(System.Int32)">
            <summary>
            Deletes the activity type with specified ID
            </summary>
            <param name="activityTypeID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadProcessSystemProcesStarter(System.Guid)">
            <summary>
            Loads activity instance info for system process starter for process type
            </summary>
            <param name="processType">Process type</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.LoadActivityType(System.Int32)">
            <summary>
            Loads the activity type by the provided ID
            </summary>
            <param name="activityTypeID">ID of the activity type to load</param>
            <returns>Activity type</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.PauseActivityInstance(System.Int32)">
            <summary>
            Marks the activity instance with the provided ID as paused
            </summary>
            <param name="activityInstanceId">activity instance identifier</param>
            <returns>true if paused successfully</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.ResumeActivityInstance(System.Int32)">
            <summary>
            Removes the paused flag from the activity instance with the provided ID
            </summary>
            <param name="activityInstanceId">activity instance identifier</param>
            <returns>true if resumed successfully</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IActivityStorage.GetActivityInstancesForMappedDesinerData(STG.Common.DTO.DtoProcessInstanceMap)">
            <summary>
            for the provided design-time process and list of design-time instance Guids returns a list of matching runtime activity instances in equivalent process 
            </summary>
            <param name="map"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IDocumentIndexStorage">
            <summary>
            Document index storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.IndexedFields(System.Int32,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Provides the list of indexed fields
            </summary>
            <param name="activityTypeID">Activity type ID to restrict the results on; -1 to return all</param>
            <param name="documentIdRestriction">omit results on the provided document list</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.SearchIndex(System.Int32,System.Collections.Generic.IList{STG.Common.DTO.DtoIndexFilter},System.Collections.Generic.IList{System.Guid},STG.Common.DTO.Operator)">
            <summary>
            Searches the filter data based on provided conditions
            </summary>
            <param name="activityTypeID">Activity type ID to restrict the results on; -1 to return all</param>
            <param name="filter">filter to execute</param>
            <param name="documentIdRestriction">omit results on the provided document list</param>
            <param name="oper">Operator to use for search</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.LoadIndexForDocument(System.Guid)">
            <summary>
            loads the stored index 
            </summary>
            <param name="documentID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.LoadIndexForDocuments(System.Collections.Generic.IList{System.Guid})">
            <summary>
            loads the stored index 
            </summary>
            <param name="documentIDs"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.SaveDocumentIndexes(STG.Common.DTO.DtoDocumentData,System.Guid)">
            <summary>
            Method saves document indexes
            </summary>
            <param name="documentToSave">Document to save</param>
            <param name="transactionID">Transaction identifier</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentIndexStorage.RemoveDocumentIndexes(System.Collections.Generic.IList{System.Guid},System.Guid)">
            <summary>
            Method removes document indexes
            </summary>
            <param name="documentIDs">Document identifiers</param>
            <param name="transactionID">Transaction identifier</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IDocumentTypeStorage">
            <summary>
            Interface for document type storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentTypeStorage.DownloadDocumentType(System.String,System.Int32,STG.Common.DTO.DtoDocumentTypeData@,System.IO.Stream@)">
            <summary>
            downloads the document type for the provided document type name
            </summary>
            <param name="documentTypeName"></param>
            <param name="processID"></param>
            <param name="docTypeDTO"></param>
            <param name="docTypeStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentTypeStorage.PersistDocumentType(STG.Common.DTO.DtoDocumentTypeData,System.IO.Stream)">
            <summary>
            persists the provided document type (inserts if new or updates if existing)
            </summary>
            <param name="documentTypeToSave"></param>
            <param name="documentTypeStream"></param>
            <returns>true if persisted successfully</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentTypeStorage.DownloadDocumentTypeStream(System.Guid)">
            <summary>
            downloads the serialized document type as stream
            </summary>
            <param name="documentTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IDocumentTypeStorage.DownloadDocumentTypeStream(System.Guid,System.IO.Stream@)">
             <summary>
             downloads the serialized document type as stream
             </summary>
             <param name="documentTypeId"></param>
            <param name="documentTypeStream"></param> 
             <returns></returns>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IHeartbeatStorage">
            <summary>
            Defines the interface for storage that handles platform heartbeat
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IHeartbeatStorage.InsertInitialHeartbeat(System.Int32,System.Int32)">
            <summary>
            Inserts an initial heartbeat when the platform locks the work item for the first time
            </summary>
            <param name="workItemID"></param>
            <param name="activityInstanceID"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IHeartbeatStorage.ReportHeartbeat(System.Int32,System.Int32,System.String)">
            <summary>
            persists the heartbeat information for the provided work item and activity instance 
            </summary>
            <param name="workItemID"></param>
            <param name="activityInstanceID"></param>
            <param name="activityMessage"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IHeartbeatStorage.DeleteHeartbeat(System.Int32)">
            <summary>
            Removes the heartbeat for the provided work item ID
            </summary>
            <param name="workItemID"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IHeartbeatStorage.GetExpiredWorkItemIDs(System.DateTime,System.Int32)">
            <summary>
            returns a list with up to maxItems of work item ID-s that have last refresh time equal or older than the provided one
            </summary>
            <param name="lastRefreshTime"></param>
            <param name="maxItems"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IMediaTypeStorage">
            <summary>
            Media types storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IMediaTypeStorage.LoadAllRegisteredMediaTypes">
            <summary>
            Loads all media types registered with the system;
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IPermissionStorage">
            <summary>
            Permission storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.CheckUsers">
            <summary>
            Check for users in the database.
            </summary>
            <returns>true if another user than '**EVERYONE**' is defined in the database.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.IsTokenAuthorizedForRole(System.String,System.String)">
            <summary>
            performs a check if the provided token is authorized for the provided role
            </summary>
            <param name="token"></param>
            <param name="role"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.IsTokenAuthorizedForRole(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            performs a check if the provided token is authorized for the provided role
            </summary>
            <param name="principal"></param>
            <param name="role"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.LoadPermissionData(System.String)">
            <summary>
            loads permission data for the access token
            </summary>
            <param name="token"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.LoadPermissionData(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Method loads permission data for claims principal
            </summary>
            <param name="principal">Claims principal</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IPermissionStorage.LoadApplicationPermissions(System.Security.Claims.ClaimsPrincipal,System.Guid)">
            <summary>
            Loads user application permissions
            </summary>
            <param name="principal"></param>
            <param name="applicationId"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IProcessStorage">
            <summary>
            Process storage interface
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadProcessInfo(System.Guid)">
            <summary>
            loads the process info for the provided process type
            </summary>
            <param name="processType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadProcessInfo(System.Int32)">
            <summary>
            loads the process info for the provided process ID
            </summary>
            <param name="processId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadProcesses">
            <summary>
            load all processes
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadProcessesForType(System.Int32)">
            <summary>
            load newest processes where activity type with the provided ID is hosted
            </summary>
            <param name="activityTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadAllProcessesForType(System.Int32)">
            <summary>
            loads all processes for the activity type
            </summary>
            <param name="activityTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadProcessForActivityInstance(System.Int32)">
            <summary>
            loads the process info for the specified activity instance ID
            </summary>
            <param name="activityInstanceID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.CleanOldProcesses">
            <summary>
            clears all the old process definitions that do not have work items attached
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetAvailableDocumentTypeNames(System.Int32)">
            <summary>
            Loads the names of the document types assigned to a provided process
            </summary>
            <param name="processID">ID of the process</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadDiagramForProcess(System.Int32)">
            <summary>
            loads the published diagram data for the provided process ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetProcessStatistics(System.Int32)">
            <summary>
            Load process Statistics for the provided process ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.LoadAllProcesses">
            <summary>
            Loads all processes
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetAllStatistics">
            <summary>
            Gets all statistics for the current runtime
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetProcessSLA(System.Int32)">
            <summary>
            Load process SLA for the provided process ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetAllSLA">
            <summary>
            Gets all SLA for the current runtime
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.DeleteProcess(System.Int32)">
            <summary>
            Deletes the process with provided ID
            </summary>
            <param name="processID">ID of the process to delete</param>
            <returns>True if deleted</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.CanDeleteProcessCheck(System.Int32)">
            <summary>
            Performs a check if the process with provided ID can be deleted
            </summary>
            <param name="processID">ID of the process to delete</param>
            <returns>Enum as check result</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.PublishProcess(System.IO.Stream,STG.Common.Interfaces.DocumentTypeConversionDelegate)">
            <summary>
            Publishes the process to the runtime database
            </summary>
            <param name="processPackage">Process package</param>
            <param name="docTypeDelegate"></param>
            <returns>Published process</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.UpdateProcessInfo(STG.Common.DTO.DtoProcessInfo)">
            <summary>
            Updates process version
            </summary>
            <param name="process">Process to update</param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.SynchroniseAccessRights(System.Int32,System.Collections.Generic.IList{STG.Common.DTO.DtoEnvironmentProcessRights})">
            <summary>
            synchronizes the design-time configured access rights with the runtime data
            </summary>
            <param name="processID"></param>
            <param name="accessRights"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.FindProcessByNameAndVersion(System.String,System.Int32,System.Int32)">
            <summary>
            Searches for the process with the provided name and version and returns a matching object or null
            </summary>
            <param name="processName"></param>
            <param name="versionMajor"></param>
            <param name="versionMinor"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.GetAccessRightsForProcess(System.Int32)">
            <summary>
            Returns all environment claims that have access to the process with provided ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <remarks>The list contains also claims that have access to certain activities in the process only</remarks>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IProcessStorage.UpgradeVariablesFromDesigner(STG.Common.DTO.DtoUpgradedProcessVariables)">
            <summary>
            upgrades the variables for deployed activity instances based on the data provided from runtime
            </summary>
            <param name="designerData"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IWorkItemAuditStorage">
            <summary>
            Work item storagae
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemAuditStorage.GetWorkItemAudits(System.Int32)">
            <summary>
            Get audit data for specified work item
            </summary>
            <param name="workItemID">ID of the work item</param>
            <returns>List of audit data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemAuditStorage.SaveWorkItemAuditAsync(STG.Common.DTO.DtoWorkItemAudit)">
            <summary>
            persists the provided audit data
            </summary>
            <param name="workItemAudit"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemAuditStorage.SaveWorkItemAudit(STG.Common.DTO.DtoWorkItemAudit)">
            <summary>
            persists the provided audit data
            </summary>
            <param name="workItemAudit"></param>
            <returns>Inserted work item audit</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Runtime.IWorkItemStorage">
            <summary>
            Work item storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.InsertNewWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Inserts the new work item in storage
            </summary>
            <param name="newWorkItem"></param>
            <returns>Inserted work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.InsertNewWorkItem(STG.Common.DTO.DtoWorkItemData,System.Nullable{System.Guid})">
            <summary>
            inserts the new work item in database transaction
            </summary>
            <param name="newWorkItem"></param>
            <param name="transactionId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.DeleteWorkItem(System.Int32)">
            <summary>
            deletes the work item with the specified identifier
            </summary>
            <param name="workItemID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.DeleteWorkItems(System.Collections.Generic.IList{System.Int32})">
            <summary>
            deletes the work items with ID-s in the provided list
            </summary>
            <param name="workItemIDs">List of work items to be deleted</param>
            <returns>list of work item IDS that where not deleted</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LockFirstAvailableWorkItem(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            locks the first available work item for the provided activity instance list for specified (optional) role instances
            </summary>
            <param name="activityInstances"></param>
            <param name="roleInstances"></param>
            <returns>Locked work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LockFirstAvailableWorkItem(System.Collections.Generic.IList{STG.Common.DTO.DtoPermissionData})">
            <summary>
            Locks the first available work item that matches the provided permission list
            </summary>
            <param name="permissions"></param>
            <returns>Locked work item</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LockWorkItem(System.Int32)">
            <summary>
            Locks the work item for the provided work item ID
            </summary>
            <param name="workItemID"></param>
            <returns>Locked work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ReserveWorkItem(System.Int32)">
            <summary>
            Puts the work item in reserved state for the provided work item ID
            </summary>
            <param name="workItemID"></param>
            <returns>Reserved work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadAvailableWorkItems(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus)">
            <summary>
            Loads up to maxItems work items for specified activity instances and role instances with the provided status
            </summary>
            <param name="activityInstances"></param>
            <param name="roleInstances"></param>
            <param name="maxItems"></param>
            <param name="status"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadAvailableWorkItems(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus,System.Int32)">
            <summary>
            Loads up to maxItems work items for specified activity instances and role instances with the provided status that have documents in the specified storage
            </summary>
            <param name="activityInstances"></param>
            <param name="roleInstances"></param>
            <param name="maxItems"></param>
            <param name="status"></param>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadAvailableWorkItems(STG.Common.DTO.DtoWorkItemSelectionData)">
            <summary>
            Loads the work items based on the provided filter
            </summary>
            <param name="filter"></param>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadWorkItemsFilteredOrderedPaged(STG.Common.DTO.DtoSelectQuery{STG.Common.DTO.DtoWorkItemData},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Loads up to the pageSize specified number of workitems for provided filter and order conditions
            </summary>
            <param name="selectQuery"></param>      
            <param name="lstRequiredRoleInstanceIDs"></param>       
            <param name="includeDeleted"></param>       
            <param name="includeDone"></param>       
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadChildWorkItems(System.Int32)">
            <summary>
            loads child work items for provided work item identifier
            </summary>
            <param name="rootWorkItemID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.SaveWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            saves the provided work item in storage
            </summary>
            <param name="workItem"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.UpgradeWorkItem(System.Int32)">
            <summary>
            Upgrades the provided work item to a newest process version
            </summary>
            <param name="workItemID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.CleanChildWorkItems(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Removes the child work items
            </summary>
            <param name="rootWorkItem"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ReAssignDocument(STG.Common.DTO.DtoDocumentData,STG.Common.DTO.DtoWorkItemData,System.Guid)">
            <summary>
            Removes the child documents from a root document, and creates a work items for them
            </summary>
            <param name="childDocument">child document to remove</param>
            <param name="parentWorkItem">root document work item</param>
            <param name="transactionId">Transaction identifier</param>
            <returns>child document work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ReAssignDtoDocument(STG.Common.DTO.DtoDocumentData,STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Removes the child documents from a root document, and creates a work items for them
            </summary>
            <param name="childDocument">child document to remove</param>
            <param name="parentWorkItem">root document work item</param>
            <returns>child document work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ReassignDocuments(System.Guid,System.Collections.Generic.IList{System.Guid},STG.Common.DTO.DtoWorkItemData,System.Guid,STG.Common.Interfaces.PromoteParentDelegate)">
            <summary>
            New work item will be created for every child work item and the work items will be removed from source
            </summary>
            <param name="sourceDocumentID"></param>
            <param name="documentIDsToReassign"></param>
            <param name="sourceDocumentWorkItem"></param>
            <param name="transactionId"></param>
            <param name="promoteDelegate"></param>
            <returns>list of newly created work items</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadWorkItem(System.Int32)">
            <summary>
            Loads the work item with provided identifier
            </summary>
            <param name="workItemID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadWorkItems(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Loads the work items with provided identifiers
            </summary>
            <param name="workItemIDs"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadWorkItem(System.Guid)">
            <summary>
            Loads the work item with provided identifier
            </summary>
            <param name="workItemIdentifier"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.LoadWorkItemForDocument(System.Guid,System.Guid)">
            <summary>
            
            </summary>
            <param name="transactionID"></param>
            <param name="ownerDocumentID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.RemoveDeletedWorkItmes(System.Int32)">
            <summary>
            Removes all deleted work items from database
            </summary>
            <param name="processID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ChangeWorkItemsActivityInstance(System.Collections.Generic.IList{STG.Common.DTO.DtoWorkItemData},System.Int32)">
            <summary>
            Changes the activity instance data for the provided work items. Returns list of work item ID-s that could not be updated
            </summary>
            <param name="workItemsToUpdate">Work items to update</param>
            <param name="newActivityInstanceID">new activity instance ID</param>
            <returns>list of work item ID-s that could not be updated</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ChangeWorkItemsStatus(System.Collections.Generic.IList{STG.Common.DTO.DtoWorkItemData},STG.Common.DTO.DtoWorkItemStatus)">
            <summary>
            Changes the status for the provided work items. Returns list of work item ID-s that could not be updated
            </summary>
            <param name="workItemsToUpdate">Work ITems to update</param>
            <param name="newStatus">new status for the provided work items</param>
            <returns>list of work item ID-s that could not be updated</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.CheckIfWorkItemIsValidForDocumentLoad(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Check if work item is valid for document load
            </summary>
            <param name="workItem">The work item to check validity</param>
            <returns>Work item validity status</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.ValidateWorkItemsForUpgrade(System.Collections.Generic.IList{STG.Common.DTO.DtoWorkItemData})">
            <summary>
            Method validates work items for upgrade
            </summary>
            <param name="workItems"></param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Runtime.IWorkItemStorage.UpgradeWorkItems(System.Collections.Generic.IList{STG.Common.DTO.Process.DtoWorkItemUpgradeData},System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Method upgrades work items
            </summary>
            <param name="workItems"></param>
            <param name="principal"></param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.Runtime.IWorkItemStorage.GetDocumentStorage">
            <summary>
            Document storage        
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.ISTGDTStorage">
            <summary>
            defines the storage interface for design time. Encapsulates all methods used to access the data storage and fetch the data
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.ActivityInstanceStorage">
            <summary>
            Activity instance storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.ActivityStorage">
            <summary>
            Activity storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.ClientStorage">
            <summary>
            Client storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.DesignerStorage">
            <summary>
            Designer storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.DocumentTypeStorage">
            <summary>
            Document type storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.EnvironmentStorage">
            <summary>
            Environment storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.FileStorage">
            <summary>
            File storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.IndexFieldStorage">
            <summary>
            Index field storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.MediaTypeStorage">
            <summary>
            Media type storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.ProcessStorage">
            <summary>
            Process storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.ProjectStorage">
            <summary>
            Project storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.PublishStorage">
            <summary>
            Publish storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.SystemMonitorStorage">
            <summary>
            System monitor storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.TableColumnStorage">
            <summary>
            Table column storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.TableStorage">
            <summary>
            Table storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.UserStorage">
            <summary>
            User storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.VariableStorage">
            <summary>
            Variable storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.UpgradeStorage">
            <summary>
            Upgrade Storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.RolesStorage">
            <summary>
            Roles storage
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGDTStorage.RoleInstancesStorage">
            <summary>
            Role instances storage
            </summary>
        </member>
        <member name="T:STG.Common.Interfaces.ISTGStorage">
            <summary>
            defines the storage interface. Encapsulates all methods used to access the data storage and fetch the data
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGStorage.CheckDB">
            <summary>
            Check for Database existence
            </summary>
            <returns>DtoServiceLocationHealth item with state and health of the DB</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGStorage.GetDocumentStorage(System.Int32)">
            <summary>
            Method gets document storage for given identifier
            </summary>
            <param name="documentStorageIdentifier"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGStorage.GetDocumentMediaStorage(System.Int32)">
            <summary>
            Method gets document media storage for given identifier
            </summary>
            <param name="documentStorageIdentifier"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGStorage.GetAvailableDocumentStorages">
            <summary>
            Reads the available document storages for the current environment
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.ISTGStorage.GetDocumentStorageInfo(System.Int32)">
            <summary>
            Load the document storage based on the provided identifier
            </summary>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.PermissionStorage">
            <summary>
            Permissions storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.ActivityStorage">
            <summary>
            Activity storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.ProcessStorage">
            <summary>
            Process storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.WorkItemStorage">
            <summary>
            Work item storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.HeartbeatStorage">
            <summary>
            Heartbeat storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.WorkItemAuditStorage">
            <summary>
            Work item storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.DefaultDocumentStorage">
            <summary>
            Document storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.DocumentTypeStorage">
            <summary>
            Document type storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.DefaultDocumentMediaStorage">
            <summary>
            Document media storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.MediaTypeStorage">
            <summary>
            Media types storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.DocumentIndexStorage">
            <summary>
            Document index storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.ISTGStorage.TransactionHelper">
            <summary>
            Transaction helper
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Services.IConfigurationService">
            <summary>
            The REST Configuration service interface. 
            Defines the REST HTTP methods for accessing the configuration  
            </summary>    
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.Ping">
            <summary>
            ping method for checking if service is alive
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadProcessInfo(System.String)">
            <summary>
            Loads the Process Info object based on provided process ID
            </summary>
            <param name="processType">Unique ID of the process</param>
            <returns>Process Info object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadHostingProcesses(System.String)">
            <summary>
            Loads a list of processes where the specified activity type is hosted
            </summary>
            <param name="activityTypeId">Activity Type identifier</param>
            <returns>list of processes</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadActivityInstancesInfo(System.String)">
            <summary>
            Loads the list of Activity Instance objects for the specified Process ID
            </summary>
            <param name="processId">ID of the process</param>
            <returns>list of activity instance objects</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadActivityInstanceInfo(System.String)">
            <summary>
            Loads the Activity Instance object based on specified ID
            </summary>
            <param name="activityInstanceId">ID of the activity instance</param>
            <returns>activity instance object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadActivityConfiguration(System.String)">
            <summary>
            Loads the configuration required for activity implementation
            </summary>
            <param name="activityInstanceId">Activity instance identifier</param>
            <returns>activity implementation configuration</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadActivityProcessConfig(System.String)">
            <summary>
            Loads the process settings for the specified Activity Instance
            </summary>
            <param name="activityInstanceId">activity instance identifier</param>
            <returns>process configuration</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.ProcessCleanup">
            <summary>
            Deletes old versions of processes if they have no work items
            </summary>
            <returns>True if any process was deleted</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.LoadActivityPackageData(System.Int32)">
            <summary>
            Load binary data of the activity related package
            </summary>
            <param name="activityId">The activity id for the package</param>
            <returns>Binary data of the package</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IConfigurationService.IsNewerVariablesVersionAvailable(System.Int32,System.Int32)">
            <summary>
            Method checks for newer version of activity variables
            </summary>
            <param name="activityInstanceId">Activity identifier</param>
            <param name="version">Variables version</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Services.IDocumentService">
            <summary>
            The WCF document service interface. 
            Defines the methods for accessing documents with transactions
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.Ping">
            <summary>
            ping method for checking if service is alive
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.UploadDocument(STG.Common.DTO.DtoDocumentData,System.Guid)">
            <summary>
            Upload document method. Transaction Scope from client is Allowed!
            </summary>
            <param name="document">The Document data</param>
            <param name="transactionID">The Document data</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.CommitTransaction(System.Guid)">
            <summary>
            Upload document transaction commit method. Transaction Scope from client is Allowed!
            <param name="transactionId">The Document Type name</param>
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.AbortTransaction(System.Guid)">
            <summary>
            aborts (and rolles back ) the trensaction with the given identifier
            </summary>
            <param name="transactionId"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.CreateTransaction">
            <summary>
            creates a new transaction
            </summary>
            <returns>Identifier for the new transaction</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.DownloadDocumentType(System.String)">
            <summary>
            Download document type method.
            </summary>
            <param name="documentTypeName">The Document Type name</param>
            <returns>The Document type data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.UploadDocumentType(STG.Common.DTO.DtoDocumentTypeData,System.Guid)">
            <summary>
            Upload document type method.
            </summary>
            <param name="documentType">The Document type data</param>
            <param name="transactionID">transactionIdentifier</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.ReAssignDocument(STG.Common.DTO.DtoDocumentData,STG.Common.DTO.DtoWorkItemData,System.Guid)">
            <summary>
            the child documents with specified ID will be split from the root document and will create a child work items for it
            </summary>
            <param name="childDocument">The child Document data</param>
            <param name="parentWorkItem">The work item data of the parent document</param>
            <param name="transactionID">The work item data of the parent document</param>
            <returns>new work item data of the re-assigned document</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.RemoveChildWorkItems(STG.Common.DTO.DtoWorkItemData,System.Guid)">
            <summary>
            Removes the child work items from the provided root work item
            </summary>
            <param name="rootWorkItem">The work item data of the parent document</param>
            <param name="transactionID">The work item data of the parent document</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.CopyDocumentForProcess(System.String,System.String,System.Guid)">
            <summary>
            the documents will be copied to a newly created work item in the process with specified ID
            </summary>
            <param name="documentID">Document identifier</param>
            <param name="processType">ID of the process where to copy</param>
            <param name="transactionID">ID of the process where to copy</param>
            <returns>new work item data of the copied document</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.DownloadDocumentMedia(System.Guid)">
            <summary>
            Downloads the document data as a Stream
            </summary>
            <param name="mediaID">The ID of the document</param>
            <returns>Stream containing the document data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IDocumentService.UploadDocumentMedia(STG.Common.DTO.DtoMediaDataStream)">
            <summary>
            Uploads the document data as a Stream
            </summary>
            <param name="documentData">The document data as a stream</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Services.IProcessService">
            <summary>
            The WCF process service interface. 
            Defines the HTTP methods for accessing the process 
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.Ping">
            <summary>
            Ping method for checking if service is alive
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetAvailableStorages">
            <summary>
            Reads all available document storages for the current environment
            </summary>
            <returns>List of Runtime environment document storages</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.CreateWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Creates a new work item
            </summary>
            <param name="workItem">Work item data</param>
            <returns>Created work item data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.DeleteWorkItem(System.String)">
            <summary>
            Deletes the work item
            </summary>
            <param name="workItemId">ID of the work item to delete</param>
            <returns>True if delete was successful</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.LockNextAvailableWorkItem(System.String,System.String)">
            <summary>
            Locks the available work item based on an activity and user authentication 
            </summary>
            <param name="activityTypeIds">Comma separated list of ActivityType IDs</param>
            <param name="processIds">Comma separated list of Process IDs (optional)</param>
            <returns>The locked work item data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.LockWorkItem(System.String)">
            <summary>
            Locks the available work item based on it's ID and user authentication 
            </summary>
            <param name="workItemId">ID if the work item to lock</param>
            <returns>The locked work item data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetNextAvailableWorkItems(System.String,System.String,System.String)">
            <summary>
            Provides a list of work items that are available for processing
            </summary>
            <param name="activityTypeIds">Comma separated list of ActivityType IDs</param>
            <param name="processIds">Comma separated list of Process IDs (optional)</param>
            <param name="maxItems">Max number of work items to be returned</param>
            <returns>List of work items that are available for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetNextAvailableWorkItems(System.String,System.String,System.String,System.Int32)">
            <summary>
            Provides a list of work items that are available for processing
            </summary>
            <param name="activityTypeIds">Comma separated list of ActivityType IDs</param>
            <param name="processIds">Comma separated list of Process IDs (optional)</param>
            <param name="maxItems">Max number of work items to be returned</param>
            <param name="storageID">Storage where the work item's documents are stored (optional)</param>
            <returns>List of work items that are available for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetWorkItems(System.String,System.String,System.String,System.String)">
            <summary>
            Provides a list of work items
            </summary>
            <param name="activityTypeIds">Comma separated list of ActivityType IDs</param>
            <param name="processIds">Comma separated list of Process IDs (optional)</param>
            <param name="maxItems">Max number of work items to be returned</param>
            <param name="status">Returns work items with specified status (optional)</param>
            <returns>List of work items</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetWorkItems(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Provides a list of work items
            </summary>
            <param name="activityTypeIds">Comma separated list of ActivityType IDs</param>
            <param name="processIds">Comma separated list of Process IDs (optional)</param>
            <param name="maxItems">Max number of work items to be returned</param>
            <param name="status">Returns work items with specified status (optional)</param>
            <param name="storageID">Returns work items with documents in the specific storage (optional)</param>
            <returns>List of work items</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.CommitWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Releases the work item and sets its correct activity and status
            </summary>
            <param name="processedWorkItem">Work item to be updated</param>
            <returns>True if update was successful</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.UpgradeWorkItem(System.String)">
            <summary>
            Upgrades the work item and its children if there is a newer process version
            </summary>
            <param name="workItemId">ID if the work item to upgrade</param>
            <returns>True if work item was upgraded</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetChildWorkItems(System.String)">
            <summary>
            Provides a list of child work items of the specified work item
            </summary>
            <param name="rootworkItemId">ID of the root work item to get the child work items for.</param>
            <returns>list of work items that are available for the specified root work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.Services.IProcessService.GetWorkItemAudits(System.String)">
            <summary>
            Provides a list of work item audits for the specified work item
            </summary>
            <param name="workItemId">ID of the root work item to get the audit data for.</param>
            <returns>List of work item audit that are available for the specified work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGApiController">
            <summary>
            STG Api controller interface
            </summary>    
        </member>
        <member name="P:STG.Common.Interfaces.STGSystem.ISTGApiController.ClaimsPrincipal">
            <summary>
            Claims principal
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage">
            <summary>
            Event logs storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.LoadLogs(System.Int32)">
            <summary>
            Method loads event logs stored in database
            </summary>
            <param name="maxItems">Maximum number of items to load</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.LoadLog(System.Int32)">
            <summary>
            Method loads single event log stored in database
            </summary>
            <param name="id"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.AddEventLog(STG.Common.DTO.STGSystem.DtoSTGEventLog)">
            <summary>
            Method stores event in database
            </summary>
            <param name="dtoEvent"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.RemoveEventLog(System.Int32)">
            <summary>
            Method removes eventLog record
            </summary>
            <param name="dtoEventId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.LoadLogs(STG.Common.DTO.DtoSelectQuery{STG.Common.DTO.STGSystem.DtoSTGEventLog})">
            <summary>
            Method returns filtered Logs
            </summary>
            <param name="selectFilter">Select filter</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGEventLogStorage.CleanUpEventLog(System.Int32,STG.Common.DTO.STGSystem.LogLevel)">
            <summary>
            deletes the log entries up to provided level and older than provided hours
            </summary>
            <param name="olderThan">records must be older than provided hours</param>
            <param name="upToLevel">deepest level to delete</param>
            <returns>number of deleted records</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGLogger">
            <summary>
            STGLogger interface
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.STGSystem.ISTGLogger.MessageSource">
            <summary>
            Message source
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.Common.Interfaces.STGSystem.ISTGLogger.ActivityInstanceInfo">
            <summary>
            Activity instance info
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGLoggerGeneric`1">
            <summary>
            Generic logger interface
            </summary>
            <typeparam name="TLogger"></typeparam>
        </member>
        <member name="T:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage">
            <summary>
            Registered resources storage
            </summary>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.LoadRegisteredResources(System.Int32)">
            <summary>
            Method loads registered resources stored in database
            </summary>
            <param name="maxItems">Maximum number of items to load</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.LoadRegisteredResourcesTree">
            <summary>
            Method loads tree structure of registered resources stored in database
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.LoadRegisteredResource(System.Int32)">
            <summary>
            Method loads single registered resource stored in database
            </summary>
            <param name="registeredResourceId">ID of the registered resource to load</param>
            <returns>Registered resource DTO</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.AddRegisteredResource(STG.Common.DTO.STGSystem.DtoRegisteredResource)">
            <summary>
            Method stores registered resource in database
            </summary>
            <param name="dtoRegisteredResource">Registered resource DTO to insert</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.RemoveRegisteredResource(System.Int32)">
            <summary>
            Method removes registered resource record
            </summary>
            <param name="registeredResourceId">ID of the registered resource to  delete</param>
            <returns>True if item was deleted</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.PersistSystemPerformanceData(STG.Common.DTO.STGSystem.DtoResourceStatus)">
            <summary>
            Persists the result in database
            </summary>
            <param name="status">System performance result</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.Common.Interfaces.STGSystem.ISTGRegisteredResourceStorage.CleanOldSystemPerformanceData">
            <summary>
            Removes all the performance data older than 24 hours
            </summary>
            <returns>number of deleted records</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.Common.Interfaces.Utilities.IStreamDisposableHandle">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.Common.Interfaces.Utilities.IStreamDisposableHandle.Stream">
            <summary>
            Stream
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
    </members>
</doc>
