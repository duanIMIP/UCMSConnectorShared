<?xml version="1.0"?>
<doc>
    <assembly>
        <name>STG.RT.API</name>
    </assembly>
    <members>
        <member name="T:STG.RT.API.Activity.ActivityConfigBase`1">
            <summary>
            Base class for activity configuration.
            </summary>
            <typeparam name="TActivityConfig">Activity configuration type.</typeparam>
        </member>
        <member name="T:STG.RT.API.Activity.Converters.BooleanToVisibilityConverter">
            <summary>
            BooleanToVisibilityConverter
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            ConvertBack
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.Converters.SLAStatusConverter">
            <summary>
            SLA Status Converter
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.SLAStatusConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from different DateTimes in WorkItemData to SLA Status
            </summary>
            <param name="value">Value to convert based on parameter</param>
            <param name="targetType">(not used)</param>
            <param name="parameter">(not used)</param>
            <param name="culture">(not used)</param>
            <returns>SLA status that is converted based on different DateTiems in WotrItemData.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.SLAStatusConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.Converters.STGDataTypeToVisibilityConverter">
            <summary>
            DtoSTGDataType to Visibility converter
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.STGDataTypeToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from DtoSTGDataType to Visibility
            </summary>
            <param name="value">Value to compare with parameter</param>
            <param name="targetType">(not used)</param>
            <param name="parameter">Parameter used to compare with value</param>
            <param name="culture">(not used)</param>
            <returns>Visibility.Visible if values is equal to parameter. Visibility.Collapsed otherwise.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.STGDataTypeToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.Converters.STGDataTypeValueConverter">
            <summary>
            DtoSTGDataType to strong typed value converter
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.STGDataTypeValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts from DtoSTGDataType to strong typed value
            </summary>
            <param name="value">Value to convert based on parameter</param>
            <param name="targetType">(not used)</param>
            <param name="parameter">Parameter that specifies target try for conversion</param>
            <param name="culture">(not used)</param>
            <returns>Strong typed value that is converted based on specified parameter type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Converters.STGDataTypeValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.Helper.GridViewSort">
            <summary>
            This class implements sorting for a GridView e.g. inside a ListView
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.Helper.HeartbeatHelper">
            <summary>
            Heartbeat helper class
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Helper.HeartbeatHelper.ReportHeartbeat(STG.RT.API.Interfaces.ISTGProcessInternal,STG.Common.DTO.DtoWorkItemData,System.String,STG.Common.Interfaces.STGSystem.ISTGLogger)">
            <summary>
            Reports heartbeat from activity
            </summary>
            <param name="processLayer"></param>
            <param name="workItemInProgress"></param>
            <param name="heartbeatMessage"></param>
            <param name="logger"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Helper.MouseDoubleClickBehaviour.SetMouseDoubleClick(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <param name="value"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Helper.MouseDoubleClickBehaviour.GetMouseDoubleClick(System.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ISTGExternalActivity">
            <summary>
            Defines the external activity definition (for managing configuration settings in process monitor and loading them trough API).
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.ISTGProcessTimer">
            <summary>
            Defines the process timer activity (time driven).
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ISTGProcessTimer.Process(STG.RT.API.Interfaces.ISTGProcess,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Executes the process timer implementation.
            This is executed by an activity host scheduled timer action.
            </summary>
            <param name="processLayer">Specifies the process layer API.</param>
            <param name="configurationLayer">Specifies the configuration layer API.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ISTGSystemAgentActivity">
            <summary>
            Defines a system agent activity
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ISTGSystemAgentActivity.Process(STG.RT.API.Interfaces.ISTGProcess,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Executes the system agent activity.
            This is executed by a scheduled timer action.
            </summary>
            <param name="processLayer">Specifies the process layer API.</param>
            <param name="configurationLayer">Specifies the configuration layer API.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ISTGUnattendedActivity">
            <summary>
            Defines the interface that must be implemented by every 
            unattended activity that is executed in the activity host.
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ISTGUnattendedActivity.Process(STG.Common.DTO.DtoWorkItemData,STG.RT.API.Document.STGDocument)">
             <summary>
             Executes the activity implementation
             for a single document / work item.
             </summary>
            <param name="workItemInProgress">Specifies the work item to be  processed.</param>
            <param name="documentToProcess">Defines the root document attached to work item.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ISTGUnattendedActivity.ChildWorkItems">
            <summary>
            Gets or sets the of child work items that are in the same activity instance as the work item in progress and that are in "Ready to merge" status.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.STGExternalAbstract`1">
            <summary>
             This class represents an abstract external activity implementation that provides a type safe access to the activity configuration.
            </summary>
            <typeparam name="TActivityConfig">Specifies the activity configuration.</typeparam>
        </member>
        <member name="M:STG.RT.API.Activity.STGExternalAbstract`1.LoadInstanceConfig(STG.RT.API.Interfaces.ISTGConfiguration,System.Int32)">
            <summary>
            Loads the configuration for the provided activity instance
            </summary>
            <param name="configurationLayer">Specifies configuration layer API object.</param>
            <param name="activityInstanceId">Specifies the activity instance identifier that this activity runs as.</param>
            <returns>The activity configuration stored for the provided activity instance.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.STGExternalAbstract`1.LockWorkItem(STG.RT.API.Activity.WorkItemSelectionDialogSettings)">
            <summary>
            Opens a window to filter work items and then locks and loads the selected work item.
            </summary>
            <param name="workItemSelectionDialogSettings">Work item selection dialog settings.</param>
            <returns>Locked selected work item or null if canceled or error happens.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.STGProcessTimerAbstract`1">
             <summary>
             This class represents an abstract process time activity implementation that provides a type safe access to activity configuration.
             </summary>
             <typeparam name="TActivityConfig">Activity configuration</typeparam>
             <example>
             The following example shows a timer activity that implements this abstract class and performs a copy of all available work items in a new process.
             After copying the available work items gets deleted from current process.
             <code>
              public override void Process(STGProcess processLayer, STGConfiguration configurationLayer)
              {
                 //start loop
                 while (true)
                 {
                     //lock the work item
                     DtoWorkItemData lockedWorkItem = processLayer.LockNextAvailableWorkItem(new Collection&lt;int>(){ActivityInfo.ActivityTypeID}, new Collection&lt;int>(){ActivityInfo.Process.ProcessID});
                     //break if no work items exist; stop processing
                     if (lockedWorkItem == null)
                     {
                         break;
                     }
                     try
                     {
                         //load the root document
                         STGDocument rootDocument = STGDocument.Load(lockedWorkItem);
            
                         //Get the process where to copy the document from settings
                         var externalProcess = ActivityConfiguration.ExternalProcessToCopy;
                         //copy full document structure into new process, and get the work item copied document
                         var newProcessWorkItem = rootDocument.CopyForProcess(externalProcess);
            
                         //move the new work item in correct position in process
                         var processConfig = configurationLayer.LoadActivityInstanceProcessSettings(newProcessWorkItem.ActivityInstanceID);
                         var copiedDocument = STGDocument.Load(newProcessWorkItem);
                        processLayer.MoveWorkItemInProcess(processConfig, copiedDocument, newProcessWorkItem, configurationLayer);
            
                         //delete the current work item and all its data.
                         processLayer.DeleteWorkItem(lockedWorkItem);
                     }
                     catch (Exception)
                     {
                         //error occurred, release the work item in error state
                        if (lockedWorkItem != null)
                        {						
                             lockedWorkItem.Status = DtoWorkItemStatus.Error;
                             lockedWorkItem.Message = "Unhandled Failure";
                             //it is OK to send null as document here, because the work item is in error state
                             processLayer.CommitWorkItem(lockedWorkItem, null);
                        }
                     }
                 }
              }
             </code>
             </example>
        </member>
        <member name="M:STG.RT.API.Activity.STGProcessTimerAbstract`1.Process(STG.RT.API.Interfaces.ISTGProcess,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Provides abstract access to a method that executes the process timer implementation.
            </summary>
            <param name="processLayer">Specifies process layer API object.</param>
            <param name="configurationLayer">Specifies configuration layer API object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.STGSimpleProcessTimerAbstract">
             <summary>
             This class represents an abstract process time activity implementation that provides a simple access to activity configuration in a form of key-value pair dictionary.
             </summary>
             <example>
             The following example shows a timer activity that implements this abstract class and imports files based on configuration.
             <code>
             public override void Process(STGProcess processLayer, STGConfiguration configurationLayer)
                {
                    //create an empty work item
                var newWorkItem = processLayer.CreateWorkItem(ActivityInfo.Process.ProcessID, ActivityInfo.ActivityInstanceID);
                //create a root document
                var rootDocument = new STGDocument(newWorkItem);
            
                //filter tiff files from input path specified in configuration
                var availableFiles = Directory.GetFiles(ActivityConfiguration["inputPath"], "*.tif");
            
                //create a child document for each tiff file
                foreach (var file in availableFiles)
                {
                    //create a child document and append it
                    var childDocument = new STGDocument();
                    rootDocument.AppendChild(childDocument);
                    //add media containing the tiff image to a child document
                    var fileInfo = new FileInfo(file);
                    childDocument.AppendMedia(STGMedia.Initialize(fileInfo.Name, 
                                                                  STGMedia.AvailableMediaTypes.FirstOrDefault(mt => mt.MediaTypeName.Equals(ActivityConfiguration["BWTiffMEdiaType"], StringComparison.OrdinalIgnoreCase)), 
                                                                  fileInfo.FullName, 
                                                                  true));
                }
            
                //release the work item in correct position in process
                var processConfig = configurationLayer.LoadActivityInstanceProcessSettings(ActivityInfo);
                processLayer.MoveWorkItemInProcess(processConfig, rootDocument, newWorkItem, configurationLayer);
            
            }
             </code>
             </example>
        </member>
        <member name="M:STG.RT.API.Activity.STGSimpleProcessTimerAbstract.Process(STG.RT.API.Interfaces.ISTGProcess,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Provides abstract access to a method that executes the process timer implementation.
            </summary>
            <param name="processLayer">Specifies the process layer API object.</param>
            <param name="configurationLayer">Specifies the configuration layer API object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.STGSimpleUnattendedAbstract">
             <summary>
             This class represents an abstract unattended activity implementation that provides a simple access to activity configuration in a form of key-value pair dictionary.
             </summary>
             <example>
             The following example shows a unattended activity that implements this abstract class and performs conversion of tiff images into PDF.
             <code>
             public class SimpleDocument : STGSimpleUnattendedAbstract
             {
                public override void Process(DtoWorkItemData workItemInProgress, STGDocument documentToProcess)
                {
                    //get media type for tiff images based on configuration entry
                    var tiffMediaType = STGMedia.AvailableMediaTypes.FirstOrDefault
                                        (mt => mt.MediaTypeName.Equals(ActivityConfiguration["TiffMediaTypeName"], StringComparison.OrdinalIgnoreCase));
            
                    //get media type for converted PDF based on configuration entry
                    var pdfMediaType = STGMedia.AvailableMediaTypes.FirstOrDefault
                                        (mt => mt.MediaTypeName.Equals(ActivityConfiguration["PdfMediaTypeName"], StringComparison.OrdinalIgnoreCase));
            
                    //loop all child document
                    foreach (var child in documentToProcess.ChildDocuments)
                    {
                        //get the tiff images medias to convert into PDF
                        var mediaToConvert = child.Media.Where(m => m.MediaTypeID == tiffMediaType.MediaTypeID);
                        if (mediaToConvert.Count() > 0 )
                        {
                            //if there are tiff images load the streams in list
                            var imageStreamList = mediaToConvert.Select(m => m.MediaStream).ToList();
                            //convert all tiff streams in PDF and return PDF stream
                            var pdfStream = PdfConverter.ConvertIntoPdf(imageStreamList);
                            //add converted PDF media to a document
                            if (pdfStream != null)
                            {
                                child.AppendMedia(STGMedia.Initialize("convertedPDF", ".pdf", pdfMediaType, pdfStream));
                            }
                        }
                    }
            
                }
             }
             </code>
             </example>
        </member>
        <member name="M:STG.RT.API.Activity.STGSimpleUnattendedAbstract.Process(STG.Common.DTO.DtoWorkItemData,STG.RT.API.Document.STGDocument)">
            <summary>
            Provides abstract access to a method that executes the activity implementation for a single document / work item.
            </summary>
            <param name="workItemInProgress">Specifies currently locked work item to be processed.</param>
            <param name="documentToProcess">Specifies the root document of the work item in progress.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.STGSimpleUnattendedAbstract.ChildWorkItems">
            <summary>
            Gets or sets a list of child work items that are in the same activity instance as the work item in progress and are in the "Ready to merge" status.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.STGSystemAgentActivityAbstract`1">
            <summary>
            This class represents an abstract system agent implementation that provides a type safe access to the agent configuration.
            </summary>
            <typeparam name="TActivityConfig">Agent configuration</typeparam>
        </member>
        <member name="M:STG.RT.API.Activity.STGSystemAgentActivityAbstract`1.Process(STG.RT.API.Interfaces.ISTGProcess,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Provides abstract access to a method that executes the system agent.
            </summary>
            <param name="processLayer">Specifies process layer API object.</param>
            <param name="configurationLayer">Specifies configuration layer API object.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.STGSystemAgentActivityAbstract`1.SetPlatformHeartbeatDelegate(STG.Common.Interfaces.PlatformHeartbeatDelegate)">
            <summary>
            Sets a heartbeat callback function that the activity can use to report that it is running
            </summary>
            <param name="platformHeartbeatDelegate">Specifies the callback funcion that the activity can use to report that it is running</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.STGSystemAgentActivityAbstract`1.Terminate">
            <summary>
            Method called by the platform when the host is shutting down so that the activity can gracefully terminate processing
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.NamespaceDoc">
            <summary>
            The STG.Common.ActivityManagerAbstractActivity namespace contains abstract classes for implementing activities. 
            The classes provides type safe access to an activity configuration data.
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.STGUnattendedAbstract`1">
            <summary>
            This class represents an abstract unattended activity implementation that provides a type safe access to the activity configuration.
            </summary>
            <typeparam name="TActivityConfig">Specifies the activity configuration.</typeparam>
        </member>
        <member name="M:STG.RT.API.Activity.STGUnattendedAbstract`1.Process(STG.Common.DTO.DtoWorkItemData,STG.RT.API.Document.STGDocument)">
            <summary>
            Provides abstract access to a method that executes the activity implementation for a single document / work item.
            </summary>
            <param name="workItemInProgress">Specifies currently locked work item to be processed.</param>
            <param name="documentToProcess">Specifies the root document of the work Item in progress.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.STGUnattendedAbstract`1.ChildWorkItems">
            <summary>
            Gets or sets a list of child work items that are in the same activity instance as the work item in progress and are in the "Ready to merge" status.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.TimerCalculator">
            <summary>
            re-calculates the timer activity execution time
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.ViewModelBase">
            <summary>
            ViewModel base class
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            OnPropertyChanged event
            </summary>
            <param name="prop">The property to check if changed</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.ViewModelBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            OnPropertyChanged generic event
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="propertyExpression">Property expression</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.ViewModelBase.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            ExtractPropertyName generic method
            </summary>
            <typeparam name="T">Property type</typeparam>
            <param name="propertyExpression">Property expression</param>
            <returns>Property name</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="E:STG.RT.API.Activity.ViewModels.ViewModelBase.PropertyChanged">
            <summary>
            PropertyChanged event handler
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel">
            <summary>
            Available work items VM
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.IRequestCloseViewModel">
            <summary>
            IRequestCloseViewModel interface
            </summary>
        </member>
        <member name="E:STG.RT.API.Activity.ViewModels.IRequestCloseViewModel.RequestClose">
            <summary>
            RequestClose event handler
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.#ctor(STG.RT.API.Activity.WorkItemSelectionDialogSettings)">
            <summary>
            Constructor
            </summary>
            <param name="workItemSelectionDialogSettings">Work item selection dialog settings</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="E:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.RequestClose">
            <summary>
            IRequestCloseViewModel implementation
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.Settings">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.FilterViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.WorkItemsViewModel">
            <summary>
            Work items view model
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.SearchCommand">
            <summary>
            Filter work items command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel.OpenWorkItemCommand">
            <summary>
            Open work item command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.DelegateCommand">
            <summary>
            Delegate command class
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.#ctor">
            <summary>
            Empty constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.#ctor(System.Action)">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.#ctor(System.Action{System.Object})">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Method to determine if the command can be executed
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.Execute(System.Object)">
            <summary>
            Execution of the command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChaged event
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand.OnCanExecuteChanged">
            <summary>
            Protected virtual method to raise CanExecuteChanged event
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="E:STG.RT.API.Activity.ViewModels.DelegateCommand.CanExecuteChanged">
            <summary>
            ICommand.CanExecuteChanged implementation
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.DelegateCommand`1">
            <summary>
            Generic DelegateCommand class
            </summary>
            <typeparam name="T">Parameter type</typeparam>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Constructor
            </summary>
            <param name="parametrizedExecuteMethod">Parametrized execute method</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Constructor
            </summary>
            <param name="parametrizedExecuteMethod">Parametrized execute method</param>
            <param name="canExecuteMethod">Can execute method</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Execute method
            </summary>
            <param name="param">Parametrized execute method's parameter</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Can execute method
            </summary>
            <param name="param">Can execute method's parameter</param>
            <returns>True if method can be executed</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.DocumentIndexViewModel">
            <summary>
            Document index VM
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.DocumentIndexViewModel.#ctor(STG.Common.DTO.DtoDocumentIndex)">
            <summary>
            Constructor
            </summary>
            <param name="documentIndex">Document index DTO</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.DocumentIndexViewModel.IndexName">
            <summary>
            Document index name
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.DocumentIndexViewModel.DataType">
            <summary>
            Document index data type
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.DocumentIndexViewModel.IndexValue">
            <summary>
            Document index value
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.FilterViewModel">
            <summary>
            Filter view model
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.FilterViewModel.#ctor(STG.RT.API.Activity.WorkItemSelectionDialogSettings)">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.FilterViewModel.GetSelectQuery">
            <summary>
            Method generates select query based on filters
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.AvailableProcesses">
            <summary>
            Available processes
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.SelectedProcess">
            <summary>
            Selected process
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.SelectedActivityInstance">
            <summary>
            Selected activity instance
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.DocumentIndexesList">
            <summary>
            Document indexes list
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.SelectedDocumentIndex">
            <summary>
            Selected document index
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.IndexFilters">
            <summary>
            Index filters
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.SelectedIndexFilter">
            <summary>
            Selected index filter
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.IsProcessFilteringEnabled">
            <summary>
            Is process filtering enabled
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.IsActivityInstanceFilteringEnabled">
            <summary>
            Is activity instance filtering enabled
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.IsFilterChanged">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.AddIndexFilterCommand">
            <summary>
            Add index filter command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.RemoveIndexFilterCommand">
            <summary>
            Remove index filter command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.FilterViewModel.ClearIndexFiltersCommand">
            <summary>
            Clear index filters command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.IndexFilterViewModel">
            <summary>
            Index filter VM
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.#ctor(STG.Common.DTO.DtoIndexFilter,STG.Common.DTO.DtoSTGDataType)">
            <summary>
            Constructor
            </summary>
            <param name="indexFilter">Index filter DTO</param>
            <param name="indexDataType">Index data type DTO</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexFilter">
            <summary>
            Index filter DTO
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexField">
            <summary>
            Index field
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexOperator">
            <summary>
            Index operator
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexValue">
            <summary>
            Index value
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexDataType">
            <summary>
            Index data type DTO
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.IndexFilterViewModel.IndexSearchOperators">
            <summary>
            Index filter search operators
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.ViewModels.WorkItemsViewModel">
            <summary>
            Work items Results
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.#ctor(STG.RT.API.Activity.WorkItemSelectionDialogSettings,STG.RT.API.Activity.ViewModels.AvailableWorkItemsViewModel)">
            <summary>
            
            </summary>
            <param name="settings"></param>
            <param name="owner"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.LoadData(STG.Common.DTO.DtoWorkItemSelectQuery)">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.SelectedWorkItem">
            <summary>
            Selected work item
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.CurrentPageIndex">
            <summary>
            Current page index
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.Results">
            <summary>
            Results
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.IsLoading">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.GotoFirstPageCommand">
            <summary>
            Go to first page command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.GotoPreviousPageCommand">
            <summary>
            Go to previous page command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.GotoNextPageCommand">
            <summary>
            Go to next page command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.ViewModels.WorkItemsViewModel.GotoLastPageCommand">
            <summary>
            Go to last page command
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Activity.Views.ProgressOverlay">
            <summary>
            Interaction logic for ProgressOverlay.xaml
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Views.ProgressOverlay.#ctor">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Views.ProgressOverlay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.Views.WorkItemSelectDialog">
            <summary>
            Interaction logic for WorkItemSelectDialog.xaml
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemSelectDialog.#ctor">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemSelectDialog.closeWindow">
            <summary>
            Close window event handler
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemSelectDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.Views.WorkItemsFilter">
            <summary>
            Interaction logic for WorkItemsFilter.xaml
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemsFilter.#ctor">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemsFilter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.Views.WorkItemsGrid">
            <summary>
            Interaction logic for WorkItemsGrid.xaml
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemsGrid.#ctor">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Activity.Views.WorkItemsGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:STG.RT.API.Activity.WorkItemSelectionDialogSettings">
            <summary>
            Work item selection dialog settings
            </summary>
        </member>
        <member name="M:STG.RT.API.Activity.WorkItemSelectionDialogSettings.#ctor">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ProcessLayer">
            <summary>
            Process layer
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ConfigurationLayer">
            <summary>
            Configuration layer
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ActivityInstanceID">
            <summary>
            Activity instance ID
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ActivityTypeID">
            <summary>
            Activity type ID
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ProcessID">
            <summary>
            Process ID
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ProcessName">
            <summary>
            Used in pair with ActivityInstanceName: when set the dialog will show activity instances of all process versions that have this name and the activity instance has the name ActivityInstanceName. Supports wildcards (%) at the beginning and end. Overrides any other setting.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ActivityInstanceName">
            <summary>
            Used in pair with ProcessName: when set the dialog will show activity instances of all process versions with name ProcessName that have activity instance name ActivityInstanceName. Supports wildcards (%) at the beginning and end. Overrides any other setting.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.WorkItemsPerPage">
            <summary>
            Work items per page
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Activity.WorkItemSelectionDialogSettings.ParentWindowHandler">
            <summary>
            Parent window handler
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Cache.DocumentAuditCache">
            <summary>
            Document Audit Cache
            </summary>
        </member>
        <member name="T:STG.RT.API.Cache.HttpClientCache">
            <summary>
            Http client service cache
            </summary>
        </member>
        <member name="M:STG.RT.API.Cache.HttpClientCache.GetItemFromCache``1">
            <summary>
            Gets / or creates service instance
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Cache.HttpClientCache.AddToCache``1(System.String)">
            <summary>
            Method will add new instance of the selected service type
            </summary>
            <typeparam name="T">Type of service</typeparam>
            <param name="serviceUrl">Service URL</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Cache.HttpClientCache.AddToCache``1(``0)">
            <summary>
            Adds service instance to cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Cache.HttpClientCache.RemoveFromCache``1(``0)">
            <summary>
            Removes service from cache
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Cache.ConfigLayerCache">
            <summary>
            Keeps the cache for the already loaded process definitions
            </summary>
        </member>
        <member name="M:STG.RT.API.Cache.ConfigLayerCache.#ctor">
            <summary>
            private constructor
            </summary>
        </member>
        <member name="P:STG.RT.API.Cache.ConfigLayerCache.CachedActivities">
            <summary>
            Returns a dictionary with cached activity infos 
            </summary>
        </member>
        <member name="P:STG.RT.API.Cache.ConfigLayerCache.CachedProcessActivities">
            <summary>
            Returns a dictionary with list of activity infos cached per process
            </summary>
        </member>
        <member name="P:STG.RT.API.Cache.ConfigLayerCache.CachedProcessSettings">
            <summary>
            Returns a dictionary with cached activity process configuration
            </summary>
        </member>
        <member name="T:STG.RT.API.AuthenticationServiceChecker">
            <summary>
            Pings the auth service to check something.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.AuthenticationServiceChecker.PingOrThrow">
            <summary>
            Pings the authentication service and throws an exception if this fails.
            </summary>
            <returns></returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.AuthenticationServiceChecker.Dispose">
            <summary>
            Dispose
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.DocumentServiceChecker">
            <summary>
            Checks if Documents Service is available
            TODO: Will be replaced by Document Layer
            </summary>
        </member>
        <member name="M:STG.RT.API.DocumentServiceChecker.#ctor">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.DocumentServiceChecker.Dispose">
            <summary>
            Dispose
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.DocumentConverting">
            <summary>
            Class that cares about STG to DTO conversion and updates
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CreateDtoForSTGDocument(STG.RT.API.Document.STGDocument,STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentData,System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Convert STG document into DTO
            </summary>
            <param name="stgDocument">STG Document to convert</param>
            <param name="workItem">Document's work item</param>
            <param name="docData">DTO with document's data</param>
            <param name="baseUri">Base URI of the server that hosts medias</param>
            <param name="full">If true everything is loaded, even extensions</param>
            <param name="withTables">True to fetch tables also</param>
            <returns>Document DTO</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CreateDtoForSTGPage(STG.RT.API.Document.STGDocument,System.Guid,System.Uri,System.Boolean)">
            <summary>
            Creates a page DTO
            </summary>
            <param name="stgDocument">STG Document</param>
            <param name="pageId">Page ID</param>
            <param name="baseUri">Base server URI for media download</param>
            <param name="full">If false, no media or extensions are loaded into DTO</param>
            <returns>Page DTO</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CreateDtoForSTGMedia(STG.RT.API.Document.STGDocument,System.Guid,System.Uri,System.Boolean)">
            <summary>
            Create a DTO for an STGMedia
            </summary>
            <param name="stgDocument">STG Document</param>
            <param name="mediaId">Media ID</param>
            <param name="baseUri">The base server URI for media download</param>
            <param name="full">If false only media ID and name is loaded</param>
            <returns>Media DTO</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CreateDtoForSTGPageLocation(STG.RT.API.Document.STGPageLocation,System.Guid)">
            <summary>
            Create a DTO for an STGMedia
            </summary>
            <param name="stgPageLocation">STG page location</param>
            <param name="pageId">Page ID</param>
            <returns>Page location DTO</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.SynchronizeDocument(STG.RT.API.Document.STGDocument,STG.Common.DTO.Document.DtoDocument)">
            <summary>
            Saves a modified document from DTO to STG
            </summary>
            <param name="stgDocument">STG document</param>
            <param name="dtoDocument">DTO document</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CreateDocument(STG.Common.DTO.Document.DtoDocument,STG.Common.DTO.DtoWorkItemData,System.Collections.Generic.IDictionary{System.Guid,System.IO.Stream})">
            <summary>
            Creates a STG document from a DTO document
            </summary>
            <param name="dtoDocument">DTO document that will be converted to STG Document</param>
            <param name="dtoWorkItemData">Work item that will hold the STG document</param>
            <param name="mediaDictionary">List of media that will be added to the STG Document</param>
            <returns>New STG document</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.synchronizeFields(STG.RT.API.Document.STGDocument,STG.Common.DTO.Document.DtoDocument)">
            <summary>
            Saves modified DTO fields back into an STGDocument.
            For failed updates it fills the FailedConvertedValueUpdates list in the DTO document
            </summary>
            <param name="stgDocument">STG document</param>
            <param name="dtoDocument">DTO document</param>
            <returns>Number of failed updates</returns>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.synchronizeField(STG.Common.DTO.Document.DtoField,STG.RT.API.Document.STGField)">
            <summary>
            Save a single modified field back to the STGField
            </summary>
            <param name="dtoField">DTO field</param>
            <param name="stgField">STG field</param>
            <returns>True if update was successful</returns>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.SynchronizeTable(STG.Common.DTO.Document.DtoTable,STG.RT.API.Document.STGDocument)">
            <summary>
            Saves a modified DTO table back into a document
            </summary>
            <param name="dtoTable">DTO table</param>
            <param name="stgDocument">STG document</param>
            <returns>The list of failed cell's custom value updates</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.GetTableDtos(System.String,STG.Common.DTO.DtoDocumentData,STG.RT.API.Document.STGDocument,System.Boolean)">
            <summary>
            Create DTO objects representing a table or tables in a document
            </summary>
            <param name="tableName">Null means all tables, any other string will load only that table</param>
            <param name="docData">Document's data</param>
            <param name="stgDocument">STG Document</param>
            <param name="full">If true everything is loaded, even extensions</param>
            <returns>List of table DTOs</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.GetChildIdFromPath(System.String,System.Int32)">
            <summary>
            Reads the ID of a child without loading it
            </summary>
            <param name="externalPath">The path that would be loaded when loading the STGModelObject</param>
            <param name="index">Index for the path parsing: 2 for documents</param>
            <returns>Child's ID</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.DocumentConverting.CompareWorkItemData(STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentData)">
            <summary>
            CompareWorkItemData method
            </summary>
            <param name="workItemData">Work item data</param>
            <param name="docData">Document's data</param>
            <returns>True or false if the parameters match or not</returns>
        </member>
        <member name="T:STG.RT.API.Document.STGMediaBuilder">
            <summary>
            Mediabuilder 
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.DeleteFileAfterUse">
            <summary>
            If this is called, the file will be deleted after it has been read.
            </summary>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.Finish">
            <summary>
            Create the STGMedia with the given configuration
            </summary>
            <returns>The created new STGMedia object.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.ReleaseStreamOwnership">
            <summary>
            Let the STGMediaFactory take over the ownership of the stream.
            </summary>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.UseCopyOfStream">
            <summary>
            This will copy the provided stream to memory.
            </summary>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.WithFile(System.String)">
            <summary>
            Use a file to create the STGMedia.
            </summary>
            <param name="filename">The filename to use for the media.</param>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.WithStream(System.IO.Stream)">
            <summary>
            Set the stream to be used for this media.
            </summary>
            <param name="stream">The stream handle</param>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaBuilder.CreateMedia(System.String,System.String,STG.Common.DTO.DtoMediaType)">
            <summary>
            Builder method to create a new STGMedia. Call Finish() when you are done.
            </summary>
            <param name="name">Name of the STGMedia</param>
            <param name="extension">The extension of the media (only used if a filename is provided)</param>
            <param name="mediaType">The type of the media.</param>
            <returns>The STGMediaBuilder object from which this method was called.</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGMediaTypeService">
            <summary>
            Media Type factory
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaTypeService.GetMediaType(System.String)">
            <summary>
            Gets the media type for provided name
            </summary>
            <param name="mediaTypeName">Name of the media type to get</param>
            <returns>Media type with provided name or null if none found</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaTypeService.LoadAvailableMediaTypes">
            <summary>
            Loads available media types
            </summary>
            <returns>Collection of available media types</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaTypeService.LoadSystemMediaTypes">
            <summary>
            Loads system media types
            </summary>
            <returns>Collection of system media types</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMediaTypeService.Dispose">
            <summary>
            Disposes the object
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Helper.STGCustomValueHolder">
            <summary>
            Abstract class for extending object with custom values
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGCustomExtension">
            <summary>
            This class represents a custom extension that an integrator can implement on document, field or table object.
            The custom location can be used to extend the document model with custom implemented method and properties not provided by the STGDocument object.
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.Model.ModelObject">
            <summary>
            defines the Model Object
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.Model.PropertyBucket">
            <summary>
            property bucket
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.PerformDelayedLoad">
            <summary>
            A derived class implements this for the case when this object has not been loaded upfront
            The first property access will load the object in that case.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.PropertyLoaded(System.String)">
            <summary>
            happens after delay load of the property
            </summary>
            <param name="propertyName"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.OnModification(System.String,System.Object,STG.RT.API.Document.Model.ModificationType,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValueNew"></param>
            <param name="modificationType"></param>
            <param name="propertyValueOld"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.GetValue``1(System.String)">
            <summary>
            Gets the value of a property matching the given name.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="propertyName">The expression pointing to the property.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.GetIsLoaded(System.String)">
            <summary>
            checks if the model is loaded
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.GetTag``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            reads the tag for the specified expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameExpression"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.SetTag``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            overwrites the tag for the specified expression
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameExpression"></param>
            <param name="value"></param>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.RemoveValue(System.String)">
            <summary>
            Removes a property item from the property bucket and returns true if it was existing at all
            </summary>
            <param name="key"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.SetValueNoNotify``1(System.String,``0)">
            <summary>
            Sets the value of a property matching the string and returns if the property has been changed.
            No modification notifications are raised.
            </summary>
            <param name="propertyName">The string tells the name of the property</param>
            <param name="value">The value to set.</param>
            <returns>True if the value changed, false if not</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.AfterValueChanged(System.String)">
            <summary>
            Happens after a property is changed
            </summary>
            <param name="propertyName">Name of property</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.SetValue``1(System.String,``0)">
            <summary>
            Sets the value of a property matching the string and returns if the property has been changed.
            </summary>
            <param name="propertyName">The string tells the name of the property.</param>
            <param name="value">The value to set.</param>
            <returns>True if the value changed, false if not</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.TryFindConverterAttribute(System.Object,System.String)">
            <summary>
            finds the converter attribute
            </summary>
            <param name="obj"></param>
            <param name="prop"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.getName``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Gets the name of the expression.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="extension">The name expression.</param>
            <returns>The name of the expression.</returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.#ctor">
            <summary>
            constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.Item(System.String)">
            <summary>
            
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.PropertyBucket.PropertyItem">
            <summary>
            Class wrapping up the essential parts of a property.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Reset">
            <summary>
            Clears the value and sets loaded delay loaded properties back to be loaded
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Type">
            <summary>
            Gets or type the value.
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.IsDelayed">
            <summary>
            If the property should be loaded on demand
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.LoadAction">
            <summary>
            How to load on demand (delayed)
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Converter">
            <summary>
            converter to use when storing and reading back this property
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.Tag">
            <summary>
            value to be used by users of the property bucket
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.PropertyBucket.PropertyItem.DelayLoadPerformed">
            <summary>
            If it has been loaded when being delay loaded
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.Model.IModificationSubject">
            <summary>
            modification subject interface
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IModificationSubject.AddModificationListener(STG.RT.API.Document.Model.IModificationListener)">
            <summary>
            adds the modification listener
            </summary>
            <param name="listener"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IModificationSubject.RemoveModificationListener(STG.RT.API.Document.Model.IModificationListener)">
            <summary>
            remove the modification listener
            </summary>
            <param name="listener"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.IStoreable">
            <summary>
            defines the Storable interface
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStoreable.GetStorageTag">
            <summary>
            returns the storage tag
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.IModificationListener">
            <summary>
            defines the modification listener for modification tracking
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IModificationListener.NotifyModification(STG.RT.API.Document.Model.IModificationSubject,System.String,System.Object)">
            <summary>
            notifies modification on object
            </summary>
            <param name="subject"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.BeforeDeserialization">
            <summary>
            method triggered Before De-serialization 
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.AfterDeserialization">
            <summary>
            method triggered after De-serialization 
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.BeforeSerialization">
            <summary>
            method triggered Before serialization 
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.AfterSerialization">
            <summary>
            method triggered after serialization 
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.ToString">
            <summary>
            
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.TrackModifications(STG.RT.API.Document.Model.IModificationSubject)">
            <summary>
            Attaches a modification listener to a modification subject
            </summary>
            <param name="subject">Subject to which the listener is to be attached to</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.StopTrackingModifications(STG.RT.API.Document.Model.IModificationSubject)">
            <summary>
            Detaches a modification listener to a modification subject
            </summary>
            <param name="subject">Subject to which the listener is to be attached to</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.TrackModifications(System.Collections.Generic.IEnumerable{STG.RT.API.Document.Model.IModificationSubject})">
            <summary>
            Attaches a modification listener to a list of modification subjects that will notify him of changes
            </summary>
            <param name="subjects">Subjects to which the listener is to be attached to</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.StopTrackingModifications(System.Collections.Generic.IEnumerable{STG.RT.API.Document.Model.IModificationSubject})">
            <summary>
            Detaches the listener from a collection of subjects that were notifying it of changes
            </summary>
            <param name="subjects">List of modification subjects</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.LoadFromFile``1(System.String,STG.RT.API.Document.Model.ModelObjectSerializer{``0})">
            <summary>
            loads the object model from file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="serializer"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.LoadFromStream``1(System.IO.Stream,STG.RT.API.Document.Model.ModelObjectSerializer{``0})">
            <summary>
            loads the object model from stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="serializer"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.ReadXmlFromStream``1(System.IO.Stream,STG.RT.API.Document.Model.ModelObjectSerializer{``0},``0)">
            <summary>
            reads the XML model object from stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="serializer"></param>
            <param name="obj"></param>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.GetShortTypeString">
            <summary>
            String to store in the XML during serialization as the type of this object
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.PreloadTypes">
            <summary>
            pre-loads configured types
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.Load``1(STG.RT.API.Document.Model.IModelObjectSerializer)">
            <summary>
            loads the object model from serializer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializer"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.SaveWithSerializer(STG.RT.API.Document.Model.IModelObjectSerializer,System.Boolean)">
            <summary>
            saves the object model with serializer
            </summary>
            <param name="serializer"></param>
            <param name="persist"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.SaveToStream(System.IO.Stream,STG.RT.API.Document.Model.IStreamProvider)">
            <summary>
            saves the object model to stream
            </summary>
            <param name="stream"></param>
            <param name="streamProvider"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.SaveToLocalStream(STG.RT.API.Document.Model.ModelObject,System.IO.Stream)">
            <summary>
            saves the object model to stream
            </summary>
            <param name="obj"></param>
            <param name="stream"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.TypeFromCache(System.String)">
            <summary>
            returns the type from cached values
            </summary>
            <param name="type"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.OnModification(System.String,System.Object,STG.RT.API.Document.Model.ModificationType,System.Object)">
            <summary>
            notifies the modification on the model
            </summary>
            <param name="propertyName"></param>
            <param name="propertyValueNew"></param>
            <param name="modificationType"></param>
            <param name="propertyValueOld"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.GetStorageTag">
            <summary>
            returns the storage tag
            </summary>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.copyDelayLoadedProperties(STG.RT.API.Document.Model.PropertyBucket)">
            <summary>
            coppies all delay loaded properties from the source object
            </summary>
            <param name="sourceObject"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.PerformDelayedLoad">
            <summary>
            delay loads object model
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.#ctor">
            <summary>
            defines the Model Object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.NotifyModification(STG.RT.API.Document.Model.IModificationSubject,System.String,System.Object,STG.RT.API.Document.Model.ModificationType,System.Object)">
            <summary>
            notifies the modification on object model
            </summary>
            <param name="subject"></param>
            <param name="propertyName"></param>
            <param name="propertyValueNew"></param>
            <param name="modificationType"></param>
            <param name="propertyValueOld"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.InternalGetDocumentAudits(System.Guid)">
            <summary>
            Formats modifications for audit
            </summary>
            <param name="ownerDocumentID">The owner document's ID</param>
            <returns>List of formatted modifications</returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.StopModificationBubbling">
            <summary>
            Allows an object to stop bubbling modification status up
            </summary>
            <returns>true / false</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObject.RegisterType(System.String,System.Type)">
            <summary>
            Registers an a priory unknown object type to allow de-serialization of it from the type string provided
            </summary>
            <param name="shortname"></param>
            <param name="type"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.ModificationListeners">
            <summary>
            Modification listeners
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.Serializer">
            <summary>
            Serializer of this model object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.SaveInSeparateStream">
            <summary>
            If true the object when saved will ask for its own stream and not be included in the root XML stream
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.Version">
            <summary>
            The version of this model object or the set version of one of its parents. The version will not be passed down during serialization or deserialization but the XML version will be deduced from it and passed down.
            Which means reading the version of some child model object of this object will give what is set here. But it will not be saved for children, just read.
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.XmlVersion">
            <summary>
            Version of this model object when saving or reading to xml - will be passed to all children objects during serialization/deserialization
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.ModificationReasons">
            <summary>
            returns modifications on object model
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObject.HasModifications">
            <summary>
            checks if object model has modifications
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.#ctor">
            <summary>
            Creates a new instance of the custom extension class.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.GetExtensionData``1">
            <summary>
            Loads the custom extension object.
            </summary>
            <typeparam name="ExtensionType">Specifies the type of extension to load.</typeparam>
            <returns>Returns the extension object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.HasExtensionData``1">
            <summary>
            checks for existence of a specific extension
            </summary>
            <typeparam name="ExtensionType">Specifies the type of extension to load.</typeparam>
            <returns>Returns true if the extension object exists.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.RemoveExtensionData``1">
            <summary>
            Removes an extension from this object
            </summary>
            <typeparam name="ExtensionType">Type of extension</typeparam>
            <returns>True if the extension was removed, false if it was not found</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.ToString">
            <summary>
            Returns the string description of the current object.
            </summary>
            <returns>The string description of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.AddExtensionData``1(``0)">
            <summary>
            Stores the provided extension object.
            </summary>
            <typeparam name="ExtensionType">Represents the type of extension.</typeparam>
            <param name="extension">Specifies the extension object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.RemoveExtension(STG.RT.API.Document.STGExtensionStream)">
            <summary>
            Removes an extension from this object
            </summary>
            <param name="extension">Extension to remove</param>
            <returns>true if removed, false if the object did not contain it in the first place</returns>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.AfterSerialization">
            <summary>
            fired after a document is serialized
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomExtension.AfterDeserialization">
            <summary>
            occurs after de-serialization
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCustomExtension.extensions">
            <summary>
            The non read-only dictionary of fields (internal)
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGCustomExtension.SerializationType">
            <summary>
            Serialization type to be used for storing / loading extensions
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Helper.STGCustomValueHolder.AddCustomValue(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new custom value to the CustomValue list.
            If a value with a name does not exists, it is created.
            If a value with the specified name exists, 
            it is replaced with the provided value if failIfExist is false or 
            it throws an exception if a failIfExist is true.
            </summary>
            <param name="name">Defines a name of a custom value.</param>
            <param name="value">Defines the value for a custom value.</param>
            <param name="failIfExist">If true, an exception occurs when adding a value with a name that already exists.</param>
            <returns>Returns the added custom value object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Helper.STGCustomValueHolder.LoadCustomValue(System.String)">
            <summary>
            Loads a value of a custom value based on a provided name.
            </summary>
            <param name="name">Defines a name of a custom value to read.</param>
            <returns>Returns the value of a custom value.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Helper.STGCustomValueHolder.RemoveCustomValue(System.String)">
            <summary>
            Removes a custom value with as specified name.
            </summary>
            <param name="name">Represents a name of a custom value to remove.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Helper.STGCustomValueHolder.internalCustomValues">
            <summary>
            internal list of custom values
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Helper.STGCustomValueHolder.CustomValues">
            <summary>
            Gets a list of custom values stored with a current object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.TransactionalExecutorData">
            <summary>
            
            </summary>    
        </member>
        <member name="M:STG.RT.API.Document.TransactionalExecutorData.InitializeLifetimeService">
            <summary>
            
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.ActivityInstance">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.NextActivityInstance">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.WorkItem">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.DocumentStreams">
            <summary>
            Document streams
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.ModifiedStreams">
            <summary>
            Modified streams
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.Indexes">
            <summary>
            Document indexes
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.Names">
            <summary>
            Document names
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.Audits">
            <summary>
            Audits
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.TransactionalExecutorData.DeletedStreams">
            <summary>
            Streams that have been removed
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.DocumentRestServiceCommunicator.CollectsDocumentAudit(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            method for checking if the provided work item must collect document audit data
            </summary>
            <param name="workItem"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.Model.DocumentRestServiceCommunicator.LoadStream(System.String)">
            <summary>
            Loads document, document type or media data as stream from database
            </summary>
            <param name="storageTag">Formatted tag containing document, document type or media data</param>
            <returns>Document, document type or media data as stream</returns>
            <exception cref="T:System.ArgumentException">Thrown if no data is returned from Document Service</exception>
        </member>
        <member name="T:STG.RT.API.Document.Model.IStreamProvider">
            <summary>
            defines the stream provider
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.GetWriteStream(STG.RT.API.Document.Model.ModelObject)">
            <summary>
            returns the stream for writing
            </summary>
            <param name="model"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.GetWriteStream(System.String)">
            <summary>
            returns the stream for writing
            </summary>
            <param name="storageTag"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.GetReadStream(System.String,STG.Common.DTO.DtoDocumentLoadingConfiguration,STG.Common.DTO.DtoWorkItemData)">
            <summary>
            returns the saved stream
            </summary>
            <param name="storageTag"></param>
            <param name="docLoadingConfig"></param>
            <param name="workItemOwner"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.PerformCopy(System.String)">
            <summary>
            performs a copy of the object with the provided storage tag
            </summary>
            <param name="storageTag">Storage tag of the ModelObject to copy</param>
            <returns>copied model object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.PerformCopy(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            performs a copy of the objects with the provided storage tags
            </summary>
            <param name="destinationTag">tag of the destination object where to copy the provided medias</param>
            <param name="storageTags">Storage tags of the media ModelObjects to copy</param>
            <returns>DIctionary link of the original and copied media stream ID</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.RemoveStream(System.String)">
            <summary>
            removes the stream with the storage tag
            </summary>
            <param name="storageTag"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.Close">
            <summary>
            close the provider
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStreamProvider.UnloadCachedStream(System.IO.Stream)">
            <summary>
            Removes a stream from the provider and disposes it, freeing the memory it was using.
            This does not mark the stream for deletion.
            An unloaded stream will need to be loaded again from the server.
            </summary>
            <param name="documentStream">Stream to remove and dispose</param>
            <returns>True if the stream was found, false if not found</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStreamProvider.GetWorkItemData">
            <summary>
            Gets work item data for method GetReadStream if called from a class that has no knowledge of work item
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStreamProvider.StorageIdentifier">
            <summary>
            identifier of the storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStreamProvider.KeepAlive">
            <summary>
            should the provider stay alive
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStreamProvider.TransactionalSettings">
            <summary>
            Flag determines will the streams be sent to DB
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.GiuliaMemoryStreamProvider.UnloadCachedStream(System.IO.Stream)">
            <summary>
            Removes a stream from the provider and disposes it
            </summary>
            <param name="documentStream">Stream to remove and dispose</param>
            <returns>True if the stream was found, false if not found</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.GiuliaMemoryStreamProvider.RemoveStream(System.String)">
            <summary>
            marks the stream with provided tag to be deleted 
            </summary>
            <param name="storageTag"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.GiuliaMemoryStreamProvider.MarkStreamAsModified(System.String)">
            <summary>
            marks the stream with provided tag as modified
            </summary>
            <param name="streamTag"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.GiuliaMemoryStreamProvider.GetWorkItemData">
            <summary>
            Gets work item data for method GetReadStream if called from a class that has no knowledge of work item
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.GiuliaMemoryStreamProvider.TransactionalSettings">
            <summary>
            Should streams be persisted in database
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.TransactionalFlags">
            <summary>
            Transactional flags
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.TransactionalFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.TransactionalFlags.Dispose">
            <summary>
            Dispose saved streams
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.TransactionalFlags.Save">
            <summary>
            Save modified streams
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.TransactionalFlags.SkipReloadAfterSave">
            <summary>
            Should document reload after save
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.Model.IStorageValueConverter">
            <summary>
            defines storage value converter
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStorageValueConverter.SaveToStorage(System.Object,System.String,STG.RT.API.Document.Model.IStreamProvider,System.Boolean)">
            <summary>
            save the object model to storage
            </summary>
            <param name="obj"></param>
            <param name="path"></param>
            <param name="streamProvider"></param>
            <param name="dontGenerateGuidButOverwrite"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStorageValueConverter.ReadFromStorage(System.String,STG.RT.API.Document.Model.IStreamProvider)">
            <summary>
            read the object model into storage
            </summary>
            <param name="path"></param>
            <param name="streamProvider"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStorageValueConverter.SaveToXmlWriter(System.Object,System.Xml.XmlWriter)">
            <summary>
            save the object model to XML reader
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.IStorageValueConverter.ReadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            read the object model from XML reader
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.VersionIntroduced">
            <summary>
            If the document was loaded from xml in a version prior to the version the converter was introduced then it will not be used at all
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.Serializer">
            <summary>
            model object serializer
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.IsBinary">
            <summary>
            is the model object in binary stream
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.IsDelayed">
            <summary>
            should be delay-loaded
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.IsExternal">
            <summary>
            is model object external
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IStorageValueConverter.PropertyIdentifer">
            <summary>
            Identifier if the external storage tag
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.StorageConverterAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.StorageConverterAttribute.#ctor(System.Type)">
            <summary>
            constructor
            </summary>
            <param name="valueConverterType"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.ValueConverterType">
            <summary>
            converter type
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.Converter">
            <summary>
            converter
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.IsBinary">
            <summary>
            is binary
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.IsExternal">
            <summary>
            is external
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.IsDelayed">
            <summary>
            should be delay-loaded
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.StorageConverterAttribute.PropertyIdentifer">
            <summary>
            Identifier if the external storage tag
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.MediaStorageValueConverter.PropertyIdentifer">
            <summary>
            Identifier if the external storage tag
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.MediaStorageValueConverter.VersionIntroduced">
            <summary>
            Used always
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.IModifieable">
            <summary>
            defines the interface for modification tracking
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModifieable.Modifications">
            <summary>
            collection of modifications
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModifieable.IsModified">
            <summary>
            flag defining if the object is modified
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.ModificationType">
            <summary>
            modification type enum
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.PropertyCreated">
            <summary>
            The property value is set for the first time
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.PropertyChanged">
            <summary>
            The property changed value
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.PropertyRemoved">
            <summary>
            The property value was removed
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.ItemAdded">
            <summary>
            Item was added to collection
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.ItemDeleted">
            <summary>
            Item was deleted from collection
            </summary>
        </member>
        <member name="F:STG.RT.API.Document.Model.ModificationType.ItemMoved">
            <summary>
            Item was moved inside the collection
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1">
            <summary>
            Converter used to store / load any ModelObject from an List
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.#ctor">
            <summary>
            default constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.ReadFromStorage(System.String,STG.RT.API.Document.Model.IStreamProvider)">
            <summary>
            Reads the object from storage
            </summary>
            <param name="path">Path of the stream</param>
            <param name="streamProvider">Stream provider used to fetch streams</param>
            <returns>De-serialized object instance</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.ReadFromStream(System.IO.Stream)">
            <summary>
            reads the list of objects from stream
            </summary>
            <param name="objectStream"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.SaveToStorage(System.Object,System.String,STG.RT.API.Document.Model.IStreamProvider,System.Boolean)">
            <summary>
            Save the object to the storage
            </summary>
            <param name="obj">Object to save</param>
            <param name="path">Path in the storage</param>
            <param name="streamProvider">stream provider to use to get streams</param>
            <param name="dontGenerateGuidButOverwrite">If false the existing stream will be overwritten, else a guid is appended</param>
            <returns>The actual path used to store the object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.SaveToXmlWriter(System.Object,System.Xml.XmlWriter)">
            <summary>
            Saves to an xml writer (if supported)
            </summary>
            <param name="obj">Object to save</param>
            <param name="writer">Writer to save to</param>
            <returns>null for external</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.ReadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Read from xml and creates the object
            </summary>
            <param name="reader">Reader to read</param>
            <returns>Created object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.IsBinary">
            <summary>
            True if the file format of this object serializes as binary
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.IsDelayed">
            <summary>
            True if the property should be De-serialized on first access
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.Serializer">
            <summary>
            Serializer which can be used by the converter if needed
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.PropertyIdentifer">
            <summary>
            Identifier if the external storage tag
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.IsExternal">
            <summary>
            True if the converter should save to xml readers / writers or to storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectListStorageValueConverter`1.VersionIntroduced">
            <summary>
            Used always
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.IModelObjectSerializer">
            <summary>
            defines the Model Object Serializer object
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.IModelObjectSerializer.Serialize(System.IO.Stream,STG.RT.API.Document.Model.ModelObject,System.Boolean)">
            <summary>
            performs serialization of the object
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="persist"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModelObjectSerializer.XmlVersion">
            <summary>
            Tells the xml serialization how to parse xml written in various other version
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModelObjectSerializer.KeepProviderAlive">
            <summary>
            should provider sty alive
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModelObjectSerializer.IsUpdating">
            <summary>
            is update ion progress
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.IModelObjectSerializer.StreamProvider">
            <summary>
            stream provider for accessing the object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.ModelObjectSerializer">
            <summary>
            defines the object model serializer abstract object
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer.#ctor(System.Type)">
            <summary>
            Object model serializer to be used
            </summary>
            <param name="t"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer.CreateFor(STG.RT.API.Document.Model.ModelObject,STG.RT.API.Document.Model.IStreamProvider)">
            <summary>
            create Model Object serializer for provided Model Object
            </summary>
            <param name="model"></param>
            <param name="streamProviderToUse"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer.CreateFor(STG.RT.API.Document.Model.ModelObject)">
            <summary>
            create Model Object serializer for provided Model Object
            </summary>
            <param name="model"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.ModelObjectSerializer`1">
            <summary>
            model object serializer implementation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.#ctor">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.#ctor(STG.RT.API.Document.Model.IStreamProvider)">
            <summary>
            returns the Model Object serializer
            </summary>
            <param name="streamProvider"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.Serialize(System.IO.Stream,STG.RT.API.Document.Model.ModelObject,System.Boolean)">
            <summary>
            serialize the stream
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <param name="persist"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.Serialize(System.IO.Stream,STG.RT.API.Document.Model.ModelObject)">
            <summary>
            serialize the stream
            </summary>
            <param name="s"></param>
            <param name="o"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.Model.ModelObjectSerializer`1.Dispose">
            <summary>
            Dispose objects before loosing scope
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectSerializer`1.IsUpdating">
            <summary>
            is update in progress
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectSerializer`1.StreamProvider">
            <summary>
            stream provider
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectSerializer`1.KeepProviderAlive">
            <summary>
            should the provider stay alive
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.ModelObjectSerializer`1.XmlVersion">
            <summary>
            Tells the xml serialization how to parse xml written in various other version
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.Modification">
            <summary>
            Model Object modification data
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.Modification.#ctor">
            <summary>
            Constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.Subject">
            <summary>
            The subject of the modification
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.PropertyName">
            <summary>
            The name of the property on which the modification was made
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.OriginalValue">
            <summary>
            The original values of the property
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.PropertyValue">
            <summary>
            The new values of the property after the modification was made
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.Type">
            <summary>
            The type of modification that was made
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.TimeStamp">
            <summary>
            Time when the modification was made
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.HasListener">
            <summary>
            Does the object have a listener
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.ModificationValueText">
            <summary>
            Gets the description of the modification value
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.Model.Modification.ModificationTypeText">
            <summary>
            The type of modification that was made
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.Model.ReadOnceStream">
            <summary>
            Internal class for delay loading of streams
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.Model.ReadOnceStream.DisposeInnerStream">
            <summary>
            
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.STGLocation">
            <summary>
            Abstraction layer to unify specific location implementation.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGLocation.#ctor">
            <summary>
            default constructor. Required for XML serialization, Do not use this one.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGLocation.#ctor(System.Guid)">
            <summary>
            default base constructor for assigning media ID
            </summary>
            <param name="mediaId">ID of the media containing the current location object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGLocation.getOwnerField">
            <summary>
            Gets the owner field's name
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGLocation.MediaId">
            <summary>
            reference to the media identifier attached to the current location
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGPageLocation">
            <summary>
            defines the abstract class for the location of the page within the provided media
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGPageLocation.#ctor">
            <summary>
            default constructor. Required for XML serialization, Do not use this one.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPageLocation.#ctor(System.Guid)">
            <summary>
            default base constructor for assigning media ID
            </summary>
            <param name="mediaId">ID of the media containing the current location object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPageLocation.owner">
            <summary>
            Page owner of the current media
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGPageLocation.MediaId">
            <summary>
            reference to the media identifier attached to the current location
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPageLocation.Media">
            <summary>
            Gets the media from the location
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGCell">
            <summary>
            This class provides representation of the table cell.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.#ctor">
            <summary>
            Creates a new instance of the STGCell object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.#ctor(STG.RT.API.Document.STGColumnDefinition,STG.RT.API.Document.STGRow)">
            <summary>
            constructor accepting the column definition
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.GetConvertedValue``1">
            <summary>
            Loads the value of the cell as a provided type.
            If the provided type does not match the cell data type defined in a cell definition the method fails.
            </summary>
            <typeparam name="T">Defines type to return.</typeparam>
            <returns>Returns the value of the cell as specified type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.SetConvertedValue``1(``0)">
            <summary>
            Sets the value of the cell as specified type.
            If type does not match the FieldType the method fails.
            </summary>
            <typeparam name="T">Defines a cell Type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.GetCellType">
            <summary>
            Returns a type of the cell based on the definition
            </summary>
            <returns>Type of data contained in the cell</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.getOwnerRow">
            <summary>
            Gets the owner field's name
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGCell.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.ColumnName">
            <summary>
            Represents a name of the column.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.Row">
            <summary>
            Represents a table row the cell belongs to.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.CapturedValue">
            <summary>
             Represents a value of the cell captured from a document.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.CellValue">
            <summary>
            Gets a value object of the current cell
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.ConvertedValue">
            <summary>
            Represents converted cell value. 
            It is up to the integrator to cast the value into a proper data type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.IsConverted">
            <summary>
            Returns true, if the captured value is converted to a proper data type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.IsValid">
            <summary>
            Gets or sets a flag that allows activities to mark the cell as valid or invalid.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.Confidence">
            <summary>
            Gets or set the cell confidence.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.CellType">
            <summary>
            Gets the data type of a cell.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCell.Location">
            <summary>
            Gets the cell location on a document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGExtensionStream">
            <summary>
            This class represents a custom extension that an integrator can implement on document, field or table object.
            The custom location can be used to extend the document model with custom implemented method and properties not provided by the STGDocument object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGExtensionStream.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.ID">
            <summary>
            ID of the extension
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.ExtensionTypeName">
            <summary>
            name of the extension
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.ExtensionTypeQualifiedName">
            <summary>
            qualified name of the extension
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.ExtensionObject">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.ExtensionStream">
            <summary>
            Stream of the extension
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.SerializationType">
            <summary>
            Serialization type to be used for storing / loading extensions
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionStream.IsModified">
            <summary>
            Gets or sets the value if the document is modified.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGCustomValue">
            <summary>
            Defines a custom value storage in a key-value format.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGCustomValue.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCustomValue.Key">
            <summary>
            Gets the value of a custom value key.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGCustomValue.Value">
            <summary>
            Gets or sets the value of the custom value.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGFieldDefinition">
            <summary>
            Defines a field definition.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGFieldDefinition.#ctor">
            <summary>
            Creates an empty field definition object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGFieldDefinition.#ctor(System.String,STG.Common.DTO.DtoSTGDataType,System.Boolean)">
            <summary>
            Creates a field definition with name and type.
            </summary>
            <param name="name">Specifies the field name.</param>
            <param name="type">Defines the data type of a field.</param>
            <param name="isIndexed">Optional parameter setting the index filed as indexed (default = false)</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGFieldDefinition.FieldName">
            <summary>
            Gets the name of the field.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGFieldDefinition.IsIndexed">
            <summary>
            Notifies if the index field should be indexed or not
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGFieldDefinition.DocumentTypeOwner">
            <summary>
            Gets the document type owning the field definition.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGFieldDefinition.FieldType">
            <summary>
            Gets a data type of a field.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTableDefinition">
            <summary>
            Defines the table definition.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTableDefinition.#ctor">
            <summary>
            Creates an empty table definition object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTableDefinition.#ctor(System.String)">
            <summary>
            Defines a table definition with a provided table name.
            </summary>
            <param name="tableName">Specifies a table name.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTableDefinition.AppendColumnDefinition(System.String,STG.Common.DTO.DtoSTGDataType)">
            <summary>
            Adds a new column definition.
            </summary>
            <param name="columnName">Represents the name of the column.</param>
            <param name="columnDataType">Represents a data type of the column.</param>
            <returns>Returns the table definition object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTableDefinition.AppendColumnDefinition(STG.RT.API.Document.STGColumnDefinition)">
            <summary>
            Adds a new column definition.
            </summary>
            <param name="columnToAdd">Represents a column definition object to add.</param>
            <returns>Returns the table definition object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTableDefinition.isTableDefinitionEqual(STG.RT.API.Document.STGTableDefinition)">
            <summary>
            Checks if two table definitions are equal.
            </summary>
            <param name="other">The other table definition to check equality</param>
            <returns>True if the two table definitions are equal</returns>
        </member>
        <member name="P:STG.RT.API.Document.STGTableDefinition.TableName">
             <summary>
            Gets the name of the table.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTableDefinition.DocumentTypeOwner">
            <summary>
            Gets the document type owning this table definition.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTableDefinition.internalColumnDefinitions">
            <summary>
            list of column definitions
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGTableDefinition.ColumnDefinitions">
            <summary>
            Gets a read-only collection of column definitions for the current table.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGColumnDefinition">
            <summary>
            Represents the table column object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGColumnDefinition.#ctor">
            <summary>
            Creates an empty column definition object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGColumnDefinition.#ctor(System.String,STG.Common.DTO.DtoSTGDataType)">
            <summary>
            Creates a column definition object with specified name of a specified data type.
            </summary>
            <param name="columnName">Specifies the name of the column.</param>
            <param name="dataType">Specifies the data type of the column.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGColumnDefinition.ColumnType">
            <summary>
            Gets the data type of the column.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGColumnDefinition.Name">
            <summary>
            Gets the column name.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.NamespaceDoc">
            <summary>
            The STG.RT.API.Document namespace contains classes for representing and manipulating with the documents been processed.
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.STGDocument">
             <summary>
            Defines a Document object.
             </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.#ctor(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Creates a new instance of a document item assigned to a specified work item.
            Use this constructor for creation of root documents. 
            For creation of the child documents may use the parameterless constructor.
            </summary>
            <param name="workItem">Represents the work item of the root document to initialize.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.#ctor">
            <summary>
            Creates a new instance of a child document object.
            Do not use this constructor for root document creation.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Initialize(System.String)">
            <summary>
            Constructs the document structure by adding the index fields and tables based on a definition provided in document type.
            </summary>
            <param name="docTypeName">Represents the document type name to be used for constructing document.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MergeChildWorkItems">
            <summary>
            Merges the child work items with the work item of the current document.
            All the documents assigned to the child work item(s) are appended to the current document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CreateWorkItemsForChildren(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Splits the current document by removing the child documents from the provided list 
            and assigning them to a new work items.
            </summary>
            <param name="childDocumentIds">List of child document IDs to remove.</param>
            <returns>Returns a list of newly-created work items that contain the splitted documents.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CopyForProcess(System.String)">
            <summary>
            Copies the current document to the specified processID by creating a work item in progress for the external starter activity.
            </summary>
            <param name="processType">Process type identifier of the process where to copy the document.</param>
            <returns>Returns the work item of the copied document.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CopyChildDocument(System.Int32)">
            <summary>
            Copies of the child document from the specified index and appends its copy as the last child document.
            </summary>
            <param name="childDocumentIndex">Specifies the index of the child document to copy.</param>
            <returns>Returns the copied document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentToAdd cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position in invalid range.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CopyChildDocument(STG.RT.API.Document.STGDocument)">
            <summary>
            Copies of the provided child document and appends its copy as the last child document.
            </summary>
            <param name="childDocument">Specifies the child document to copy.</param>
            <returns>Returns the copied document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">Only owning child documents can be copied.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CopyDocument">
            <summary>
            Copies of the current document and appends the copy as the last child document of owner document.
            </summary>
            <returns>Copied document</returns>
            <exception cref="T:System.InvalidOperationException">Only child documents can be copied</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.RemoveFromParent">
            <summary>
            removes the document from it's parent
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Initialize(STG.RT.API.Document.STGDocumentType)">
            <summary>
            Constructs the document structure by adding the index fields and tables based on a definition provided in document type.
            </summary>
            <param name="docType">Represents the document type for constructing the document.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.ChangeDocumentType(System.String,System.Boolean)">
            <summary>
            Changes the document type.
            </summary>
            <param name="docType">Defines the name of the new document type</param>
            <param name="preserveData">Set it to true, if values need to be preserved when changing the document type.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.PerformDelayedLoad">
            <summary>
            performs a delay load of the model object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.PropertyLoaded(System.String)">
            <summary>
            fired after a property has been loaded
            </summary>
            <param name="propertyName"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AssignFieldValueAsCapturedValue">
            <summary>
            This method assigns a field/cell text value as a captured value for all fields and cells on the current document
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.LoadDocTypeByName(System.String)">
            <summary>
            Loads a document type definition for a provided document type name.
            </summary>
            <param name="docTypeName">Specifies the document type name.</param>
            <returns>Returns the document type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.StopModificationBubbling">
            <summary>
            Allows an object to stop bubbling modification status up.
            </summary>
            <returns>Returns true or false.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AfterSerialization">
            <summary>
            fired after a document is serialized
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.PreloadTypes">
            <summary>
            preload types and register short extension names
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AppendPage(STG.RT.API.Document.STGPage)">
            <summary>
            Appends a page as the last page of a current document.
            </summary>
            <param name="pageToAdd">Specifies a page to add.</param>
            <returns>Returns the appended page.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter pageToInsert cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified page is already assigned to a current document.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.InsertPage(STG.RT.API.Document.STGPage,System.Int32)">
            <summary>
            Inserts the provided page to a specified position in the document pages.
            </summary>
            <param name="pageToInsert">Specifies a page to insert.</param>
            <param name="position">Defines a position in the pages list where to insert a page.</param>
            <returns>Returns the inserted page object.</returns>
            <exception cref="T:System.ArgumentNullException">he value for parameter pageToInsert cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified page is already assigned to a current document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is in invalid range.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves the page with on the specified index to the specified location.
            </summary>
            <param name="oldIndex">Specifies the old location of the page inside the document.</param>
            <param name="newIndex">Specifies the new location of the page inside the document.</param>
            <returns>Moved page.</returns>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move a page not attached to a document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The value for newIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The value for oldIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.InvalidOperationException">The page should not have media attached that are attached to other pages already.</exception>
            <example>
            <code>
            STGDocument doc = STGDocument.Load(workItem);
            //creates 3 new pages
            doc.AppendPage(new STGPage());
            doc.AppendPage(new STGPage());
            doc.AppendPage(new STGPage());
            //Moves the last page to first position
            doc.MovePage(2, 0);
            </code>
            </example>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.CopyPage(System.Int32,System.Boolean)">
            <summary>
            Copies the page on the specified index, and appends a copy as the last page of the current document.
            </summary>
            <param name="pageIndex">Specifies the index of the page to be copied.</param>
            <param name="copyMedia">Defines if the media should be copied as well. 
            The parameter is optional and the default is true.</param>
            <returns>Returns the copied page.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MovePageTo(STG.RT.API.Document.STGDocument,System.Int32,System.Int32)">
            <summary>
            Moves the page with specified index to a specified document on a specified index.
            </summary>
            <param name="destinationDocument">Specifies destination document.</param>
            <param name="sourceIndex">Defines page source index.</param>
            <param name="destinationIndex">Defines page destination index.</param>
            <returns>Returns the moved page.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AppendMedia(STG.RT.API.Document.STGMedia)">
            <summary>
            Adds a provided media to the current document.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.InsertChildDocument(STG.RT.API.Document.STGDocument,System.Int32)">
            <summary>
            Inserts a provided document on a child document on a provided position.
            </summary>
            <param name="documentToAdd">Specifies a child document to insert.</param>
            <param name="position">Defines the position where to insert a child document.</param>
            <returns>Returns the inserted child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified document is already a child of a current document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The position is in invalid range.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.AppendChild(STG.RT.API.Document.STGDocument)">
            <summary>
            Appends a provided document as a last child of the current document.
            </summary>
            <param name="documentToAdd">Specifies a child document to append.</param>
            <returns>Returns the appended child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for documentToAdd cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The specified document is already a child of a current document.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MoveChildDocumentTo(STG.RT.API.Document.STGDocument,STG.RT.API.Document.STGDocument,System.Int32)">
            <summary>
            Moves the provided child document as the child of the destination document on the destination index.
            </summary>
            <param name="childToMove">Specifies the child document to be moved.</param>
            <param name="destinationDocument">Specifies the destination document where to move.</param>
            <param name="destinationIndex">Defines the index in destination document where to move.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter childToMove cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter destinationDocument cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The destination index is in invalid range.</exception>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move document in a destination in a child level.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MoveChildDocumentTo(System.Int32,STG.RT.API.Document.STGDocument,System.Int32)">
            <summary>
            Moves the child document from provided index as the child of the destination document on the destination index.
            </summary>
            <param name="childIndexToMove">Specifies the index of the child document to be moved.</param>
            <param name="destinationDocument">Specifies the destination document where to move.</param>
            <param name="destinationIndex">Defines the index in destination document where to move.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter destinationDocument cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">the destination index is in invalid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The child index is in invalid range.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MoveDocument(System.Int32)">
            <summary>
            Moves the current document to a destination index in the parent document child collection.
            </summary>
            <param name="destinationIndex">Specifies a destination index in a <see cref="P:STG.RT.API.Document.STGDocument.ChildDocuments"/> list of the <see cref="P:STG.RT.API.Document.STGDocument.ParentDocument"/> where to move.</param>
            <exception cref="T:System.InvalidOperationException">Documents can be moved only in parent document.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Destination index is in invalid range or equals to source index.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.MoveChildDocument(System.Int32,System.Int32)">
            <summary>
            Moves the child document from source index to a destination index.
            </summary>
            <param name="sourceIndex">Specifies a index of a child document you want to move in a <see cref="P:STG.RT.API.Document.STGDocument.ChildDocuments"/> list.</param>
            <param name="destinationIndex">Specifies a destination index in a <see cref="P:STG.RT.API.Document.STGDocument.ChildDocuments"/> list where to move a child document.</param>
            <returns>Returns the moved child document.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The source index is in invalid range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The destination index is in invalid range or equals to source index.</exception>
            <exception cref="T:System.InvalidOperationException">The MoveChild method can be executed only on documents that have child documents.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.DeleteChildDocument(STG.RT.API.Document.STGDocument)">
            <summary>
            Deletes the provided child document and all its references from the system.
            </summary>
            <param name="childDocumentToDelete">Specifies child document to delete.</param>
            <exception cref="T:System.ArgumentNullException">The value for parameter childDocumentToDelete cannot be null.</exception>
            <exception cref="T:System.InvalidOperationException">The child document to delete must be a child of the current document.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.DeleteChildDocument(System.Int32)">
            <summary>
            Deletes the child document at provided index and all its references from the system.
            </summary>
            <param name="childDocumentIndex">Specifies the index of a child document to delete.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The childDocumentIndex is in invalid range.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.DeleteDocument">
            <summary>
            Deletes the current document and all its references from the system.
            </summary>
            <exception cref="T:System.InvalidOperationException">The root document cannot be deleted.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.DeletePage(System.Int32)">
            <summary>
            Deletes the page with the specified index in page collection.
            </summary>
            <param name="pageIndex">Specifies index of the page to delete.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.RemoveMedia(System.Guid)">
            <summary>
            Deletes the media with the specified identifier.
            </summary>
            <param name="mediaId">Specifies identifier of the media to delete.</param>
            <exception cref="T:System.ArgumentException">The current document does not contains the media with provided mediaId.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.RemoveMedia(STG.RT.API.Document.STGMedia)">
            <summary>
            Deletes the media with the specified identifier.
            </summary>
            <param name="media">Specifies the media to delete.</param>
            <exception cref="T:System.ArgumentNullException">The provided media can't be null.</exception>
            <exception cref="T:System.ArgumentException">The current document does not contains the provided media.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Save">
            <summary>
            Saves the full document structure.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Save(System.Boolean)">
            <summary>
            Saves the full document structure.
            </summary>
            <param name="reloadIfRequired">Set false if the document should not reload itself after save - for performance optimizations if the object won't be accessed afterwards</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.InternalGetDocumentAudits(System.Guid)">
            <summary>
            Formats modifications for audit
            </summary>
            <param name="ownerDocumentID">The owner document's ID</param>
            <returns>List of formatted modifications</returns>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.GetDocumentAudits">
            <summary>
            Gets audits for current document
            </summary>
            <returns>List of all audit data for the current document</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Load(STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentLoadingConfiguration)">
            <summary>
            Loads the document with the specified loading configuration.
            </summary>
            <param name="workItem">Defines the work item.</param>
            <param name="docLoadingConfig">Defines the loading configuration (optional).</param>
            <returns>Returns the root document of the provided work item.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Load(STG.RT.API.Document.Model.IStreamProvider,STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentLoadingConfiguration)">
            <summary>
            Loading documents from another stream provider
            </summary>
            <param name="streamProvider"></param>
            <param name="workItem"></param>
            <param name="docLoadingConfig"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.fixExternalPath(System.String,System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            creates a new external path based on a copied media
            </summary>
            <param name="externalPath"></param>
            <param name="docId"></param>
            <param name="modifiedIds"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.Dispose">
            <summary>
            Disposes a document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocument.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.DocumentIndex">
            <summary>
            holds the index of the current document
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.internalTables">
            <summary>
            object with list of tables on the document
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.internalFields">
            <summary>
            internal list of Fields
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.internalChildDocuments">
            <summary>
            internal list of child documents
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.internalMedia">
            <summary>
            internal list of media assigned to document
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.internalPages">
            <summary>
            internal list of document pages
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.DocumentType">
            <summary>
            Gets the document type name of the current document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.Name">
            <summary>
            Represents the name of the document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.ID">
            <summary>
            Gets a document identifier.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.IsValid">
            <summary>
            Gets or sets a flag that allows activities to mark the document as valid or invalid.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.WorkItem">
            <summary>
            Gets a work item containing the document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.ParentDocument">
            <summary>
            Represents a parent owner of the current document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.IndexFields">
            <summary>
            Defines a read-only list of index fields.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.IsModified">
            <summary>
            Gets or sets a flag for marking a document as modified.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.Modifications">
            <summary>
            Gets a dictionary that contains as key all the unique modifications that happened to this object. The value is the ModificationSubject (object where the modification happened).
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.Tables">
            <summary>
            Gets a list of tables of a current document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.ChildDocuments">
            <summary>
            Gets a list of child documents owed by a current document object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.Media">
             <summary>
            Gets a list of media owed by a current document.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.Pages">
            <summary>
            Gets the pages of a current document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocument.transactionalSettings">
            <summary>
            Document transactional flags
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.STGDocumentType">
            <summary>
            Represents the document type definition.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.#ctor">
            <summary>
            Creates an empty document type object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.PreloadTypes">
            <summary>
            preload types and register short extension names
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of a document type with the provided name for the provided process.
            </summary>
            <param name="docTypeName">Represents a name of a document type</param>
            <param name="processId">Defines a process identifier of a current document type</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.Save">
            <summary>
            Saves the document type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.Load(System.String,System.Int32,System.Int32)">
            <summary>
            Loads the document type based on specified name.
            </summary>
            <param name="documentTypeName">Represents the name of the document type to load.</param>
            <param name="processID">Represents the process ID of the document type.</param>
            <param name="storageID">The document storage identifier where the document is stored.</param>
            <returns>Returns the loaded document type object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.Load(System.String,System.Int32)">
            <summary>
            Loads the document type based on specified name.
            </summary>
            <param name="documentTypeName">Represents the name of the document type to load.</param>
            <param name="processID">Represents the process ID of the document type.</param>
            <returns>Returns the loaded document type object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.AppendFieldDefinition(STG.RT.API.Document.STGFieldDefinition)">
            <summary>
            Adds a provided field definition to a document type.
            </summary>
            <param name="fieldToAdd">Represents a field definition to add.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.AppendTableDefinition(STG.RT.API.Document.STGTableDefinition)">
            <summary>
            Adds a provided table definition to a document type.
            </summary>
            <param name="tableToAdd">Represents a table definition to add.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGDocumentType.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.DocumentTypeID">
            <summary>
            Represents an unique identifier of the current document type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.DocumentTypeName">
            <summary>
            Represents a name of the current document type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.ProcessID">
            <summary>
            Gets the process ID of the current document type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.storageID">
            <summary>
            Storage identifier
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.FieldDefinitions">
            <summary>
            Gets a list of field definitions.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.internalFieldDefinitions">
            <summary>
            list of field definitions assigned to a Document type
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.internalTableDefinitions">
            <summary>
            List of table definitions assigned to a document type
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGDocumentType.TableDefinitions">
            <summary>
            Gets the table definitions of a current document type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGExtensionBase">
            <summary>
            Base class for STGCustomExtension
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGExtensionBase.UseFileStreamStorage">
            <summary>
            Use FileStream for extension storage
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGField">
            <summary>
            Defines a field object of a document.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGField.#ctor">
            <summary>
            Creates a default (empty) instance of a field object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.#ctor(STG.RT.API.Document.STGDocument,STG.RT.API.Document.STGFieldDefinition)">
            <summary>
             Creates a new instance of a field object based on a provided document field definition and adds the field to a provided document.
            </summary>
            <param name="documentOwner">Defines a owner document of the current field.</param>
            <param name="definition">Represents a field definition of a current field.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.GetConvertedValue``1">
            <summary>
            Loads the value of the field as a provided type.
            If the provided type does not match the field data type provided in a field definition the method fails.
            </summary>
            <typeparam name="T">Defines the data type to return.</typeparam>
            <returns>Returns the value of the cell as specified data type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.SetConvertedValue``1(``0)">
            <summary>
            Sets the value of the field as specified data type.
            If type does not match the data type of the field the method fails.
            </summary>
            <typeparam name="T">Defines a field data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.GetFieldType">
            <summary>
            Returns a type of the field based on the definition
            </summary>
            <returns>Type of data contained in the field</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGField.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.FieldName">
            <summary>
            Gets the name of this field.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.FieldValue">
            <summary>
            Gets a value object of the current field
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.CapturedValue">
            <summary>
             Gets or sets the value of the field captured from a document.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.ConvertedValue">
            <summary>
            Gets or sets converted field value. 
            It is up to the integrator to cast the value into a proper data type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.IsConverted">
            <summary>
            Returns true, if the captured value is converted to a proper data type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.IsValid">
             <summary>
            Gets or sets a flag that allows activities to mark the field as valid or invalid.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.FieldType">
            <summary>
            Gets the data type of the field.
            </summary>
            <returns>The type of data in the field</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.Location">
            <summary>
            Gets the field location on a document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.IsIndexed">
            <summary>
            Gets the IsIndexed Flag for this index field.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.Document">
            <summary>
            Represents a owner document of the index field.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGField.Confidence">
            <summary>
            Gets or set the field confidence.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGImageBasedPageLocation">
            <summary>
            Defines an Image based location of the page within the provided media. 
            e.g. Which frame in a multi-tif or PDF media provides the image for this page
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedPageLocation.#ctor">
            <summary>
            default constructor. Required for XML serialization, Do not use this one.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedPageLocation.#ctor(System.Guid,System.Int32)">
            <summary>
            Creates a new instance of the ImageBased page location
            </summary>
            <param name="mediaID">Media identifier</param>
            <param name="mediaFrameIndex">Frame index of the page representation within the provided media.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedPageLocation.#ctor(System.Guid,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the ImageBased page location.
            </summary>
            <param name="mediaID">Media identifier.</param>
            <param name="mediaFrameIndex">Frame index of the page representation within the provided media.</param>
            <param name="xResolution">X resolution of the page.</param>
            <param name="yResolution">Y resolution of the page.</param>
            <param name="width">Width of the page in pixels with the corresponding resolution.</param>
            <param name="height">Height of the page in pixels with the corresponding resolution.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedPageLocation.MediaFrameIndex">
            <summary>
            Gets or sets the frame index of the page representation within the provided media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedPageLocation.XRes">
            <summary>
            X resolution of the page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedPageLocation.YRes">
            <summary>
            Y resolution of the page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedPageLocation.Width">
            <summary>
            Width of the page in pixels with the corresponding resolution.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedPageLocation.Height">
            <summary>
            Height of the page in pixels with the corresponding resolution.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTimeBasedPageLocation">
            <summary>
            Defines an time based location of the page within the provided media. 
            e.g. start time and duration of the page in a large audio/video media for the current page.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedPageLocation.#ctor">
            <summary>
            default constructor. Required for XML serialization, Do not use this one.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedPageLocation.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the TimeBased page location
            </summary>
            <param name="mediaId">ID of the media containing the current page.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedPageLocation.#ctor(System.Guid,System.TimeSpan,System.Int32)">
            <summary>
            Creates a new instance of the TimeBased page location
            </summary>
            <param name="mediaId">ID of the media containing the current page.</param>
            <param name="startTime">Sets the timespan in the media when the page starts.</param>
            <param name="duration">Sets the duration (in seconds) of the page.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTimeBasedPageLocation.StartTime">
            <summary>
            The timespan in the media when the page starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTimeBasedPageLocation.Duration">
            <summary>
            The duration (in seconds) of the page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTextBasedPageLocation">
            <summary>
            Defines an text based location of the page within the provided media. 
            e.g. start and end of the page text in a large text media for this page
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedPageLocation.#ctor">
            <summary>
            default constructor. Required for XML serialization, Do not use this one.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedPageLocation.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the TextBased page location
            </summary>
            <param name="mediaId">ID of the media containing the current page.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedPageLocation.#ctor(System.Guid,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the TextBased page location
            </summary>
            <param name="mediaId">ID of the media containing the current page.</param>
            <param name="anchor">Sets the anchor on the media where the page starts.</param>
            <param name="offset">Sets the location offset where the page starts.</param>
            <param name="length">Sets the page text length.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedPageLocation.Length">
            <summary>
            Gets or sets the page text length.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedPageLocation.Offset">
            <summary>
            The location offset where the page starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedPageLocation.Anchor">
            <summary>
            The anchor on the media where the page starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTimeBasedLocation">
            <summary>
            Defines the time-based location object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedLocation.#ctor">
            <summary>
            Creates a new instance of the time based location object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedLocation.#ctor(System.Guid)">
            <summary>
            Creates a new instance of the time based location object assigned to the provided media.
            </summary>
            <param name="mediaId"></param>
        </member>
        <member name="M:STG.RT.API.Document.STGTimeBasedLocation.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTimeBasedLocation.StartTime">
            <summary>
            Gets or sets the timespan when the location starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTimeBasedLocation.Duration">
            <summary>
            Gets the location duration.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTextBasedLocation">
            <summary>
            Represents a text-based location object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedLocation.#ctor">
            <summary>
            Creates a new instance of the text based location.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedLocation.#ctor(System.Guid)">
            <summary>
            default constructor assigning text location to provided media
            </summary>
            <param name="mediaId">ID of the media containing the current location object.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTextBasedLocation.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedLocation.Length">
            <summary>
            Gets or sets the location length.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedLocation.Offset">
            <summary>
            Gets the location offset where object starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTextBasedLocation.Anchor">
            <summary>
            Gets the anchor on the document where the location starts.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGImageBasedLocation">
            <summary>
            Defines an image based location object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor">
            <summary>
            Creates a new instance of an image based location object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of an image based location object with coordinates, page number and resolution.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageNr">1-based page number of the media location.</param>
            <param name="top">Top coordinate of the media location.</param>
            <param name="left">Left coordinate of the media location.</param>
            <param name="width">Width of the media location.</param>
            <param name="height">Height of the media location.</param>
            <param name="xRes">X Resolution of the zone.</param>
            <param name="yRes">Y Resolution of the zone.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of an image based location object with coordinates and page number.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageNr">1-based page number of the media location.</param>
            <param name="top">Top coordinate of the media location.</param>
            <param name="left">Left coordinate of the media location.</param>
            <param name="width">Width of the media location.</param>
            <param name="height">Height of the media location.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,STG.RT.API.Document.STGRectangle,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of an image based location object with coordinates, page index and resolution.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageIndex">0 - based page index of the media location.</param>
            <param name="coordinates">Coordinates of the media location.</param>
            <param name="xRes">X Resolution of the zone.</param>
            <param name="yRes">Y Resolution of the zone.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,System.Collections.Generic.List{STG.RT.API.Document.STGRectangle},System.Int32,System.Int32)">
            <summary>
            Creates a new instance of an image based location object with all coordinates, page index and resolution.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageIndex">0 - based page index of the media location.</param>
            <param name="allCoordinates">All coordinates of the media location.</param>
            <param name="xRes">X Resolution of the zone.</param>
            <param name="yRes">Y Resolution of the zone.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,STG.RT.API.Document.STGRectangle)">
            <summary>
            Creates a new instance of an image based location object with coordinates and page index.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageIndex">Page index of the media location.</param>
            <param name="coordinates">the coordinates of the media location.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.#ctor(System.Guid,System.Int32,System.Collections.Generic.List{STG.RT.API.Document.STGRectangle})">
            <summary>
            Creates a new instance of an image based location object with all coordinates and page index.
            </summary>
            <param name="mediaID">ID of the media where location is located.</param>
            <param name="pageIndex">Page index of the media location.</param>
            <param name="allCoordinates">All coordinates of the media location.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.AddNewRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle object with provided coordinates and adds it to location's coordinates.
            </summary>
            <param name="left">Left (x) coordinate of the rectangle.</param>
            <param name="top">Top (y) coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <returns>New rectangle</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.DeleteRectangle(STG.RT.API.Document.STGRectangle)">
            <summary>
            Deletes a rectangle from the location's coordinates.
            </summary>
            <param name="rectangle">Rectangle to delete</param>
            <returns>True if it was deleted, false if not present in the collection</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>String representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGImageBasedLocation.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.FirstCoordinate">
            <summary>
            Returns a first rectangle from the array
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.PageNumber">
             <summary>
            Gets or sets the 1-based page number of this location object.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.PageIndex">
             <summary>
            Gets or sets the 0-based page number of this location object.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.XRes">
            <summary>
            X resolution of the zone.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.YRes">
            <summary>
            Y resolution of the zone.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.Coordinates">
            <summary>
            Gets the first coordinates of this location object on a media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.AllCoordinates">
            <summary>
            Defines a read-only list of all coordinates.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGImageBasedLocation.internalAllCoordinates">
            <summary>
            Internal list of coordinates.
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.STGMedia">
            <summary>
            Defines a media object containing meta-data required for document processing.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.Unload">
            <summary>
            Unload the media if it was already loaded.
            Clears the memory used by the stream and forces further calls to the media stream to go again to the server.
            </summary>
            <returns>True if the media was unloaded, or false if it was not loaded in the first place.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.Initialize(System.String,System.String,STG.Common.DTO.DtoMediaType,System.IO.Stream)">
            <summary>
            Initializes a new media object.
            </summary>
            <param name="name">Represents a name of the media.</param>
            <param name="extension">Defines a media file extension.</param>
            <param name="mediaType">Represents a type of the media.</param>
            <param name="mediaStream">Represents a stream containing the media file. </param>
            <returns>Returns the new media object.</returns>
            <remarks>The stream should not be disposed before calling STGDocument.Save()</remarks>
            <introducedIn>1.3</introducedIn>        
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.Initialize(System.String,STG.Common.DTO.DtoMediaType,System.String,System.Boolean)">
            <summary>
            Initializes a new media object based on a provided file.
            </summary>
            <param name="name">Represents a name of the media.</param>
            <param name="mediaType">Represents a type of the media.</param>
            <param name="mediaFilePath">Specifies a path pointing to a file to be added as a media.</param>
            <param name="deleteFileAfterwards">If true, the file is deleted once it gets loaded in memory.</param>
            <returns>Returns the new media object.</returns>
            <introducedIn>1.3</introducedIn>        
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.GetMediaType(System.String)">
            <summary>
            Gets the media type for provided name
            </summary>
            <param name="mediaTypeName">Name of the media type to get</param>
            <returns>Media type with provided name or null if none found</returns>
            <introducedIn>1.3</introducedIn>        
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.InternalGetDocumentAudits(System.Guid)">
            <summary>
            Formats modifications for audit
            </summary>
            <param name="ownerDocumentID">The owner document's ID</param>
            <returns>List of formatted modifications</returns>
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.AfterSerialization">
            <summary>
            fired after serialization of the media object
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.AfterDeserialization">
            <summary>
            fired after object is deserialized
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGMedia.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.Name">
            <summary>
            Defines the name of the media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.OriginalFileName">
            <summary>
            Defines the original file name of the media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.ID">
             <summary>
            Gets the unique identifier of this media object.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.Extension">
            <summary>
            Gets the file extension of the media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.MediaTypeID">
            <summary>
            Gets the unique identifier of the media type.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.MediaStream">
            <summary>
            Represents a stream containing the current media file.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.AvailableMediaTypes">
            <summary>
            Returns all registered media types for the system.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.SystemMediaTypes">
            <summary>
            Returns all system-based media types.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGMedia.Modifications">
            <summary>
            Dictionary containing as key all the unique modifications that happened to this object. The value is the ModificationSubject (object where the modification happened).
            </summary>
        </member>
        <member name="T:STG.RT.API.Document.STGPage">
            <summary>
            Defines the page object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.#ctor">
            <summary>
            Creates a new page object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.Move(System.Int32)">
            <summary>
            Moves the current page to the specified location.
            </summary>
            <param name="newIndex">Specifies the new location of the page inside the document.</param>
            <exception cref="T:System.InvalidOperationException">It is not allowed to move a page not attached to a document.</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">The newIndex has to be between 0 and the number of pages in the document.</exception> 
            <exception cref="T:System.InvalidOperationException">The page should not have media attached that are attached to other pages already.</exception> 
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.Copy(System.Boolean)">
            <summary>
            Copies the current page and assigns a copy as the last page in the owner document.
            </summary>
            <param name="copyMedia">Defines if the media should be copied as well. 
            The parameter is optional and the default is true.</param>
            <returns>Returns the copied page.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.MoveTo(STG.RT.API.Document.STGDocument,System.Int32)">
            <summary>
            Moves the current page to destination document on the provided index.
            </summary>
            <param name="destinationDocument">Defines the destination document.</param>
            <param name="destinationPageIndex">Defines the destination document page index.</param>
            <returns>Returns the moved page.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.Delete(System.Boolean)">
            <summary>
            Deletes the current page and if specified the media attached to a page.
            </summary>
            <param name="deleteAttachedMedia">Specifies if the media attached to a page is to be deleted as well. 
            The parameter is optional and the default is false</param>
            <exception cref="T:System.InvalidOperationException">It is not allowed to delete a page not attached to a document.</exception> 
            <exception cref="T:System.InvalidOperationException">Deleting attached media shared between multiple pages is  not allowed.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.deleteOrManipulateLocation(STG.RT.API.Document.STGImageBasedLocation,System.Int32,System.Int32,System.Boolean)">
            <summary>
            this method will manipulate the provided location object and return false, or will return true if location must be deleted
            </summary>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.AppendMedia(STG.RT.API.Document.STGMedia)">
            <summary>
            Adds a provided media to the current page.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.PromoteToDefaultMedia(STG.RT.API.Document.STGMedia)">
            <summary>
            Makes the provided media as default media of this page
            </summary>
            <param name="newDefaultMedia">New default media of the current page</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.PromoteToDefaultMedia(System.Guid)">
            <summary>
            Makes the media with provided identifier as default media of this page
            </summary>
            <param name="newDefaultMediaIdentifier">The identifier of the new default media of the current page</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.PromoteToDefaultMedia(System.String)">
            <summary>
            Makes the media with provided name as the default media of this page.
            </summary>
            <param name="newDefaultMediaName">The name of the new default media of the current page</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.AppendMedia(STG.RT.API.Document.STGMedia,STG.RT.API.Document.STGPageLocation,System.Boolean)">
            <summary>
            Adds a provided media to the current page and sets it as the default page media.
            </summary>
            <param name="mediaToAdd">Represents a media to be added.</param>
            <param name="pageLocation">The location of the current page on the assigned media</param>
            <param name="setAsDefault">If set to true, it will mark the current media as the default media of this page</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.GetMediaLocation(STG.RT.API.Document.STGMedia)">
            <summary>
            Retrieves the page location for the provided media.
            </summary>
            <param name="media">Media to get the location for.</param>
            <returns>Page location for the provided media.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.GetMediaLocation(System.Guid)">
            <summary>
            Retrieves the page location for the provided media ID.
            </summary>
            <param name="mediaId">ID of the media to get the location for.</param>
            <returns>Page location for the media with the provided ID.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.GetMediaLocationByName(System.String)">
            <summary>
            Retrieves the page location for the media with the provided name.
            </summary>
            <param name="mediaName">Case insensitive name of the media to get the location for.</param>
            <returns>Page location for the media with the provided name or null if the media with the provided name does not exist.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.AssignLocationToMedia(STG.RT.API.Document.STGPageLocation)">
            <summary>
            Assigns the provided location to the equivalent media on this page
            </summary>
            <param name="location">Location to assign</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGPage.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.OwnerDocument">
            <summary>
            Represents a owner document of this page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.PageNumber">
            <summary>
            Represents the page number.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.PageIndex">
            <summary>
            Represents the zero-based index of the current page in the owner document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.IsVisibile">
            <summary>
            helper flag to enable hiding/skipping the pages in activities.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.PageFlags">
            <summary>
            Represents various flags on the page (e.g. Is empty page, contains image...)
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.IsFrontPage">
            <summary>
            Helper flag to enable separation between front and back page
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.ID">
            <summary>
            Represents an unique identifier of the current page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.internalMedia">
            <summary>
            internal list of media
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.DefaultMedia">
            <summary>
            The media that is marked as the default media for the current page
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGPage.Media">
            <summary>
            Defines a list of all media assigned to a current page.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGRectangle">
            <summary>
            Represents a rectangle object.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGRectangle.#ctor">
            <summary>
            Creates a new (empty) rectangle object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle object with provided coordinates.
            </summary>
            <param name="top">Top coordinate of the rectangle.</param>
            <param name="left">Left coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRectangle.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new rectangle object with provided coordinates.
            </summary>
            <param name="left">Left (x) coordinate of the rectangle.</param>
            <param name="top">Top (y) coordinate of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
            <returns>New rectangle</returns>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRectangle.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRectangle.Left">
            <summary>
            Gets or sets the left position of this rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRectangle.Top">
            <summary>
            Gets or sets the top position of this rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRectangle.Width">
            <summary>
            Gets or sets width of the rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRectangle.Height">
            <summary>
            Gets or sets the hight of the rectangle.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGRow">
            <summary>
            Defines a single row of a table.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGRow.#ctor">
            <summary>
            Creates a empty row object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRow.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{STG.RT.API.Document.STGColumnDefinition})">
            <summary>
            Creates a row based on a provided column definition.
            </summary>
            <param name="definition">Represents a list of column definitions for all cells in the current row.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRow.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGRow.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRow.ID">
            <summary>
            Represents an unique identifier of the current row.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRow.internalCells">
            <summary>
            stores the list of cells in the row
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGRow.Cells">
            <summary>
            Gets all cells of this row.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGRow.Location">
            <summary>
            Gets the row location on the document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGTable">
            <summary>
            Defines a table data structure.
            </summary>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.#ctor">
            <summary>
            Creates a default (empty) table object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.#ctor(STG.RT.API.Document.STGDocument,STG.RT.API.Document.STGTableDefinition)">
            <summary>
            Creates a table in the provided document, based on provided table definition.
            </summary>
            <param name="documentOwner">Represents a document owner.</param>
            <param name="tableDefinition">Specifies a table definition.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.InternalGetDocumentAudits(System.Guid)">
            <summary>
            Formats modifications for audit
            </summary>
            <param name="ownerDocumentID">The owner document's ID</param>
            <returns>List of formatted modifications</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.AfterSerialization">
            <summary>
            fired after a document is serialized
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.InsertNewRow(System.Int32)">
            <summary>
            Creates a new row in the table based on a table definition.
            </summary>
            <param name="rowIndex">Index to insert the new row at (or default -1) to append at the end</param>
            <returns>Created row.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.DeleteRow(STG.RT.API.Document.STGRow)">
            <summary>
            Deletes a row from the table.
            </summary>
            <param name="row">Row to delete</param>
            <returns>True if it was deleted, false if not present in the collection</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.AfterDeserialization">
            <summary>
            fired after de-serialization occurs
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.fixCopiedExternals(System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            fixes the external link for table extensions
            </summary>
            <param name="sourceDocumentID"></param>
            <param name="changedMediaIDs"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Document.STGTable.ToString">
            <summary>
            Overridden ToString
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.IsModified">
            <summary>
            Gets or sets the value if the table is modified.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.Modifications">
            <summary>
            Gets a dictionary that contains as key all the unique modifications that happened to this object. The value is the ModificationSubject (object where the modification happened).
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.TableName">
            <summary>
            Gets the name of the table.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.internalRows">
            <summary>
            keeps  the list of rows
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.Rows">
            <summary>
            Gets all rows of the table.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.IsValid">
             <summary>
            Gets or sets a flag that allows activities to mark the field as valid or invalid.
             </summary>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.internalColumnDefinition">
            <summary>
            Gets or sets a list of all column definitions of the current table.
            </summary>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.ColumnDefinition">
            <summary>
            Represents a list of all column definitions of the current table.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGTable.Document">
            <summary>
            Specifies the owner document.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Document.STGValue">
            <summary>
            Defines a STGValue object
            </summary>
        </member>
        <member name="T:STG.RT.API.Interfaces.Document.ISTGValue">
            <summary>
            Defines a STGValue object
            </summary>
        </member>
        <member name="M:STG.RT.API.Interfaces.Document.ISTGValue.ToString">
            <summary>
            String representation of the value. 
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.Document.ISTGValue.GetConvertedValue``1">
            <summary>
            Loads the value as a provided type.
            If the provided type does not match the data type provided in a field/column definition the method fails.
            </summary>
            <typeparam name="T">Defines the data type to return.</typeparam>
            <returns>Returns the value as specified data type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0)">
            <summary>
            Sets the value of the field as specified data type.
            If type does not match the data type of the field the method fails.
            </summary>
            <typeparam name="T">Defines a field data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0,System.IFormatProvider)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formatter">Represents a formatter to apply on a text representation upon setting the value</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.Document.ISTGValue.SetConvertedValue``1(``0,System.String)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formatedValue">Represents a formated textual representation for the provided typed value.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Interfaces.Document.ISTGValue.Text">
            <summary>
            gets or sets the value as string
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Interfaces.Document.ISTGValue.IsConverted">
            <summary>
            Flag defining if the contains formated value
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.#ctor">
            <summary>
            default constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.#ctor(STG.RT.API.Document.Model.ModelObject)">
            <summary>
             Creates a new instance of a field object based on a provided document field definition and adds the field to a provided document.
            </summary>
            <param name="owner">Defines a owner document of the current value.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.ToString">
            <summary>
            Returns the textual representation o the value
            </summary>
            <returns>The string representation of the current object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.GetConvertedValue``1">
            <summary>
            Loads the value as a provided type.
            If the provided type does not match the data type provided in a field/column definition the method fails.
            </summary>
            <typeparam name="T">Defines the data type to return.</typeparam>
            <returns>Returns the value as specified data type.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.SetConvertedValue``1(``0)">
            <summary>
            Sets the value of the field as specified data type.
            If type does not match the data type of the field the method fails.
            </summary>
            <typeparam name="T">Defines a field data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.SetConvertedValue``1(``0,System.IFormatProvider)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formatter">Represents a formatter to apply on a text representation upon setting the value</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Document.STGValue.SetConvertedValue``1(``0,System.String)">
            <summary>
            Sets the value of the field as specified data type, applying specified formatter
            If type does not match the data type of the field/cell the method fails.
            </summary>
            <typeparam name="T">Defines a value data type.</typeparam>
            <param name="value">Represents a value to save.</param>
            <param name="formattedValue">Represents a formated textual representation for the provided typed value.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGValue.Text">
            <summary>
            Gets or sets the value as string.
            Setting the text property will drop the converted value.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Document.STGValue.IsConverted">
            <summary>
            Flag defining if the contains formated value
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Interfaces.DocumentEventArgs">
            <summary>
            Event Args for sending document load/save data across app domains
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.DocumentID">
            <summary>
            root document ID
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.ActionTime">
            <summary>
            Time required to save/close the document
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.Action">
            <summary>
            Performed document action
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.ActionText">
            <summary>
            action description
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.WorkItemID">
            <summary>
            Work item ID
            </summary>
        </member>
        <member name="P:STG.RT.API.Interfaces.DocumentEventArgs.ActivityInstanceID">
            <summary>
            Activity instance
            </summary>
        </member>
        <member name="T:STG.RT.API.Interfaces.DocumentAction">
            <summary>
            Document action
            </summary>
        </member>
        <member name="F:STG.RT.API.Interfaces.DocumentAction.Save">
            <summary>
            Document save
            </summary>
        </member>
        <member name="F:STG.RT.API.Interfaces.DocumentAction.Load">
            <summary>
            document load
            </summary>
        </member>
        <member name="F:STG.RT.API.Interfaces.DocumentAction.Debug">
            <summary>
            Debug action. Description is in Action Text
            </summary>
        </member>
        <member name="T:STG.RT.API.Interfaces.ISTGConfiguration">
            <summary>
            Represents the configuration layer interface
            </summary>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadProcesses">
            <summary>
            Returns a list of the newest Processes having different types
            </summary>
            <returns>list of the newest processes of the different types</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadAllProcesses">
            <summary>
            Returns a list of all Processes
            </summary>
            <returns>list of the all processes of the different types</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadAvailableProcesses(System.Int32)">
            <summary>
            Returns a list of Processes with the newest version, where the activity with the provided identifier is used
            </summary>
            <param name="activityIdentifier">activity identifier whose processes will be enumerated</param>
            <returns>list of newest processes for the provided activity</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadAllAvailableProcesses(System.Int32)">
            <summary>
            Returns a list of all Processes , where the activity with the provided identifier is used
            </summary>
            <param name="activityIdentifier">activity identifier whose processes will be enumerated</param>
            <returns>list of all processes for the provided activity</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityInstancesForProcess(STG.Common.DTO.DtoProcessInfo)">
            <summary>
            Returns a list of Activity Instances used in the provided process
            </summary>
            <param name="process">process whose activities will be enumerated</param>
            <returns>list of activities for the provided process</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityInstanceConfiguration(STG.Common.DTO.DtoActivityInstanceInfo)">
            <summary>
            Loads the processing configuration for the provided activity instance
            </summary>
            <param name="activityInstance">activity instance whose configuration will be returned</param>
            <returns>configuration</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.IsNewerVariablesVersionAvailable(System.Int32,System.Int32)">
            <summary>
            Method checks for newer version of activity variables
            </summary>
            <param name="activityInstanceId">Activity identifier</param>
            <param name="version">Variables version</param>
            <returns>True if newer version of variable is available</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityInstanceProcessSettings(STG.Common.DTO.DtoActivityInstanceInfo)">
            <summary>
            Returns the process related settings for the provided activity instance
            </summary>
            <param name="activityInstance">activity instance info whose process settings will be returned</param>
            <returns>Process definition for the activity</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityInstanceProcessSettings(System.Int32)">
            <summary>
            Loads the system related process settings for the specified activity instance identifier.
            </summary>
            <param name="activityInstanceID">Specifies the activity instance identifier whose process settings you want to read.</param>
            <returns>Returns the process definition for the specified activity instance identifier.</returns>      
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityInstanceInfo(System.Int32)">
            <summary>
            Initializes the activity instance info based on a activity instance and process identifier
            </summary>
            <param name="activityInstanceIdentifier">identifier of activity instance</param>
            <returns>Activity Instance Info</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadNewestProcessInfo(STG.Common.DTO.DtoProcessInfo)">
            <summary>
            Loads the newest process based on a provided process object.
            </summary>
            <param name="process">Specifies the process object you want to check.</param>
            <returns>Returns the newest available process info object.</returns> 
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadNewestProcessInfo(System.Guid)">
            <summary>
            Loads the newest process based on a provided process guid.
            </summary>
            <param name="processType">Specifies the process type you want to check.</param>
            <returns>Returns the newest available process info object.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.FindRegisteredActivities(System.String,System.String)">
            <summary>
            Loads all registered activities with the provided name and version. 
            The activity version is optional. Pass null to get all the activities with the provided name irrelevant to version.
            </summary>
            <param name="activityName">Name of the activity.</param>
            <param name="activityVersion">Activity Version. Pass null to get all activities irrelevant to version</param>
            <returns>List of all registered activities that matches the provided name and version.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadPackageForActivity(System.Int32)">
            <summary>
            Load activity package data
            </summary>
            <param name="activityId">ID of the activity the package requested for</param>
            <returns>The binary package data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGConfiguration.LoadActivityType(System.Int32)">
            <summary>
            Loads the activity info for type with provided ID
            </summary>
            <param name="activityId">Activity type ID</param>
            <returns>Activity info</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Interfaces.NamespaceDoc">
            <summary>
            The STG.RT.API.Interfaces namespace contains interface definition for the manipulation of work items and the access of configuration data.
            </summary>
        </member>
        <member name="T:STG.RT.API.Interfaces.ISTGProcess">
            <summary>
            Defines the process layer object
            </summary>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetDocumentStorages">
            <summary>
            Reads all the available document storags for the current runtime.
            </summary>
            <returns>List of all storages for the current runtime environment.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CommitWorkItem(STG.Common.DTO.DtoWorkItemData,STG.RT.API.Document.STGDocument)">
            <summary>
            Commits the work item by unlocking and saving it in database
            </summary>
            <param name="workItem">Work Item to commit</param>
            <param name="rootDocument">Work Item Document to be updated</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CommitWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Commits the work item by persisting the provided work item.
            </summary>
            <param name="workItem">Specifies a work item to persist.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Creates a new work item for the provided process
            </summary>
            <param name="processId">Process identifier where the new work item will be created</param>
            <param name="workItem">a newly created Work Item </param>        
            <returns>created Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,System.Int32)">
            <summary>
            Creates a new work item for the provided process and activity instance
            </summary>
            <param name="processId">Process identifier where the new work item will be created</param>
            <param name="activityInstanceID">Activity instance identifier</param>        
            <returns>created Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DtoWorkItemSLA)">
            <summary>
            Creates a new work item for the provided process identifier and overrides the process defined SLA options with the provided ones.
            </summary>
            <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
            <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>    
            <param name="overrideSLA">Specifies the SLA options that overrides the one configured for the process</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process
            </summary>
            <param name="processId">Process identifier where the new work item will be created</param>
            <param name="workItem">a newly created Work Item </param>   
            <param name="documentStorage">A document storage where documents assigned to this work item will be stored</param>
            <returns>created Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process and activity instance
            </summary>
            <param name="processId">Process identifier where the new work item will be created</param>
            <param name="activityInstanceID">Activity instance identifier</param>    
            <param name="documentStorage">A document storage where documents assigned to this work item will be stored</param>
            <returns>created Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DtoWorkItemSLA,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process identifier and overrides the process defined SLA options with the provided ones.
            </summary>
            <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
            <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>    
            <param name="overrideSLA">Specifies the SLA options that overrides the one configured for the process</param>
            <param name="documentStorage">A document storage where documents assigned to this work item will be stored</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.DeleteWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Delete the work item and its documents form the system
            </summary>
            <param name="workItem"> work item to delete</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetAvailableWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32)">
            <summary>
            Provides a list of work items that are available for processing, based on specified criteria
            </summary>
            <param name="activityTypes">list of activity types that can process the work item. 
            Usually this is list of activities hosted in Activity Host</param>
            <param name="processes">optional parameter; list of processes where the work item must belong to. 
            If not specified, all processes will be used</param>
            <param name="maxItems">Max. number of work items to be returned</param>
            <returns>list of work items that are available for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetAvailableWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Provides a list of work items that are available for processing, based on specified criteria
            </summary>
            <param name="activityTypes">list of activity types that can process the work item. 
            Usually this is list of activities hosted in Activity Host</param>
            <param name="processes">optional parameter; list of processes where the work item must belong to. 
            If not specified, all processes will be used</param>
            <param name="maxItems">Max. number of work items to be returned</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>list of work items that are available for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetAvailableWorkItemsForInstance(System.Int32,System.Int32)">
            <summary>
            Loads a list of work items that are available for processing based on specified activity instance ID.
            </summary>
            <param name="activityInstanceId">Specifies a work item ID that can process the work item</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <returns>Returns a list with up to maxItems work items that are available for processing by the provided work item ID.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetAvailableWorkItemsForInstance(System.Int32,System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Loads a list of work items that are available for processing based on specified activity instance ID.
            </summary>
            <param name="activityInstanceId">Specifies a work item ID that can process the work item</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>Returns a list with up to maxItems work items that are available for processing by the provided work item ID.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus)">
            <summary>
            Provides a list of work items that are in the specified status
            </summary>
            <param name="activityTypes">list of activity types that can process the work item. 
            Usually this is list of activities hosted in Activity Host</param>
            <param name="processes">optional parameter; list of processes where the work item must belong to. 
            If not specified, all processes will be used</param>
            <param name="maxItems">Max. number of work items to be returned</param>
            <param name="status">Returns work items with specified status</param>
            <returns>list of work items that are in the specified status</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Provides a list of work items that are in the specified status
            </summary>
            <param name="activityTypes">list of activity types that can process the work item. 
            Usually this is list of activities hosted in Activity Host</param>
            <param name="processes">optional parameter; list of processes where the work item must belong to. 
            If not specified, all processes will be used</param>
            <param name="maxItems">Max. number of work items to be returned</param>
            <param name="status">Returns work items with specified status</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>list of work items that are in the specified status</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.LockNextAvailableWorkItem(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Selects the first available work item, and locks it for processing
            </summary>
            <param name="activityTypes">list of activity types that can process the work item. 
            Usually this is list of activities hosted in Activity Host</param>
            <param name="processes">optional parameter; list of processes where the work item must belong to. 
            If not specified, all processes will be used</param>
            <returns>Locked Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.LockWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Locks the work item based on the provided Identifier
            </summary>
            <param name="workItem">The work item to lock</param>
            <returns>Locked Work Item for processing</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.LockWorkItem(System.Int32)">
            <summary>
            Locks the provided work item.
            </summary>
            <param name="workItemID">Specifies the work item ID to lock.</param>
            <returns>Returns the provided work item locked and ready for processing.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.MoveWorkItemInProcess(STG.Common.DTO.DtoActivityProcessDefinition,STG.RT.API.Document.STGDocument,STG.Common.DTO.DtoWorkItemData,STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            Calculates the next activity based on process definition, and saves the work item with the correct state based on process definition
            </summary>
            <param name="processDefinition">process definition of the activity currently in progress</param>
            <param name="document">root document of the activity currently in progress</param>
            <param name="workItem">work item in progress</param>
            <param name="configLayer">work item in progress</param>
            <returns>work item with the correct state</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.MoveWorkItemInProcess(STG.Common.DTO.DtoActivityProcessDefinition,STG.RT.API.Document.STGDocument,STG.Common.DTO.DtoWorkItemData,System.Collections.Generic.IList{System.Int32},STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            this method calculates the next activity based on process definition, and saves the work item with the correct state based on process definition
            </summary>
            <param name="processDefinition">process definition of the activity currently in progress</param>
            <param name="document">root document of the activity currently in progress</param>
            <param name="workItem">work item in progress</param>
            <param name="hostedActivities">List of activity types hosted in the activity host</param>
            <param name="configLayer">Configuration Layer for activity configuration extraction</param>
            <returns>work item with the correct state</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.UpgradeWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Upgrades the work item and its children if there is a newer process version
            </summary>
            <param name="workItem">The work item to upgrade</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetChildWorkItems(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Provides a list of child work items of the specified work item
            </summary>
            <param name="rootWorkItem">Root work item to get the child work items for.</param>
            <returns>list of work items that are available for the specified root work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.LoadDocument(STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentLoadingConfiguration)">
            <summary>
            Method loads STGDocument based on work item and document loading configuration
            </summary>
            <param name="workItem">Work item to load the document for.</param>
            <param name="docLoadingConfig">Document loading configuration options.</param>
            <returns>The root document for the provided work item.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItemAudits(System.Int32)">
            <summary>
            Provides a list of work item audits for the specified work item ID
            </summary>
            <param name="workItemID">Work item ID to get the audits for.</param>
            <returns>list of work item audits for the specified work item ID</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItemData(System.Int32)">
            <summary>
            Loads the work item data based on the provided ID.
            </summary>
            <param name="workItemID">Specifies a work item identifier to load the data for.</param>
            <returns>Returns a work item object for the provided identifier.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItemsFilteredOrderedPaged(STG.Common.DTO.DtoWorkItemSelectQuery)">
            <summary>
            Method retrieves filtered list of work items
            </summary>
            <param name="workItemSelectQuery">Specifies a DTO object that defines the filter criteria to load the work items</param>
            <returns>Paging data of work items that matches the specified criteria.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.RemoveDeletedWorkItems">
            <summary>
            This method removes all the work items in the deleted status from the database.
            NOTE: Calling the method can have negative performance impact on the system. It is recommended to execute this method when the work-load on the system is low
            </summary>
            <returns>Number of deleted work items.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcess.GetWorkItemIDsWithExpiredHeartbeat(System.DateTime,System.Int32)">
            <summary>
            Gets the list of work item ID-s that have reported the last heartbeat before the provided time.
            </summary>
            <param name="expirationTime">Check heartbeats that are equal or older than the provided expiration time</param>
            <param name="maxItems">Maximum number of work item ID-s to return</param>
            <returns>List of work item ID-s for work items that have expired heartbeats</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcessInternal.FireDocumentSave(STG.RT.API.Interfaces.DocumentEventArgs)">
            <summary>
            Internal method used to notify all subscribers of this STGProcess object that a document was saved.
            </summary>
            <param name="eventArgs">Info around loading the document</param>
        </member>
        <member name="M:STG.RT.API.Interfaces.ISTGProcessInternal.FireDocumentLoad(STG.RT.API.Interfaces.DocumentEventArgs)">
            <summary>
            Internal method used to notify all subscribers of this STGProcess object that a document was loaded.
            </summary>
            <param name="eventArgs">Info around loading the document</param>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterDocumentLoad">
            <summary>
            Callback called after document is loaded
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterDocumentSave">
            <summary>
            Callback after document is saved
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterCommitWorkItem">
            <summary>
            Event called after Work Item is updated
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterCustomAction">
            <summary>
            callback for benchmarking. Fired by custom actions in code
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterLockWorkItem">
            <summary>
            Event called after Work Item is locked
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterDeleteWorkItem">
            <summary>
            Event called after Work Item is deleted
            </summary>
        </member>
        <member name="E:STG.RT.API.Interfaces.ISTGProcessInternal.AfterCreateWorkItem">
            <summary>
            Event called after Work Item is created
            </summary>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.ApiVersionHelper">
            <summary>
            Api version helper
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ApiVersionHelper.#ctor(STG.OEM.ServiceType)">
            <summary>
            Default constructor
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ApiVersionHelper.GetVersionedServiceAppendix(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.AuthenticationTypeSwitch.UseClientCredentialsGrant">
            <summary>
            grant_type clientCredentials - client id and secret need to be registered with the auth service
            </summary>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.AuthenticationTypeSwitch.UseWindowsGrant">
            <summary>
            grant_type windows - tries to get JWT from windows auth service and then exchange the JWT for an authorization token
            </summary>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient">
            <summary>
            Configuration service http client
            </summary>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.ISTGHttpClient">
            <summary>
            Common interface for Http Client objects
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.#ctor">
            <summary>
            Default constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.#ctor(System.String)">
            <summary>
            Constructor taking service URL
            </summary>
            <param name="serviceUrl">Service address</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.Ping">
            <summary>
            Ping
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadProcessInfo(System.String)">
            <summary>
            LoadProcessInfo
            </summary>
            <param name="processType"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadRegisteredActivities">
            <summary>
            Loads a list of all Activities registered with he system
            </summary>
            <returns>List of registered activities</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadProcesses">
            <summary>
            LoadProcesses
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadAllProcesses">
            <summary>
            LoadAllProcesses
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadHostingProcesses(System.String)">
            <summary>
            LoadHostingProcesses
            </summary>
            <param name="activityTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadAllHostingProcesses(System.String)">
            <summary>
            LoadHostingProcesses
            </summary>
            <param name="activityTypeId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityInstancesInfo(System.String)">
            <summary>
            LoadActivityInstancesInfo
            </summary>
            <param name="processId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityInstanceInfo(System.String)">
            <summary>
            LoadActivityInstanceInfo
            </summary>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityConfiguration(System.String)">
            <summary>
            LoadActivityConfiguration
            </summary>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityProcessConfig(System.String)">
            <summary>
            LoadActivityProcess
            </summary>
            <param name="activityInstanceId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.ProcessCleanup">
            <summary>
            ProcessCleanup
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityPackageData(System.Int32)">
            <summary>
            Load binary data of the activity related package
            </summary>
            <param name="activityId">The activity id for the package</param>
            <returns>Binary data of the package</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.LoadActivityType(System.Int32)">
            <summary>
            Load activity info of the provided activity type ID
            </summary>
            <param name="activityId">The activity type id</param>
            <returns>Activity info object</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.HasActivityTypeInstances(System.Int32)">
            <summary>
            Checks if the activity type with the provided ID has any instances in any process.
            Deletes the activity type if it has no instances.
            </summary>
            <param name="activityTypeID">Activity type ID</param>
            <returns>True if activity type has any instances in any process</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.Dispose">
            <summary>
            Dispose
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.FindActivity(System.String,System.String)">
            <summary>
            searches for the activity
            </summary>
            <param name="activityName"></param>
            <param name="activityVersion"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ConfigurationServiceHttpClient.IsNewerVariablesVersionAvailable(System.Int32,System.Int32)">
            <summary>
            Method checks for newer version of activity variables
            </summary>
            <param name="activityInstanceId">Activity identifier</param>
            <param name="version">Variables version</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.DisposableStreamContent">
            <summary>
            Wrapper for stream content
            </summary>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient">
            <summary>
            Document service http client
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.#ctor">
            <summary>
            Default constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.#ctor(System.String)">
            <summary>
            Initializes DocumentServiceHttpClient for given service url
            </summary>
            <param name="serviceUrl">Service URL</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.Ping">
            <summary>
            Ping
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.DownloadStream(System.Guid,System.String,System.Int32)">
            <summary>
            downloads a stream (serialized object) of the provided type for the provided ID
            </summary>
            <param name="streamId"></param>
            <param name="streamType"></param>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.CollectsDocumentAudit(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            method for checking if the instance must persist document audits
            </summary>
            <param name="workItem"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.CopyDocument(System.Guid,System.Int32)">
            <summary>
            Copies the document with provided ID and returns its stream
            </summary>
            <param name="sourceDocumentID"></param>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.DownloadStreamsAll(System.String,STG.Common.DTO.DtoDocumentLoadingConfiguration,System.Collections.Generic.List{STG.Common.DTO.DocumentStreamData}@)">
            <summary>
            Downloads all streams for the provided ID and provided loading configuration
            </summary>
            <param name="rootStorageTag"></param>
            <param name="docLoadingConfig"></param>
            <param name="streamsData"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.CreateTransaction">
            <summary>
            Creates transaction
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.CommitTransaction(System.Guid,System.Int32)">
            <summary>
            Commits transaction
            </summary>
            <param name="transaction"></param>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.AbortTransaction(System.Guid)">
            <summary>
            Aborts transaction
            </summary>
            <param name="transaction"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.AppendTransactionalAction(System.Guid,STG.Common.DTO.DtoDocumentData,System.IO.Stream)">
            <summary>
            Appends transactional action
            </summary>
            <param name="transactionID"></param>
            <param name="dto"></param>
            <param name="stream"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.AppendTransactionalAction(System.Guid,System.String,STG.Common.DTO.DtoWorkItemData,System.Collections.Generic.IList{STG.Common.DTO.DtoDocumentAudit})">
            <summary>
            Appends transactional action
            </summary>
            <param name="transactionID"></param>
            <param name="documentID"></param>
            <param name="dto"></param>
            <param name="value"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.AppendTransactionalAction(System.Guid,STG.Common.DTO.DtoDocumentTypeData,System.IO.Stream)">
            <summary>
            Appends transactional action
            </summary>
            <param name="transactionID"></param>
            <param name="dto"></param>
            <param name="stream"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.AppendTransactionalAction(System.Guid,STG.Common.DTO.DtoMediaDataStream,System.IO.Stream)">
            <summary>
            Appends transactional action
            </summary>
            <param name="transactionID"></param>
            <param name="dto"></param>
            <param name="stream"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.DownloadDocumentType(System.String,System.Int32,STG.Common.DTO.DtoDocumentTypeData@)">
            <summary>
            Downloads document type
            </summary>
            <param name="documentTypeName"></param>
            <param name="processID"></param>
            <param name="dto"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.SplitAndReassignDocuments(System.Guid,System.Collections.Generic.IList{System.Guid},STG.Common.DTO.DtoWorkItemData)">
            <summary>
            SplitAndReassignDocuments
            </summary>
            <param name="documentIdToSplit"></param>
            <param name="documentIdsToReassign"></param>
            <param name="parentWorkItem"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.ReAssignDocument(STG.Common.DTO.DtoDocumentData,STG.Common.DTO.DtoWorkItemData,System.Guid)">
            <summary>
            ReAssignDocument
            </summary>
            <param name="childDocument"></param>
            <param name="parentWorkItem"></param>
            <param name="transaction"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.RemoveChildWorkItems(STG.Common.DTO.DtoWorkItemData,System.Guid)">
            <summary>
            RemoveChildWorkItems
            </summary>
            <param name="rootWorkItem"></param>
            <param name="transaction"></param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.CopyDocumentForProcess(System.Guid,System.String,System.Int32)">
            <summary>
            CopyDocumentForProcess
            </summary>
            <param name="documentID"></param>
            <param name="processType"></param>
            <param name="storageID"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.LoadAvailableMediaTypes">
            <summary>
            LoadAvailableMediaTypes
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.DocumentServiceHttpClient.Dispose">
            <summary>
            Dispose
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient">
            <summary>
            Process service http client
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.#ctor">
            <summary>
            Default constructor
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="serviceUrl">Service address</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.Dispose">
            <summary>
            Dispose
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.initializeServiceHandler(System.String)">
            <summary>
            Initializes service handler
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.Ping">
            <summary>
            Ping
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetAvailableStorages">
            <summary>
            Reads all available document storages for the current environment
            </summary>
            <returns>List of Runtime environment document storages</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.CreateWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Creates work item
            </summary>
            <param name="workItem"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.ReportHeartbeat(System.Int32,System.Int32,System.String)">
            <summary>
            method reports heartbeat to server
            </summary>
            <param name="workItemID"></param>
            <param name="activityInstanceID"></param>
            <param name="message"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetExpiredWorkItemIDs(System.DateTime,System.Int32)">
            <summary>
            Gets the list of work item ID-s that have reported the heartbeat prior to the reported datetime
            </summary>
            <param name="expirationTime"></param>
            <param name="maxItems"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.DeleteWorkItem(System.String)">
            <summary>
            Deletes work item
            </summary>
            <param name="workItemId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.RemoveDeletedWorkItems">
            <summary>
            Deletes all work items with the deleted state from the DB
            </summary>
            <returns>number of deleted work items</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.RemoveDeletedWorkItems(System.Int32)">
            <summary>
            Deletes all work items from provided process with the deleted state from the DB
            </summary>
            <param name="processID">ID of the process</param>
            <returns>number of deleted work items</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.LockNextAvailableWorkItem(System.String,System.String)">
            <summary>
            Locks next available work item
            </summary>
            <param name="activityTypeIds"></param>
            <param name="processIds"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.LockWorkItem(System.String)">
            <summary>
            Locks work item
            </summary>
            <param name="workItemId">Work item identifier</param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetNextAvailableWorkItemsForInstance(System.Int32,System.Int32)">
            <summary>
            Gets list of work items available for provided activity instance ID
            </summary>
            <param name="activityInstanceId"></param>
            <param name="maxItems"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetNextAvailableWorkItemsForInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets list of work items available for provided activity instance ID and document storage ID
            </summary>
            <param name="activityInstanceId"></param>
            <param name="maxItems"></param>
            <param name="storageId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetNextAvailableWorkItems(System.String,System.String,System.String)">
            <summary>
            Gets next available work item
            </summary>
            <param name="activityTypeIds"></param>
            <param name="processIds"></param>
            <param name="maxItems"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetNextAvailableWorkItems(System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets next available work item
            </summary>
            <param name="activityTypeIds"></param>
            <param name="processIds"></param>
            <param name="maxItems"></param>
            <param name="storageId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetWorkItems(System.String,System.String,System.String,System.String)">
            <summary>
            Gets work items
            </summary>
            <param name="activityTypeIds"></param>
            <param name="processIds"></param>
            <param name="maxItems"></param>
            <param name="status"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetWorkItems(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets work items
            </summary>
            <param name="activityTypeIds"></param>
            <param name="processIds"></param>
            <param name="maxItems"></param>
            <param name="status"></param>
            <param name="storageId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.CommitWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Commits work item
            </summary>
            <param name="processedWorkItem"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetChildWorkItems(System.String)">
            <summary>
            Gets child work items
            </summary>
            <param name="rootworkItemId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.UpgradeWorkItem(System.String)">
            <summary>
            Upgrades work item
            </summary>
            <param name="workItemId"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.GetWorkItemAudits(System.String)">
            <summary>
            Provides a list of work item audits for the specified work item
            </summary>
            <param name="workItemId">ID of the root work item to get the audit data for.</param>
            <returns>List of work item audit that are available for the specified work item</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.SearchWorkItems(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IList{STG.Common.DTO.DtoFilterData{STG.Common.DTO.DtoWorkItemData}},System.Boolean,System.Boolean)">
            <summary>
            performs search over all work items with provided criteria
            </summary>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <param name="lstProcessFilter"></param>
            <param name="lstActivityInstanceFilter"></param>
            <param name="lstWorkItemStatusFilter"></param>
            <param name="orderBy"></param>
            <param name="ascendingOrder"></param>
            <param name="filter"></param>
            <param name="includeDeleted"></param>
            <param name="includeDone"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ProcessServiceHttpClient.CheckIfWorkItemIsValidForDocumentLoad(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Check if work item is valid for document load
            </summary>
            <param name="workItem">The work item to check validity</param>
            <returns>Work item validity status</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Authenticate">
            <summary>
            Method authenticates current HttpClient instance to Authentication service and a current running service
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.FetchAuthorizationToken(STG.Common.Utilities.OAuth.AuthenticationTokenRequest)">
            <summary>
            Gets the token from the authorization server.
            </summary>
            <param name="authData">The data necessary for a token request.</param>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.ConvertToWindowsAuthTokenRequest(STG.Common.Utilities.OAuth.AuthenticationToken)">
            <summary>
            Converts the authentication token to a token request with a windows auth JWT.
            </summary>
            <param name="winToken">The authentication token received from the windows authentication endpoint.</param>
            <returns>A token request to exchange the JWT with a vinna access token.</returns>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.SetWindowsAuthenticationHttpClient(System.Net.Http.HttpClient)">
            <summary>
            For unit tests.
            Can be used to set the http client used for authenticating with the WindowsAuthentication endpoint.
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.GetHttpClientForWindowsAuthentication">
            <summary>
            Creates a new HttpClient with a HttpClientHandler with UseDefaultCredentials (which is necessary for win auth)
            </summary>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.AuthenticateIfNeeded">
            <summary>
            Method checks if authentication or refresh is needed
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.RefreshAuthentication">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.GetStream(System.String)">
            <summary>
            Method executes HTTP method GET synchronously and returns Stream
            </summary>
            <param name="url"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Get``1(System.String)">
            <summary>
            Method executes HTTP method GET method synchronously 
            </summary>
            <typeparam name="TResult"></typeparam>        
            <param name="url"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Get(System.String)">
            <summary>
            Method executes HTTP method GET method synchronously 
            </summary>
            <param name="url"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Send(System.Net.Http.HttpRequestMessage,System.Func{System.Net.Http.HttpContent})">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="contentGenerator"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Stream``1(System.String,System.Func{``0},System.Net.Http.HttpResponseMessage@)">
            <summary>
            
            </summary>
            <typeparam name="TContentType"></typeparam>
            <param name="url"></param>
            <param name="contentGenerator"></param>
            <param name="response"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Post``2(System.String,System.Func{``1})">
            <summary>
            Method executes HTTP method POST method synchronously 
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TContentType"></typeparam>
            <param name="url"></param>
            <param name="contentGenerator"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.PostAsync``2(System.String,System.Func{``1})">
            <summary>
            Method executes HTTP method POST method synchronously 
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TContentType"></typeparam>
            <param name="url"></param>
            <param name="contentGenerator"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Put``2(System.String,System.Func{``1})">
            <summary>
            Method executes HTTP method PUT method synchronously 
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TContentType"></typeparam>
            <param name="url"></param>
            <param name="contentGenerator"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Delete``1(System.String)">
            <summary>
            Method executes HTTP method DELETE method synchronously 
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="url"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.Logger">
            <summary>
            The logger which is used unless it is null.
            </summary>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.SafeServiceUrl">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.AuthenticationToken">
            <summary>
            
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.ServiceHttpClients.ServiceHttpClientBase.IsAuthenticated">
            <summary>
            Is authenticated
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.NamespaceDoc">
            <summary>
            The STG.RT.API namespace contains classes for the manipulation of work items and the access of configuration data.
            </summary>
        </member>
        <member name="T:STG.RT.API.STGConfiguration">
            <summary>
            This class provides access to platform configuration data.
            </summary>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.#ctor">
            <summary>
            Initializes a new instance of the STGConfiguration class.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.initConfigClient">
            <summary>
            Initialized configuration client
            </summary>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadProcesses">
            <summary>
            Loads a list of available newest processes.
            </summary>
            <returns>Returns a list of newest available processes of different types.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadAllProcesses">
            <summary>
            Returns a list of all Processes
            </summary>
            <returns>list of the all processes of the different types</returns>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadAvailableProcesses(System.Int32)">
            <summary>
            Loads a list of the newest processes where the provided activity is hosted.
            </summary>
            <param name="activityTypeIdentifier">Specifies the activity type identifier.</param>
            <returns>Returns a list of the newest processes where the specified activity type is hosted.</returns>
            <exception cref="T:System.ArgumentException">The provided activity type ID is invalid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <example>
            This example shows how to load only work items available for a certain activity in a predefined process.
            <code>
            private ObservableCollection&lt;DtoWorkItemData&gt; getAvailableWorkItems()
            {
                //create a collection of activity types with current activity only
                var activityList = new Collection&lt;int&gt;();
                activityList.Add(_activityTypeId);
            
                //get all processes where the current activity is hosted
                var processes = _configurationLayer.LoadAvailableProcesses(_activityTypeId);
                //this activity works only with process name set in configuration. Select the process identifier.
                var processList = new Collection&lt;int&gt;
                    (processes.Where(p =&gt; p.ProcessName.Equals(config.ProcessName, StringComparison.OrdinalIgnoreCase))
                        .Select(p =&gt; p.ProcessID).ToList());
            
                //get top 10 work items that are ready to be processed by this activity type and that belong to the configured process.
                return new ObservableCollection&lt;DtoWorkItemData&gt;(_processLayer.GetAvailableWorkItems(activityList, processList, 10));
            }
            </code>
            </example>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadAllAvailableProcesses(System.Int32)">
            <summary>
            Loads a list of all processes where the provided activity is hosted.
            </summary>
            <param name="activityTypeIdentifier">Specifies the activity type identifier.</param>
            <returns>Returns a list of all processes where the specified activity type is hosted.</returns>
            <exception cref="T:System.ArgumentException">The provided activity type ID is invalid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <example>
            This example shows how to load only work items available for a certain activity in a predefined process.
            <code>
            private ObservableCollection&lt;DtoWorkItemData&gt; getAvailableWorkItems()
            {
                //create a collection of activity types with current activity only
                var activityList = new Collection&lt;int&gt;();
                activityList.Add(_activityTypeId);
            
                //get all processes where the current activity is hosted
                var processes = _configurationLayer.LoadAvailableProcesses(_activityTypeId);
                //this activity works only with process name set in configuration. Select the process identifier.
                var processList = new Collection&lt;int&gt;
                    (processes.Where(p =&gt; p.ProcessName.Equals(config.ProcessName, StringComparison.OrdinalIgnoreCase))
                        .Select(p =&gt; p.ProcessID).ToList());
            
                //get top 10 work items that are ready to be processed by this activity type and that belong to the configured process.
                return new ObservableCollection&lt;DtoWorkItemData&gt;(_processLayer.GetAvailableWorkItems(activityList, processList, 10));
            }
            </code>
            </example>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityInstancesForProcess(STG.Common.DTO.DtoProcessInfo)">
            <summary>
            Loads a list of all activity instances that forms the provided process.
            </summary>
            <param name="process">Specifies the process whose activity types you want to read.</param>
            <returns>Returns a list of all activity instances that forms the requested process.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter process cannot be null.</exception>
            <exception cref="T:System.ArgumentException">The process ID is invalid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <example>
            This example shows how you can check if there are multiple instances of a same activity hosted in a selected process.
            <code>
            private bool hasMultipleInstances(DtoProcessInfo process)
            {
                
                //get all instances for the current process
                var instances = this.LoadActivityInstancesForProcess(process);
                //check if there are multiple instances of a same activity hosted in a provided process.
                var count = instances.Count(i =&gt; i.ActivityTypeID == _activityTypeId);
            
                //get top 10 work items that are ready to be processed by this activity type and that belongs to configured process
                return count &gt; 1;
            }
            </code>
            </example>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.FindRegisteredActivities(System.String,System.String)">
            <summary>
            Loads all registered activities with the provided name and version. 
            The activity version is optional. Pass null to get all the activities with the provided name irrelevant to version.
            </summary>
            <param name="activityName">Name of the activity.</param>
            <param name="activityVersion">Activity Version. Pass null to get all activities irrelevant to version</param>
            <returns>List of all registered activities that matches the provided name and version.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter activityName cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityInstanceConfiguration(STG.Common.DTO.DtoActivityInstanceInfo)">
             <summary>
             Loads the activity instance specific processing configuration.
             </summary>
             <param name="activityInstance">Specifies the activity instance whose configuration you want to read.</param>
             <returns>Returns the activity instance configuration.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter activityInstance cannot be null.</exception>
             <exception cref="T:System.ArgumentException">The activity instance ID is invalid.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
             <example>
             This example shows how an external activity can load activity instance settings based on a locked work item.
             <code>
             private void initializeSettings()
             { 
                 //get the activity instance of the selected work item
                 var activityInstanceInfo = _configurationLayer.LoadActivityInstanceInfo(_selectedWi.ActivityInstanceID);
                 //Load the activity-related configuration for selected activity instance
                 var configuration = _configurationLayer.LoadActivityInstanceConfiguration(activityInstanceInfo);
            
                 //deserialize saved settings into settings object
                 XmlSerializer xmlSerializer = new XmlSerializer(typeof(Settings));
                 var activitySettings = (Settings)xmlSerializer.Deserialize(new MemoryStream(configuration.Configuration));
                
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.IsNewerVariablesVersionAvailable(System.Int32,System.Int32)">
            <summary>
            Method checks for newer version of activity variables
            </summary>
            <param name="activityInstanceId">Activity identifier</param>
            <param name="version">Variables version</param>
            <returns>True if newer version of variable is available</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityInstanceProcessSettings(STG.Common.DTO.DtoActivityInstanceInfo)">
             <summary>
             Loads the system related process settings for the specified activity instance.
             </summary>
             <param name="activityInstance">Specifies the activity instance whose process settings you want to read.</param>
             <returns>Returns the process definition for the specified activity instance.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter activityInstance cannot be null.</exception>
             <exception cref="T:System.ArgumentException">The activity instance ID is invalid.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
             <example>
             This example shows how an external activity releases a selected work item.
             <code>
             private void releaseWorkItem()
             {
            
                 //load the activity instance info for selected work item
                 var activityInstanceInfo = _configurationLayer.LoadActivityInstanceInfo(_selectedWi.ActivityInstanceID);
                 //load process settings for activity instance
                 var processSettings = _configurationLayer.LoadActivityInstanceProcessSettings(activityInstanceInfo);
                 //release the work item by setting it in a valid state
                 _processLayer.MoveWorkItemInProcess(processSettings, _rootDoc, _selectedWi, _configurationLayer);
             }
             </code>
             Alternatively, you can skip the activity instance creation and access the process settings by specifying activity instance ID.
             <code>
             private void releaseWorkItem()
             {
            
                 //load process settings for activity instance
                 var processSettings = _configurationLayer.LoadActivityInstanceProcessSettings(_selectedWi.ActivityInstanceID);
                 //release the work item by setting it in a valid state
                 _processLayer.MoveWorkItemInprocess(processSettings, _rootDoc, _selectedWi, _configurationLayer);
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityInstanceProcessSettings(System.Int32)">
             <summary>
             Loads the system related process settings for the specified activity instance identifier.
             </summary>
             <param name="activityInstanceID">Specifies the activity instance identifier whose process settings you want to read.</param>
             <returns>Returns the process definition for the specified activity instance identifier.</returns>
             <exception cref="T:System.ArgumentException">Activity Instance ID should be a positive integer.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
             <example>
             This example shows how an external activity releases a selected work item.
             <code>
             private void releaseWorkItem()
             {
            
                 //load the activity instance info for selected work item
                 var activityInstanceInfo = _configurationLayer.LoadActivityInstanceInfo(_selectedWi.ActivityInstanceID);
                 //load process settings for activity instance
                 var processSettings = _configurationLayer.LoadActivityInstanceProcessSettings(activityInstanceInfo);
                 //release the work item by setting it in a valid state
                 _processLayer.MoveWorkItemInProcess(processSettings, _rootDoc, _selectedWi, _configurationLayer);
             }
             </code>
             Alternatively, you can skip the activity instance creation and access the process settings by specifying activity instance ID.
             <code>
             private void releaseWorkItem()
             {
            
                 //load process settings for activity instance
                 var processSettings = _configurationLayer.LoadActivityInstanceProcessSettings(_selectedWi.ActivityInstanceID);
                 //release the work item by setting it in a valid state
                 _processLayer.MoveWorkItemInProcess(processSettings, _rootDoc, _selectedWi, _configurationLayer);
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadNewestProcessInfo(STG.Common.DTO.DtoProcessInfo)">
             <summary>
             Loads the newest process based on a provided process object.
             </summary>
             <param name="process">Specifies the process object you want to check.</param>
             <returns>Returns the newest available process info object.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter process cannot be null.</exception>
             <exception cref="T:System.ArgumentException">An invalid process is specified.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
             <example>
             This example shows how to check if there is a newer process released.        
             <code>
             public bool IsNewerProcessAvailable(STGConfiguration configurationLayer)
             {
                var currentProcess = ActivityInfo.Process;
                var newestProcess = configurationLayer.LoadNewestProcessInfo(ActivityInfo.Process);
            
                if (currentProcess.ProcessID != newestProcess.ProcessID)
                {
                    return true;
                }
                else
                {
                    return false;
                }
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadNewestProcessInfo(System.Guid)">
            <summary>
            Loads the newest process based on a provided process object.
            </summary>
            <param name="processType">Specifies the process type you want to check.</param>
            <returns>Returns the newest available process info object.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityInstanceInfo(System.Int32)">
             <summary>
             Initializes the activity instance info object for a specified activity instance identifier.
             </summary>
             <param name="activityInstanceIdentifier">Specifies the activity instance identifier.</param>
             <returns>Returns the activity instance info object for the specified activity instance identifier.</returns>
             <exception cref="T:System.ArgumentException">The specified activity instance is invalid.</exception>
             <exception cref="T:System.UnauthorizedAccessException">The current user is not authorized to read the configuration data.</exception>
             <example>
             This example shows how external activity can load activity instance settings based on a locked work item.
             <code>
             private void initializeSettings()
             { 
                 //get the activity instance of the selected work item
                 var activityInstanceInfo = _configurationLayer.LoadActivityInstanceInfo(_selectedWi.ActivityInstanceID);
                 //Load the activity-related configuration for selected activity instance
                 var configuration = _configurationLayer.LoadActivityInstanceConfiguration(activityInstanceInfo);
            
                 //deserialize saved settings into settings object
                 XmlSerializer xmlSerializer = new XmlSerializer(typeof(Settings));
                 var activitySettings = (Settings)xmlSerializer.Deserialize(new MemoryStream(configuration.Configuration));
                
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadPackageForActivity(System.Int32)">
            <summary>
            Load activity package data
            </summary>
            <param name="activityId">ID of the activity the package requested for</param>
            <returns>The binary package data</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.LoadActivityType(System.Int32)">
            <summary>
            Loads the activity info for type with provided ID
            </summary>
            <param name="activityId">Activity type ID</param>
            <returns>Activity info</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.HasActivityTypeInstances(System.Int32)">
            <summary>
            Checks if the activity type has any instances in any process.
            Deletes the activity type if it has no instances.
            </summary>
            <param name="activityTypeID">Activity type ID</param>
            <returns>True if activity type has any instances in any process</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.ProcessCleanup">
            <summary>
            Deletes old versions of processes if they have no work items
            </summary>
            <returns>True if any process was deleted</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGConfiguration.Dispose">
            <summary>
            Releases resources associated with this object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.STGLogin">
            <summary>
            This class provides a functionality to authenticate with the system using different credentials than the currently running user.
            </summary>
        </member>
        <member name="M:STG.RT.API.STGLogin.SetCredential(System.String,System.String)">
            <summary>
            Sets the user defined via the provided username and password as the user who will use the API.
            </summary>
            <param name="username">Name of the user to authenticate.</param>
            <param name="password">Password of the user to authenticate.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.SetCredential(System.Net.NetworkCredential)">
            <summary>
            Sets the user defined via the NetworkCredential as the user who will use the API.
            </summary>
            <param name="credential">Network credentials of the user to authenticate.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.SetCredential(System.Security.Principal.WindowsIdentity)">
            <summary>
            Sets the user defined via the WindowsIdentity as the user who will use the API.
            </summary>
            <param name="identity">Windows identity of the user to authenticate.</param>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.AddCredential(System.Net.NetworkCredential)">
            <summary>
            Sets the user defined via the NetworkCredential as the user who will use the API.
            </summary>
            <param name="credential">Network credentials of the user to authenticate.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.AddCredential(System.Security.Principal.WindowsIdentity)">
            <summary>
            Sets the user defined via the WindowsIdentity as the user who will use the API.
            </summary>
            <param name="identity">Windows identity of the user to authenticate.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.AddCredential(System.String,System.String)">
            <summary>
            Sets the user defined via the username and password as the user who will use the API.
            </summary>
            <param name="username">Name of the user to authenticate.</param>
            <param name="password">Password of the user to authenticate.</param>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.Login">
            <summary>
            Logs the user provided via the SetCredential method with the system
            </summary>
            <returns>True if user is logged successfully, or false if the provided user can't be logged with the platform.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGLogin.Logout">
            <summary>
            Removes assigned credentials
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.STGLogin.UseWindowsAuthentication">
            <summary>
            A value indicating whether to use integrated windows authentication. <c>false</c>, if username + password authentication should be used.
            The default value is <c>true</c>.
            </summary>
            <introducedIn>1.4</introducedIn>
        </member>
        <member name="T:STG.RT.API.STGProcess">
            <summary>
            This class provides CRUD functionality over work items.
            </summary>
        </member>
        <member name="M:STG.RT.API.STGProcess.#ctor">
            <summary>
            Initializes a new instance of the STGProcess class.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.RemoveDeletedWorkItems">
            <summary>
            This method removes all the work items in the deleted status from the database.
            NOTE: Calling the method can have negative performance impact on the system. It is recommended to execute this method when the work-load on the system is low
            </summary>
            <returns>Number of deleted work items.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.RemoveDeletedWorkItemsForProcess(System.Int32)">
            <summary>
            This method removes all the work items for the provided process in the deleted status from the database.
            NOTE: Calling the method can have negative performance impact on the system. It is recommended to execute this method when the work-load on the system is low
            </summary>
            <param name="processID">ID of the process to delete work items</param>
            <returns>Number of deleted work items.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetDocumentStorages">
            <summary>
            Reads all the available document storages for the current runtime.
            </summary>
            <returns>List of all storages for the current runtime environment.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Creates a new work item for the provided process identifier.
            </summary>
            <param name="processId">Specifies a identifier of a process where the new work item is created.</param>
            <param name="workItem">Defines a work item to be created.</param>        
            <returns>Returns a newly-created work item for the provided process.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter processId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentException">The CreationDate specified in the SLAOverride property must be in the future.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,System.Int32)">
             <summary>
             Creates a new work item for the provided process identifier.
             </summary>
             <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
             <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>        
             <returns>Returns a newly-created work item for the provided process.</returns>
             <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter processId cannot be less than zero.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter activityInstanceID cannot be less than zero.</exception>
             <example>
             This example shows how to create a work item and fill it with documents in a timer activity.
             <code>
             public override void Process(STGProcess processLayer, STGConfiguration configurationLayer)
             {
                 //create an empty work item
                 var newWorkItem = processLayer.CreateWorkItem(ActivityInfo.Process.ProcessID, ActivityInfo.ActivityInstanceID);
                 //create a root document
                 var rootDocument = new STGDocument(newWorkItem);
            
                 //filter tiff files from input path specified in configuration
                 var availableFiles = Directory.GetFiles(ActivityConfiguration["inputPath"], "*.tif");
            
                 //create a child document for each tiff file
                 foreach (var file in availableFiles)
                 {
                     //create a child document and append it
                     var childDocument = new STGDocument();
                     rootDocument.AppendChild(childDocument);
                     //add media containing the tiff image to a child document
                     var fileInfo = new FileInfo(file);
                      childDocument.AppendMedia(STGMedia.Initialize(fileInfo.Name, 
                                                                  STGMedia.AvailableMediaTypes.FirstOrDefault(mt =&gt; mt.MediaTypeName.Equals(ActivityConfiguration["BWTiffMEdiaType"], StringComparison.OrdinalIgnoreCase)), 
                                                                  fileInfo.FullName, 
                                                                  true));
                 }
            
                 //release the work item in correct position in process
                 var processConfig = configurationLayer.LoadActivityInstanceProcessSettings(ActivityInfo);
                 processLayer.MoveWorkItemInProcess(processConfig, rootDocument, newWorkItem, configurationLayer);
            
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DtoWorkItemSLA)">
            <summary>
            Creates a new work item for the provided process identifier and overrides the process defined SLA options with the provided ones.
            </summary>
            <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
            <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>    
            <param name="overrideSLA">Specifies the SLA options that overrides the one configured for the process</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter processId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter activityInstanceID cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter overrideSLA cannot be null.</exception>
            <exception cref="T:System.ArgumentException">The CreationDate specified in the overrideSLA parameter must be in the future.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process identifier.
            </summary>
            <param name="processId">Specifies a identifier of a process where the new work item is created.</param>
            <param name="workItem">Defines a work item to be created.</param>        
            <param name="documentStorage">Document storage where documents assigned to this work item will be stored</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentStorage cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter processId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentException">The CreationDate specified in the SLAOverride property must be in the future.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process identifier.
            </summary>
            <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
            <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>   
            <param name="documentStorage">Specifies the document storage where the documents assigned to this work item will be stored.</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter processId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter activityInstanceID cannot be less than zero.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CreateWorkItem(System.Int32,System.Int32,STG.Common.DTO.DtoWorkItemSLA,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Creates a new work item for the provided process identifier and overrides the process defined SLA options with the provided ones.
            </summary>
            <param name="processId">Specifies an identifier of a process where the new work item is created.</param>
            <param name="activityInstanceID">Specifies an identifier of a activity instance that initiated a work item creation.</param>    
            <param name="overrideSLA">Specifies the SLA options that overrides the one configured for the process</param>
            <param name="documentStorage">Specifies the document storage where the documents assigned to this work item will be stored.</param>
            <returns>Returns a newly-created work item for the provided process.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter processId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the parameter activityInstanceID cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter overrideSLA cannot be null.</exception>
            <exception cref="T:System.ArgumentException">The CreationDate specified in the overrideSLA parameter must be in the future.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.DeleteWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Deletes a specified work item and all its documents form the system.
            </summary>
            <param name="workItem">Work item to delete.</param>
            <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.LockNextAvailableWorkItem(System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
             <summary>
             Selects a work item with a highest priority that matches the provided criteria, and locks it for processing.
             </summary>
             <param name="activityTypes">Specifies the list of activity types that can process the work item. 
             Usually this is list with a single activity type ID that represents your activity, 
             but if your activity is built in a way that represents multiple activity types, you can pass a list of all activity type identifiers.</param>
             <param name="processes">Specifies the list of processes where the work item must belong to. This parameter is optional.  
             If not specified, then all processes are used.</param>
             <returns>Returns a locked work item with a highest priority that matches the criteria.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter activityTypes cannot be null.</exception>
             <example>
             This example shows how to create a processing loop in an external that will continuously pick up available activities and process them.
             <code>
            public void processingLoop()
            { 
                //create collection with a current activity type
                var activityList = new Collection&lt;int&gt;(){_activityTypeID};
            
                //start loop
                while (true)
                {
                    DtoWorkItemData lockedWorkItem = null;
                    //break if termination is requested 
                    if (_terminate)
                    {
                        break;
                    }
            
                    try
                    {
                        //lock the first available work item for the current activity in any process
                        lockedWorkItem = _processLayer.LockNextAvailableWorkItem(activityList, null);
            			
                        //if no work items wait 5 sec
                        if (lockedWorkItem == null)
                        {
                            //break if termination is requested 
                            if (_terminate)
                            {
                                break;
                            }
                            System.Threading.Thread.Sleep(5000);
                        }
                        else
                        {
                            //work item locked; process it
            
                            //Load the document
                            var document = STGDocument.Load(lockedWorkItem);
            
                            //process work item
                            processWorkItem(lockedWorkItem, document);
            
            
                            //load the activity instance configuration and process the work item
                            var activityInstance = _configLayer.LoadActivityInstanceInfo(lockedWorkItem.ActivityInstanceID);
                            //release the work item in correct position in process
                            var processConfig = _configLayer.LoadActivityInstanceProcessSettings(activityInstance);
                            _processLayer.MoveWorkItemInProcess(processConfig, document, lockedWorkItem, _configLayer);
            
                            //break if termination is requested 
                            if (_terminate)
                            {
                                break;
                            }
                        }
                    }
                    catch (Exception exp)
                    {
                        //error occurred, release the work item in error state
                        if (lockedWorkItem != null)
                        {						
                            lockedWorkItem.Status = DtoWorkItemStatus.Error;
                            lockedWorkItem.Message = "Unhandled Failure";
                            //it is OK to send null as document here, because the work item is in error state
                            _processLayer.CommitWorkItem(lockedWorkItem, null);
                        }
                    }
            
                }
            }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.LockWorkItem(STG.Common.DTO.DtoWorkItemData)">
             <summary>
             Locks the provided work item.
             </summary>
             <param name="workItem">Specifies the work item to lock.</param>
             <returns>Returns the provided work item locked and ready for processing.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
             <example>
             This example shows how to lock a single work item based on selection performed on work items returned by <see cref="M:STG.RT.API.STGProcess.GetAvailableWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32)"/>.
             <code>
            private void openWICommand_Execute()
            {
                // get available work items for this activity instance
                var activityList = new Collection&lt;int&gt;();
                activityList.Add(_activityId);
                var available = _processLayer.GetAvailableWorkItems(activityList, null, 10);
            
                if (available.Count &gt; 0)
                {
                    // show available work items
                    _workItems = getAvailableWorkItems();
                    AvailableWorkItemsViewModel wiWM = new AvailableWorkItemsViewModel(_workItems);
                    var ret = ServiceLocator.GetService&lt;IApplicationDialogService&gt;().ShowDialog(wiWM, new WorkItemSelectDialog());
                    if (ret.HasValue &amp;&amp; ret.Value)
                    {
                        // open chosen work item
                        _selectedWi = wiWM.SelectedWorkItem;
                        try
                        {
                            // lock the opened work item and display it's document
                            _processLayer.LockWorkItem(_selectedWi);
                            initUI();
                            IsOpened = true;
                        }
                        catch (ArgumentException)
                        {
                            ServiceLocator.GetService&lt;IMessageBoxDialogService&gt;().ShowMessageBox("Failed to lock the selected work item. It might be that the work item was already locked elsewhere", "Locking failed!", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Warning);
                            IsOpened = false;
                        }
                    }
                }
                else
                {
                    ServiceLocator.GetService&lt;IMessageBoxDialogService&gt;().ShowMessageBox("No available work items", "No Work Items", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Information);
                }
            }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.LockWorkItem(System.Int32)">
            <summary>
            Locks the provided work item.
            </summary>
            <param name="workItemID">Specifies the work item ID to lock.</param>
            <returns>Returns the provided work item locked and ready for processing.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter workItem cannot be less than zero.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetAvailableWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32)">
            <summary>
            Loads a list of work items that are available for processing based on specified criteria.
            </summary>
            <param name="activityTypes">Specifies the list of activity types that can process the work item. 
            Usually this is list with a single activity type ID that represents your activity, 
            but if your activity is built in a way that represents multiple activity types, you can pass a list of all activity type identifiers.</param>
            <param name="processes">Specifies the list of processes where the work item must belong to. This parameter is optional.  
            If not specified, then all processes are used.</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <returns>Returns a list with up to maxItems work items that are available for processing and matches the provided criteria.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter activityTypes cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter maxItems cannot be less than one.</exception>
            <example>
            This example shows how to load only work items available for a certain activity in a predefined process.
            <code>
            private ObservableCollection&lt;DtoWorkItemData&gt; getAvailableWorkItems()
            {
                //create a collection of activity types with current activity only
                var activityList = new Collection&lt;int&gt;();
                activityList.Add(_activityTypeId);
            
                //get all processes where the current activity is hosted
                var processes = _configurationLayer.LoadAvailableProcesses(_activityTypeId);
                //this activity works only with process name set in configuration. Select the process identifier.
                var processList = new Collection&lt;int&gt;
                    (processes.Where(p =&gt; p.ProcessName.Equals(config.ProcessName, StringComparison.OrdinalIgnoreCase))
                        .Select(p =&gt; p.ProcessID).ToList());
            
                //get top 10 work items that are ready to be processed by this activity type and that belongs to configured process
                return new ObservableCollection&lt;DtoWorkItemData&gt;(_processLayer.GetAvailableWorkItems(activityList, processList, 10));
            }
            </code>
            </example>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetAvailableWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Loads a list of work items that are available for processing based on specified criteria.
            </summary>
            <param name="activityTypes">Specifies the list of activity types that can process the work item. 
            Usually this is list with a single activity type ID that represents your activity, 
            but if your activity is built in a way that represents multiple activity types, you can pass a list of all activity type identifiers.</param>
            <param name="processes">Specifies the list of processes where the work item must belong to. This parameter is optional.  
            If not specified, then all processes are used.</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>Returns a list with up to maxItems work items that are available for processing and matches the provided criteria.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameters activityTypes and documentStorage cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter maxItems cannot be less than one.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetAvailableWorkItemsForInstance(System.Int32,System.Int32)">
            <summary>
            Loads a list of work items that are available for processing based on specified activity instance ID.
            </summary>
            <param name="activityInstanceId">Specifies a work item ID that can process the work item</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <returns>Returns a list with up to maxItems work items that are available for processing by the provided work item ID.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameters maxItems and activityInstanceId cannot be less than zero.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetAvailableWorkItemsForInstance(System.Int32,System.Int32,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Loads a list of work items that are available for processing based on specified activity instance ID.
            </summary>
            <param name="activityInstanceId">Specifies a work item ID that can process the work item</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>Returns a list with up to maxItems work items that are available for processing by the provided work item ID.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameters maxItems and activityInstanceId cannot be less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">The value for parameter documentStorage cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetChildWorkItems(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Loads all child work items of the provided work item.
            </summary>
            <param name="rootWorkItem">Specifies a root work item to get the child work items for.</param>
            <returns>Returns a list of all child work items of the specified root work item.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter rootWorkItem cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItemData(System.Int32)">
            <summary>
            Loads the work item data based on the provided ID.
            </summary>
            <param name="workItemID">Specifies a work item identifier to load the data for.</param>
            <returns>Returns a work item object for the provided identifier.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for the work item ID must be positive integer.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus)">
            <summary>
            Loads a list of work items in provided status that matches a specified criteria.
            </summary>
            <param name="activityTypes">Specifies the list of activity types that can process the work item. 
            Usually this is list with a single activity type ID that represents your activity, 
            but if your activity is built in a way that represents multiple activity types, you can pass a list of all activity type identifiers.</param>
            <param name="processes">Specifies the list of processes where the work item must belong to. This parameter is optional.  
            If not specified, then all processes are used.</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <param name="status">Defines a status of work items.</param>
            <returns>Returns a list with up to maxItems work items that are in specified status and matches the provided criteria.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameter activityTypes cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter maxItems cannot be less than zero.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItems(System.Collections.ObjectModel.Collection{System.Int32},System.Collections.ObjectModel.Collection{System.Int32},System.Int32,STG.Common.DTO.DtoWorkItemStatus,STG.Common.DTO.DTODocumentStorageConnection)">
            <summary>
            Loads a list of work items in provided status that matches a specified criteria.
            </summary>
            <param name="activityTypes">Specifies the list of activity types that can process the work item. 
            Usually this is list with a single activity type ID that represents your activity, 
            but if your activity is built in a way that represents multiple activity types, you can pass a list of all activity type identifiers.</param>
            <param name="processes">Specifies the list of processes where the work item must belong to. This parameter is optional.  
            If not specified, then all processes are used.</param>
            <param name="maxItems">Defines a maximal number of work items to be returned in list.</param>
            <param name="status">Defines a status of work items.</param>
            <param name="documentStorage">Document storage where documents assigned to this work item are stored</param>
            <returns>Returns a list with up to maxItems work items that are in specified status and matches the provided criteria.</returns>
            <exception cref="T:System.ArgumentNullException">The value for parameters activityTypes and documentStorage cannot be null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value for parameter maxItems cannot be less than zero.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItemsFilteredOrderedPaged(STG.Common.DTO.DtoWorkItemSelectQuery)">
             <summary>
             Method retrieves filtered list of work items
             </summary>
             <param name="workItemSelectQuery">Specifies a DTO object that defines the filter criteria to load the work items. 
             Default values are 1 page with 100 records.</param>
             <returns>Paging data of work items that matches the specified criteria.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameters workItemSelectQuery cannot be null.</exception>
             <example>
             This example shows how to load all work items that appears in a specific process, in a specific activity and have a specific status.
             <code>
             private int countWorkItemsInErrorState(int processID, int activityInstanceID)
             {
                 //define the filter
                var query = new DtoWorkItemSelectQuery();
                //define status filter
                query.WorkItemStatusFilter = "Error";
                
                query.FilterData = new List&lt;DtoFilterData&lt;DtoWorkItemData&gt;&gt;();
            
                var filter = new DtoFilterData&lt;DtoWorkItemData&gt;();
                filter.FilterOperator = Operator.And;
            
                filter.Filters = new List&lt;DtoFilter&lt;DtoWorkItemData&gt;&gt;();
                
                var processFilter = new DtoFilter&lt;DtoWorkItemData&gt;();
                processFilter.Field = "ProcessID";
                processFilter.Operator = SearchOperator.Equal;
                processFilter.Value = processID;
                filter.Filters.Add(processFilter);
            
                var instanceFilter = new DtoFilter&lt;DtoWorkItemData&gt;();
                instanceFilter.Field = "ActivityInstanceID";
                instanceFilter.Operator = SearchOperator.Equal;
                instanceFilter.Value = activityInstanceID;
                filter.Filters.Add(instanceFilter);
            
                var errorFilter = new DtoFilter&lt;DtoWorkItemData&gt;();
                errorFilter.Field = "Status";
                errorFilter.Operator = SearchOperator.Equal;
                errorFilter.Value = DtoWorkItemStatus.Error;
                filter.Filters.Add(errorFilter);
            
                query.FilterData.Add(filter);
            
                //define sorting
                query.OrderBy = "WorkItemID";
                query.SortDirection = System.ComponentModel.ListSortDirection.Ascending;
                //define the amount of data to return 
                query.PageSize = 1000;
                //define the page to return
                query.PageNumber = 1;
                
                 //Load the data
                 var pageData = _processLayer.GetWorkItemsFilteredOrderedPaged(query);
             
                 //return the data count returned in pager
                 return pageData.Total;
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CommitWorkItem(STG.Common.DTO.DtoWorkItemData,STG.RT.API.Document.STGDocument)">
             <summary>
             Commits the work item by persisting the provided work item and document.
             </summary>
             <param name="workItem">Specifies a work item to persist.</param>
             <param name="rootDocument">Specifies a document to be persisted. If the provided work item is in error state, the document is not saved.</param>
             <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
             <exception cref="T:System.ArgumentNullException">The value for parameter rootDocument cannot be null.</exception>
             <example>
             This example shows how to create commit the work item in error state in case of error in processing loop.
             <code>
            public void processingLoop()
            { 
                //create collection with a current activity type
                var activityList = new Collection&lt;int&gt;(){_activityTypeID};
            
                //start loop
                while (true)
                {
                    DtoWorkItemData lockedWorkItem = null;
                    //break if termination is requested 
                    if (_terminate)
                    {
                        break;
                    }
            
                    try
                    {
                        //lock the first available work item for the current activity in any process
                        lockedWorkItem = _processLayer.LockNextAvailableWorkItem(activityList, null);
            			
                        //if no work items wait 5 sec
                        if (lockedWorkItem == null)
                        {
                            //break if termination is requested 
                            if (_terminate)
                            {
                                break;
                            }
                            System.Threading.Thread.Sleep(5000);
                        }
                        else
                        {
                            //work item locked; process it
            
                            //Load the document
                            var document = STGDocument.Load(lockedWorkItem);
            
                            //process work item
                            processWorkItem(lockedWorkItem, document);
            
            
                            //load the activity instance configuration and process the work item
                            var activityInstance = _configLayer.LoadActivityInstanceInfo(lockedWorkItem.ActivityInstanceID);
                            //release the work item in correct position in process
                            var processConfig = _configLayer.LoadActivityInstanceProcessSettings(activityInstance);
                            _processLayer.MoveWorkItemInProcess(processConfig, document, lockedWorkItem, _configLayer);
            
                            //break if termination is requested 
                            if (_terminate)
                            {
                                break;
                            }
                        }
                    }
                    catch (Exception exp)
                    {
                        //error occurred, release the work item in error state
                        if (lockedWorkItem != null)
                        {						
                            lockedWorkItem.Status = DtoWorkItemStatus.Error;
                            lockedWorkItem.Message = "Unhandled Failure";
                            //it is OK to send null as document here, because the work item is in error state
                            _processLayer.CommitWorkItem(lockedWorkItem, null);
                        }
                    }
            
                }
            }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CommitWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Commits the work item by persisting the provided work item.
            </summary>
            <param name="workItem">Specifies a work item to persist.</param>
            <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.UpgradeWorkItem(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Upgrades the work item and its children to a newest process version if one is available.
            </summary>
            <param name="workItem">Specifies the work item to upgrade.</param>
            <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.MoveWorkItemInProcess(STG.Common.DTO.DtoActivityProcessDefinition,STG.RT.API.Document.STGDocument,STG.Common.DTO.DtoWorkItemData,STG.RT.API.Interfaces.ISTGConfiguration)">
             <summary>
             Calculates the next activity based on process definition, persists a document and work item by releasing it in the correct state in process based on definition.
             </summary>
             <param name="processDefinition">Specifies a process definition of the current activity instance.</param>
             <param name="document">Defines a root document of the work item currently in progress</param>
             <param name="workItem">Defines a work item currently in progress.</param>
             <param name="configLayer">Provides access to <see cref="T:STG.RT.API.STGConfiguration"/>.</param>
             <returns>Returns the persisted work item in a correct state.</returns>
             <exception cref="T:System.ArgumentNullException">The value for parameter processDefinition cannot be null.</exception>
             <exception cref="T:System.ArgumentNullException">The value for parameter workItem cannot be null.</exception>
             <example>
             This example shows how to create a work item, fill it with documents and release it in correct position in a timer activity.
             <code>
             public override void Process(STGProcess processLayer, STGConfiguration configurationLayer)
             {
                 //create an empty work item
                 var newWorkItem = processLayer.CreateWorkItem(ActivityInfo.Process.ProcessID, ActivityInfo.ActivityInstanceID);
                 //create a root document
                 var rootDocument = new STGDocument(newWorkItem);
            
                 //filter tiff files from input path specified in configuration
                 var availableFiles = Directory.GetFiles(ActivityConfiguration["inputPath"], "*.tif");
            
                 //create a child document for each tiff file
                 foreach (var file in availableFiles)
                 {
                     //create a child document and append it
                     var childDocument = new STGDocument();
                     rootDocument.AppendChild(childDocument);
                     //add media containing the tiff image to a child document
                     var fileInfo = new FileInfo(file);
                      childDocument.AppendMedia(STGMedia.Initialize(fileInfo.Name, 
                                                                  STGMedia.AvailableMediaTypes.FirstOrDefault(mt =&gt; mt.MediaTypeName.Equals(ActivityConfiguration["BWTiffMEdiaType"], StringComparison.OrdinalIgnoreCase)), 
                                                                  fileInfo.FullName, 
                                                                  true));
                 }
            
                 //release the work item in correct position in process
                 var processConfig = configurationLayer.LoadActivityInstanceProcessSettings(ActivityInfo);
                 processLayer.MoveWorkItemInProcess(processConfig, rootDocument, newWorkItem, configurationLayer);
            
             }
             </code>
             </example>
             <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItemAudits(System.Int32)">
            <summary>
            Provides a list of work item audits for the specified work item ID
            </summary>
            <param name="workItemID">Work item ID to get the audits for.</param>
            <returns>list of work item audits for the specified work item ID</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.GetWorkItemIDsWithExpiredHeartbeat(System.DateTime,System.Int32)">
            <summary>
            Gets the list of work item ID-s that have reported the last heartbeat before the provided time.
            </summary>
            <param name="expirationTime">Check heartbeats that are equal or older than the provided expiration time</param>
            <param name="maxItems">Maximum number of work item ID-s to return</param>
            <returns>List of work item ID-s for work items that have expired heartbeats</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.Dispose">
            <summary>
             Releases resources associated with this object.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.MoveWorkItemInProcess(STG.Common.DTO.DtoActivityProcessDefinition,STG.RT.API.Document.STGDocument,STG.Common.DTO.DtoWorkItemData,System.Collections.Generic.IList{System.Int32},STG.RT.API.Interfaces.ISTGConfiguration)">
            <summary>
            this method calculates the next activity based on process definition, and saves the work item with the correct state based on process definition
            </summary>
            <param name="processDefinition">process definition of the activity currently in progress</param>
            <param name="document">root document of the activity currently in progress</param>
            <param name="workItem">work item in progress</param>
            <param name="hostedActivities">List of activity types hosted in the activity host</param>
            <param name="configLayer">Configuration Layer for activity configuration extraction</param>
            <returns>work item with the correct state</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.CheckIfWorkItemIsValidForDocumentLoad(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Check if work item is valid for document load
            </summary>
            <param name="workItem">The work item to check validity</param>
            <returns>Work item validity status</returns>
        </member>
        <member name="M:STG.RT.API.STGProcess.LoadDocument(STG.Common.DTO.DtoWorkItemData,STG.Common.DTO.DtoDocumentLoadingConfiguration)">
            <summary>
            Loads the document with the specified loading configuration.
            </summary>
            <param name="workItem">Defines the work item.</param>
            <param name="docLoadingConfig">Defines the loading configuration.</param>
            <returns>Returns the root document of the provided work item.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.LoadDocument(STG.Common.DTO.DtoWorkItemData)">
            <summary>
            Loads the document with the specified loading configuration.
            </summary>
            <param name="workItem">Defines the work item.</param>
            <returns>Returns the root document of the provided work item.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#FireDocumentLoad(STG.RT.API.Interfaces.DocumentEventArgs)">
            <summary>
            Internal method used to notify all subscribers of this STGProcess object that a document was loaded.
            </summary>
            <param name="eventArgs">Info around loading the document</param>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterCreateWorkItem">
            <summary>
            Event called after Work Item is created
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterDeleteWorkItem">
            <summary>
            Event called after Work Item is deleted
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterLockWorkItem">
            <summary>
            Event called after Work Item is locked
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterCommitWorkItem">
            <summary>
            Event called after Work Item is updated
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterDocumentLoad">
            <summary>
            Callback called after document is loaded
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterDocumentSave">
            <summary>
            Callback after document is saved
            </summary>
        </member>
        <member name="E:STG.RT.API.STGProcess.STG#RT#API#Interfaces#ISTGProcessInternal#AfterCustomAction">
            <summary>
            Callback after document is saved
            </summary>
        </member>
        <member name="T:STG.RT.API.Process.ExpressionMethods">
            <summary>
            encapsulates all the methods required for expression execution
            </summary>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.regexMatch(System.Object,System.Object)">
            <summary>
            executes the regular expression on provided value.
            </summary>
            <param name="value"></param>
            <param name="regularExpression"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.containsCustomValue(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            checks if document contains a custom value with provided key
            </summary>
            <param name="rootDocument"></param>
            <param name="valueKey"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.containsField(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            checks if document contains a field with provided name
            </summary>
            <param name="rootDocument"></param>
            <param name="fieldName"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.probability(System.Int32)">
            <summary>
            Executes the random function and checks if the result is below or above the provided percentage.
            If below the provided percentage it will return true if above it will return false.
            This method may be used to filter/route certain percentage of work items
            </summary>
            <param name="percentage"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.checkStartsWith(System.Object,System.Object)">
            <summary>
            checks if one value starts with another value
            </summary>
            <param name="checkingValue"></param>
            <param name="valueToCheck"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.checkEndsWith(System.Object,System.Object)">
            <summary>
            checks if one value ends with another value
            </summary>
            <param name="checkingValue"></param>
            <param name="valueToCheck"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.checkContains(System.Object,System.Object)">
            <summary>
            checks if one value contains another value
            </summary>
            <param name="checkingValue"></param>
            <param name="valueToCheck"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.failExpression">
            <summary>
            default function for invalid expression
            </summary>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.getField(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            reads the field value based on a field name
            </summary>
            <param name="rootDocument"></param>
            <param name="fieldName"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.getCustomValue(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            reads the customValue value based on a field name
            </summary>
            <param name="rootDocument"></param>
            <param name="valueKey"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.getChildCount(STG.RT.API.Document.STGDocument)">
            <summary>
            returns the number of child documents
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionMethods.getClassName(STG.RT.API.Document.STGDocument)">
            <summary>
            returns the name of the document class
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="P:STG.RT.API.Process.ExpressionMethods.lastRnd">
            <summary>
            returns last random number returned by random
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Process.ExpressionExecutor">
            <summary>
            handles the execution of the routing/filtering expression
            </summary>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionExecutor.#ctor">
            <summary>
            constructor accepting root document
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionExecutor.EvaluateExpression(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            evaluates the provided expression
            </summary>
            <param name="rootDocument"></param>
            <param name="expression"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionExecutor.PrintExpression(STG.RT.API.Document.STGDocument,System.String)">
            <summary>
            Provides the literal of the expression
            </summary>
            <param name="rootDocument"></param>
            <param name="expression"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:STG.RT.API.Process.ExpressionParser">
            <summary>
            parses the provided expression
            </summary>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.CreateEvaluationExpression(System.String)">
            <summary>
            entry method that parses the filter expression and converts it into function to be evaluated
            </summary>
            <param name="filterExpression"></param>
            <returns></returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.checkValidPreviousChar(System.String,System.Int32)">
            <summary>
            check if the expression match is found on correct position 
            it can be either first or must follow space or bracket
            </summary>
            <param name="expression"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.fixLogicalOperators(System.String,System.String@)">
            <summary>
            replaces the AND and OR operators from expression with correct logical operation keywords
            </summary>
            <param name="expression"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.convertLogicalOperators(System.String)">
            <summary>
            converts the AND or OR operator into its equivalent
            </summary>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.parseExpression(System.String,System.String@)">
            <summary>
            parses the expression and converts it into a list of function calls
            </summary>
            <param name="expression"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.parseExpressionLiteral(System.String,System.String@)">
            <summary>
            parses the expression and converts it into a list of function calls
            </summary>
            <param name="expression"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.createReplacement(System.String,System.String,System.String)">
            <summary>
            this function converts a operator and it's parameters into a function call
            </summary>
            <param name="oper"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.createLiteralReplacement(System.String,System.String,System.String)">
            <summary>
            this function converts a operator and it's parameters into a function call
            </summary>
            <param name="oper"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.fixMethod(System.String,System.Boolean)">
            <summary>
            checks if the parameter must be converted into a function call
            </summary>
            <param name="param"></param>
            <param name="isLiteral"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.convertExpression(System.String)">
            <summary>
            converts the provided expression into a function call
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.matchingExpression(System.String)">
            <summary>
            checks if the provided parameter matches one of available functions
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.findLeftArgStartPos(System.String,System.Int32)">
            <summary>
            finds a starting position of the left expression argument
            </summary>
            <param name="expression"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.findRightArgStartPos(System.String,System.Int32)">
            <summary>
            searches if the expression matches one of the forward delimiters and returns the position
            </summary>
            <param name="expression"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.findExpressionEndPos(System.String,System.Int32)">
            <summary>
            searches where the single expression ends
            </summary>
            <param name="expression"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.matchList(System.String,System.Int32,System.String[],System.Boolean)">
            <summary>
            check if one of the items from provided list matches the expression on provided position
            </summary>
            <param name="expression"></param>
            <param name="position"></param>
            <param name="matchingList"></param>
            <param name="matchBackward"></param>
            <returns></returns>
        </member>
        <member name="M:STG.RT.API.Process.ExpressionParser.checkArgumentsAndLiterals(System.Char,System.Boolean@,System.Boolean@,System.Boolean)">
            <summary>
            checks if the current character must change argument or literal flag
            </summary>
            <param name="currentCharacter"></param>
            <param name="isLiteral"></param>
            <param name="isArgument"></param>
            <param name="matchBackward"></param>
            <returns></returns>
        </member>
        <member name="T:STG.RT.API.STGSearch">
            <summary>
            This class provides search functionality to access stored index data
            </summary>
        </member>
        <member name="M:STG.RT.API.STGSearch.#ctor">
            <summary>
            Initializes a new instance of the STGProcess class.
            </summary>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGSearch.GetIndexValuesForDocument(System.Guid)">
            <summary>
            Loads all the index values stored for the provided document.
            </summary>
            <param name="documentID">ID of the document to search the index for.</param>
            <returns>List of index data.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGSearch.GetIndexValuesForDocuments(System.Int32,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Loads all the index values stored for the provided document.
            </summary>
            <param name="activityTypeID">ID of the activity type to search the index for. Passing -1 will search for all activity types.</param>
            <param name="documentIDs">List of IDs of the documents to search the index for. Passing empty list will search for all documents. </param>
            <returns>List of index data.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="M:STG.RT.API.STGSearch.PerformSearch(System.Collections.Generic.IList{STG.Common.DTO.DtoIndexFilter},STG.Common.DTO.Operator)">
            <summary>
            Search index based on the provided criteria
            </summary>
            <param name="searchConditions">Search Condition Structure.</param>
            <param name="oper">Operator used to search multiple filters</param>
            <returns>List of index data.</returns>
            <introducedIn>1.3</introducedIn>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
